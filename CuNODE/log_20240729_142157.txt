07/29/2024 02:21:57 PM - DEBUG - init_logging - Logfile initialised
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: PSD at selected frequency
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: Time
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: Signal Amplitude
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: Frequency
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: PSD Magnitude
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - update_zSlice - Z Slice updated
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - update_zSlice - Z Slice updated
07/29/2024 02:21:58 PM - DEBUG - on_from_change - From changed to: 0.00
07/29/2024 02:21:58 PM - DEBUG - update_ySlice - Y Slice updated
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - update_ySlice - Y Slice updated
07/29/2024 02:21:58 PM - DEBUG - on_from_change - From changed to: 0.00
07/29/2024 02:21:58 PM - DEBUG - update_xSlice - X Slice updated
07/29/2024 02:21:58 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:21:58 PM - DEBUG - update_xSlice - X Slice updated
07/29/2024 02:21:58 PM - DEBUG - on_from_change - From changed to: 0.00
07/29/2024 02:21:58 PM - DEBUG - update_zVar - Z Variable updated
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - update_yVar - Y Variable updated
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - update_xVar - X Variable updated
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - plotMode_select - Plot mode selected: 3
07/29/2024 02:21:58 PM - DEBUG - on_from_change - From changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_n_change - To changed to: 100
07/29/2024 02:21:58 PM - DEBUG - on_from_change - From changed to: 0
07/29/2024 02:21:58 PM - DEBUG - on_n_change - To changed to: 100
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:21:58 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:16 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value2.0']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value2.0', '$clip_value4.1']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$6compare_op.2']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value10.0']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value10.0', '$clip_value12.1']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value10.0', '$14unary_negative.2']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$16compare_op.3']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value24.0']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value24.0', '$clip_value26.1']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$28compare_op.2']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value20.0']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$clip_value32.0']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$clip_value36.0']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$38unary_negative.1']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:16 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:16 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/29/2024 02:22:16 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 02:22:16 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:16 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 02:22:16 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 02:22:16 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:16 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/29/2024 02:22:16 PM - DEBUG - run - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/29/2024 02:22:16 PM - DEBUG - run - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:16 PM - DEBUG - run - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/29/2024 02:22:16 PM - DEBUG - run - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:16 PM - DEBUG - run - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:16 PM - DEBUG - interpret - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/29/2024 02:22:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07EE9820>
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: value = arg(0, name=value)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: clip_value = arg(1, name=clip_value)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $6compare_op.2 = value <= clip_value
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: bool8 = global(bool: <class 'bool'>)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $8pred, 10, 24
07/29/2024 02:22:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 10
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07EE9820>
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: bool18 = global(bool: <class 'bool'>)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $18pred, 20, 24
07/29/2024 02:22:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 20
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07EE9820>
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $22return_value.1 = cast(value=value)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: return $22return_value.1
07/29/2024 02:22:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 24
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07EE9820>
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $28compare_op.2 = value > clip_value
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: bool30 = global(bool: <class 'bool'>)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $30pred, 32, 36
07/29/2024 02:22:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 32
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07EE9820>
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $34return_value.1 = cast(value=clip_value)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: return $34return_value.1
07/29/2024 02:22:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 36
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07EE9820>
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/29/2024 02:22:16 PM - DEBUG - _run_ssa_block_pass - on stmt: return $40return_value.2
07/29/2024 02:22:16 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000021E07EBAE20>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000021E07EBAC70>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000021E07F0A160>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000021E07F0A460>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000021E07F0A910>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000021E07F0AB80>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000021E07F0AE80>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000021E07F0D220>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000021E07F0D3A0>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000021E07EE4820>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000021E07EE42B0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000021E07F0A040>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000021E07F0AA60>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000021E07EE4310>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000021E07EE45E0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000021E07EE44C0>,
                        0)]})
07/29/2024 02:22:16 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021E07EE9820>
07/29/2024 02:22:16 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value2.0']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value2.0', '$clip_value4.1']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$6compare_op.2']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value10.0']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value10.0', '$clip_value12.1']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value10.0', '$14unary_negative.2']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$16compare_op.3']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value24.0']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value24.0', '$clip_value26.1']
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$28compare_op.2']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$value20.0']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$clip_value32.0']
07/29/2024 02:22:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:16 PM - DEBUG - run - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:16 PM - DEBUG - run - stack: []
07/29/2024 02:22:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:16 PM - DEBUG - dispatch - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/29/2024 02:22:16 PM - DEBUG - dispatch - stack ['$clip_value36.0']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$38unary_negative.1']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/29/2024 02:22:17 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 02:22:17 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:17 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 02:22:17 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:17 PM - DEBUG - interpret - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04850>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: value = arg(0, name=value)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: clip_value = arg(1, name=clip_value)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $6compare_op.2 = value <= clip_value
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool8 = global(bool: <class 'bool'>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $8pred, 10, 24
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 10
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04850>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool18 = global(bool: <class 'bool'>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $18pred, 20, 24
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 20
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04850>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $22return_value.1 = cast(value=value)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $22return_value.1
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 24
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04850>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $28compare_op.2 = value > clip_value
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool30 = global(bool: <class 'bool'>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $30pred, 32, 36
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 32
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04850>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34return_value.1 = cast(value=clip_value)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $34return_value.1
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 36
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04850>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $40return_value.2
07/29/2024 02:22:17 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000021DE0709460>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000021DE0709310>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000021DE07099D0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000021DE0709CD0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000021DFBB041C0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000021DFBB04430>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000021DFBB04730>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000021DFBB04A90>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000021DFBB04C10>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000021DFB5507F0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000021DFB550BE0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000021DE0709070>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000021DFBB04310>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000021DFB550820>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000021DFB550F40>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000021E07F0D940>,
                        0)]})
07/29/2024 02:22:17 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021DFBB04850>
07/29/2024 02:22:17 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: []
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$8call_function.3']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$10call_function.4']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: ['$phi14.0']
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi14.0']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: []
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$const54.0']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: ['$phi16.0', '$phi16.1']
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$phi16.1']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$26compare_op.6']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: ['$phi30.0']
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/29/2024 02:22:17 PM - DEBUG - find_use_defs - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/29/2024 02:22:17 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/29/2024 02:22:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:17 PM - DEBUG - apply_changes - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/29/2024 02:22:17 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:17 PM - DEBUG - interpret - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000021DE0892CA0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04FD0>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array = arg(0, name=noise_array)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: sigmas = arg(1, name=sigmas)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: idx = arg(2, name=idx)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: RNG = arg(3, name=RNG)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi14.0 = $12get_iter.5
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 14
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04FD0>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi16.1 = $14for_iter.2
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $14for_iter.3, 16, 54
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 16
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04FD0>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi16.1
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const24.5 = const(float, 0.0)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool28 = global(bool: <class 'bool'>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $28pred, 30, 55
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 30
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04FD0>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000021DE0892CA0>))
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array[i] = $44binary_multiply.8
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 55
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 54
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04FD0>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const54.0 = const(NoneType, None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $56return_value.1 = cast(value=$const54.0)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $56return_value.1
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 55
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB04FD0>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:17 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000021DFBB77880>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000021DFBB779A0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000021DFBB77CD0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000021DFBB77DF0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000021DFBB77F10>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000021DFBB67610>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000021DFBB67910>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000021DFBB67B80>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000021DFBB77280>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000021DFBB67D60>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000021DFBB661C0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000021DFBB7DAC0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000021DFBB7D940>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000021DFBB77400>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000021DFBAF4CD0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000021DFBB77700>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000021DFBB67760>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000021E07EE9220>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000021DFBB77520>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000021DFBB77C10>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000021DFBB77100>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000021DFBB67A60>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000021DFBB67220>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000021DFBB7DFA0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000021DFBB7DD60>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000021DFBB7DE80>,
                         0)]})
07/29/2024 02:22:17 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021DFBB04FD0>
07/29/2024 02:22:17 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: []
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$8call_function.3']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$10call_function.4']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: ['$phi14.0']
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi14.0']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: []
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$const54.0']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: ['$phi16.0', '$phi16.1']
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$phi16.1']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi16.0', '$26compare_op.6']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - run - stack: ['$phi30.0']
07/29/2024 02:22:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/29/2024 02:22:17 PM - DEBUG - dispatch - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/29/2024 02:22:17 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:17 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/29/2024 02:22:17 PM - DEBUG - find_use_defs - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/29/2024 02:22:17 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/29/2024 02:22:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:17 PM - DEBUG - apply_changes - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/29/2024 02:22:17 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/29/2024 02:22:17 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/29/2024 02:22:17 PM - DEBUG - run - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:17 PM - DEBUG - interpret - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000021DE0892AF0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB7D610>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array = arg(0, name=noise_array)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: sigmas = arg(1, name=sigmas)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: idx = arg(2, name=idx)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: RNG = arg(3, name=RNG)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi14.0 = $12get_iter.5
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 14
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB7D610>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi16.1 = $14for_iter.2
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $14for_iter.3, 16, 54
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 16
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB7D610>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi16.1
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const24.5 = const(float, 0.0)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool28 = global(bool: <class 'bool'>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $28pred, 30, 55
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 30
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB7D610>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000021DE0892AF0>))
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array[i] = $44binary_multiply.8
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 55
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 54
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB7D610>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const54.0 = const(NoneType, None)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $56return_value.1 = cast(value=$const54.0)
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $56return_value.1
07/29/2024 02:22:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 55
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB7D610>
07/29/2024 02:22:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:17 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000021DFBB01E80>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000021DFBB01FA0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000021E07F68310>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000021E07F68430>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000021E07F68550>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000021E07F62EB0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000021DFBB7D490>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000021E07F59DC0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000021DFBB01880>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000021E07F50340>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000021E07F55A60>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000021E07F687F0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000021E07F68970>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000021DFBB01A00>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000021E07F68E80>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000021DFBB01D00>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000021DFBB67BE0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000021E07F68AF0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000021DFBB01BB0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000021E07F68250>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000021DFBB01700>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000021E07F59EE0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000021DFBB011C0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000021DFBB015E0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000021DFBB013A0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000021DFBB014C0>,
                         0)]})
07/29/2024 02:22:17 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021DFBB7D610>
07/29/2024 02:22:18 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value2.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value2.0', '$clip_value4.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$6compare_op.2']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value10.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value10.0', '$clip_value12.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value10.0', '$14unary_negative.2']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$16compare_op.3']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value24.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value24.0', '$clip_value26.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$28compare_op.2']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value20.0']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$clip_value32.0']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$clip_value36.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$38unary_negative.1']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/29/2024 02:22:18 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 02:22:18 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:18 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:18 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 02:22:18 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:18 PM - DEBUG - interpret - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FABF10>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: value = arg(0, name=value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: clip_value = arg(1, name=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $6compare_op.2 = value <= clip_value
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool8 = global(bool: <class 'bool'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $8pred, 10, 24
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 10
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FABF10>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool18 = global(bool: <class 'bool'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $18pred, 20, 24
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 20
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FABF10>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $22return_value.1 = cast(value=value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $22return_value.1
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 24
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FABF10>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $28compare_op.2 = value > clip_value
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool30 = global(bool: <class 'bool'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $30pred, 32, 36
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 32
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FABF10>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $34return_value.1 = cast(value=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $34return_value.1
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 36
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FABF10>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $40return_value.2
07/29/2024 02:22:18 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000021DDDCAF880>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000021DDDCAF400>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000021DDDCAF310>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000021DDDCA2F40>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000021E07FB6310>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000021E07FC2FD0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000021E07FC2F40>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000021E07FAB7F0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000021E07FB6B20>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000021DDDCAFC40>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000021DDDCAFC70>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000021DDDCAF250>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000021E07FB6700>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000021DDDCAFCD0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000021E07FC20A0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000021E07FC22B0>,
                        0)]})
07/29/2024 02:22:18 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021E07FABF10>
07/29/2024 02:22:18 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value2.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value2.0', '$clip_value4.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$6compare_op.2']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value10.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value10.0', '$clip_value12.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value10.0', '$14unary_negative.2']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$16compare_op.3']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value24.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value24.0', '$clip_value26.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$28compare_op.2']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$value20.0']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$clip_value32.0']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$clip_value36.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$38unary_negative.1']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/29/2024 02:22:18 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 02:22:18 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:18 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 02:22:18 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 02:22:18 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:18 PM - DEBUG - interpret - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB32A60>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: value = arg(0, name=value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: clip_value = arg(1, name=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $6compare_op.2 = value <= clip_value
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool8 = global(bool: <class 'bool'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $8pred, 10, 24
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 10
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB32A60>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool18 = global(bool: <class 'bool'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $18pred, 20, 24
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 20
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB32A60>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $22return_value.1 = cast(value=value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $22return_value.1
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 24
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB32A60>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $28compare_op.2 = value > clip_value
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool30 = global(bool: <class 'bool'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $30pred, 32, 36
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 32
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB32A60>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $34return_value.1 = cast(value=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $34return_value.1
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 36
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021DFBB32A60>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $40return_value.2
07/29/2024 02:22:18 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000021E08054BE0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000021E08054D90>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000021E08058040>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000021E08058340>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000021DFBAB7100>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000021DE0896DF0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000021DFBB305E0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000021DFBB30670>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000021DFBB30700>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000021E08054550>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000021E080547C0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000021E08054EE0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000021DE0896E80>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000021E080546A0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000021E08054160>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000021E08054040>,
                        0)]})
07/29/2024 02:22:18 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021DFBB32A60>
07/29/2024 02:22:18 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$2load_global.0', '$8call_function.3']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$10call_function.4']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: ['$phi14.0']
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi14.0']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: []
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$const54.0']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: ['$phi16.0', '$phi16.1']
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi16.0', '$phi16.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi16.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi16.0', '$26compare_op.6']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:18 PM - DEBUG - run - stack: ['$phi30.0']
07/29/2024 02:22:18 PM - DEBUG - run - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/29/2024 02:22:18 PM - DEBUG - dispatch - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/29/2024 02:22:18 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:18 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:18 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/29/2024 02:22:18 PM - DEBUG - find_use_defs - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/29/2024 02:22:18 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/29/2024 02:22:18 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:18 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:18 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:18 PM - DEBUG - apply_changes - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/29/2024 02:22:18 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/29/2024 02:22:18 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/29/2024 02:22:18 PM - DEBUG - run - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:18 PM - DEBUG - interpret - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000021DE0892CA0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FB79A0>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array = arg(0, name=noise_array)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: sigmas = arg(1, name=sigmas)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: idx = arg(2, name=idx)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: RNG = arg(3, name=RNG)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi14.0 = $12get_iter.5
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 14
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FB79A0>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi16.1 = $14for_iter.2
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $14for_iter.3, 16, 54
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 16
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FB79A0>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi16.1
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const24.5 = const(float, 0.0)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool28 = global(bool: <class 'bool'>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $28pred, 30, 55
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 30
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FB79A0>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000021DE0892CA0>))
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array[i] = $44binary_multiply.8
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 55
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 54
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FB79A0>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const54.0 = const(NoneType, None)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $56return_value.1 = cast(value=$const54.0)
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $56return_value.1
07/29/2024 02:22:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 55
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E07FB79A0>
07/29/2024 02:22:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:18 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000021E0806E880>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000021E0806E9A0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000021E0806ECD0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000021E0806EDF0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000021E0806EF10>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000021E0806BA00>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000021E0806B700>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000021E0806B490>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000021E0806E280>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000021E08072640>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000021E08077EB0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000021E07FAB8E0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000021DFBB23D30>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000021E0806E400>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000021E07FB71C0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000021E0806E700>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000021E0806B8B0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000021E08072520>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000021E0806E520>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000021E0806EC10>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000021E0806E100>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000021E0806B5B0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000021E0806BDF0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000021E08072070>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000021E080722B0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000021E08072190>,
                         0)]})
07/29/2024 02:22:18 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021E07FB79A0>
07/29/2024 02:22:19 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 02:22:19 PM - DEBUG - run - stack: []
07/29/2024 02:22:19 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$2load_global.0', '$8call_function.3']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$10call_function.4']
07/29/2024 02:22:19 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/29/2024 02:22:19 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:19 PM - DEBUG - run - stack: ['$phi14.0']
07/29/2024 02:22:19 PM - DEBUG - run - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi14.0']
07/29/2024 02:22:19 PM - DEBUG - run - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/29/2024 02:22:19 PM - DEBUG - run - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:19 PM - DEBUG - run - stack: []
07/29/2024 02:22:19 PM - DEBUG - run - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack []
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$const54.0']
07/29/2024 02:22:19 PM - DEBUG - run - end state. edges=[]
07/29/2024 02:22:19 PM - DEBUG - run - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/29/2024 02:22:19 PM - DEBUG - run - stack: ['$phi16.0', '$phi16.1']
07/29/2024 02:22:19 PM - DEBUG - run - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi16.0', '$phi16.1']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi16.0']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi16.0', '$26compare_op.6']
07/29/2024 02:22:19 PM - DEBUG - run - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/29/2024 02:22:19 PM - DEBUG - run - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:19 PM - DEBUG - run - stack: ['$phi30.0']
07/29/2024 02:22:19 PM - DEBUG - run - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/29/2024 02:22:19 PM - DEBUG - dispatch - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/29/2024 02:22:19 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 02:22:19 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/29/2024 02:22:19 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:19 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 02:22:19 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 02:22:19 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/29/2024 02:22:19 PM - DEBUG - find_use_defs - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/29/2024 02:22:19 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/29/2024 02:22:19 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:19 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:19 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 02:22:19 PM - DEBUG - apply_changes - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/29/2024 02:22:19 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/29/2024 02:22:19 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 02:22:19 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/29/2024 02:22:19 PM - DEBUG - run - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/29/2024 02:22:19 PM - DEBUG - run - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/29/2024 02:22:19 PM - DEBUG - run - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/29/2024 02:22:19 PM - DEBUG - run - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 02:22:19 PM - DEBUG - interpret - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000021DE0892AF0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/29/2024 02:22:19 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E0D477E50>
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array = arg(0, name=noise_array)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: sigmas = arg(1, name=sigmas)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: idx = arg(2, name=idx)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: RNG = arg(3, name=RNG)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi14.0 = $12get_iter.5
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:19 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 14
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E0D477E50>
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi16.1 = $14for_iter.2
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $14for_iter.3, 16, 54
07/29/2024 02:22:19 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 16
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E0D477E50>
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi16.1
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $const24.5 = const(float, 0.0)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: bool28 = global(bool: <class 'bool'>)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $28pred, 30, 55
07/29/2024 02:22:19 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 30
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E0D477E50>
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000021DE0892AF0>))
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array[i] = $44binary_multiply.8
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 55
07/29/2024 02:22:19 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 54
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E0D477E50>
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $const54.0 = const(NoneType, None)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: $56return_value.1 = cast(value=$const54.0)
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: return $56return_value.1
07/29/2024 02:22:19 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 55
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021E0D477E50>
07/29/2024 02:22:19 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 02:22:19 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000021E0D487820>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000021E0D487850>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000021E0D46F340>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000021E0D46F460>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000021E0D46F580>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000021E0D46FC40>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000021E0D46FF40>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000021E0D46DE20>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000021E0D47C7C0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000021E0D46DC40>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000021E0D46D820>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000021E0D46D490>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000021E0D46D310>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000021E0D48BD30>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000021E0D46ADC0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000021E0D487940>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000021E0D46FD90>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000021E0D46D070>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000021E0D48B8E0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000021E0D46F280>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000021E0D47C550>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000021E0D46DF40>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000021E0D46F850>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000021E0D47C490>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000021E0D47C160>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000021E0D47C370>,
                         0)]})
07/29/2024 02:22:19 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x0000021E0D477E50>
07/29/2024 02:22:19 PM - DEBUG - init_logging - Logfile initialised
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:22:19 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: PSD at selected frequency
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: Time
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: Signal Amplitude
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: Frequency
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: PSD Magnitude
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_from_change - From changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_n_change - To changed to: 100
07/29/2024 02:22:19 PM - DEBUG - on_from_change - From changed to: 0
07/29/2024 02:22:19 PM - DEBUG - on_n_change - To changed to: 100
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:22:19 PM - DEBUG - on_var_change - Variable changed to: 
