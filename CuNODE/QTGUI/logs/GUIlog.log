07/23/2024 03:12:38 PM - DEBUG - Logfile initialised
07/23/2024 03:51:06 PM - DEBUG - Logfile initialised
07/23/2024 03:51:31 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value2.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value10.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 03:51:31 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value24.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 03:51:31 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value20.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 03:51:31 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 03:51:31 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 03:51:31 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:51:31 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 03:51:31 PM - DEBUG - defmap: {}
07/23/2024 03:51:31 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:51:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:51:31 PM - DEBUG - keep phismap: {}
07/23/2024 03:51:31 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:51:31 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:31 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECDDBFD0>
07/23/2024 03:51:31 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 03:51:31 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECDDBFD0>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 03:51:31 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECDDBFD0>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECDDBFD0>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 03:51:31 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECDDBFD0>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECDDBFD0>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 03:51:31 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 03:51:31 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x00000238ECDD5E50>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x00000238ECDD5FA0>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x00000238ECDD6250>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x00000238ECDD6550>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x00000238ECDD6A60>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x00000238ECDD6C70>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x00000238ECDDB910>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x00000238ECDDBC70>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x00000238ECDDBDF0>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x00000238ECBB9850>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x00000238ECDD5AC0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x00000238ECDD6130>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x00000238ECDD6B50>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x00000238ECDD5820>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x00000238ECBB93A0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x00000238ECBB95E0>,
                        0)]})
07/23/2024 03:51:31 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000238ECDDBFD0>
07/23/2024 03:51:31 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value2.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value10.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 03:51:31 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value24.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 03:51:31 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 03:51:31 PM - DEBUG - stack ['$value20.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 03:51:31 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 03:51:31 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 03:51:31 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:51:31 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 03:51:31 PM - DEBUG - defmap: {}
07/23/2024 03:51:31 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:51:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:51:31 PM - DEBUG - keep phismap: {}
07/23/2024 03:51:31 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:51:31 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:31 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD0F130>
07/23/2024 03:51:31 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 03:51:31 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD0F130>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 03:51:31 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD0F130>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD0F130>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 03:51:31 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD0F130>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD0F130>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 03:51:31 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 03:51:31 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x00000238ECD8D4C0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x00000238ECD8D670>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x00000238ECD8D8E0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x00000238ECD8DBE0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x00000238ECBD00D0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x00000238ECBD0340>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x00000238ECBD0640>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x00000238ECBD09A0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x00000238ECBD0B20>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x00000238ECD0FDF0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x00000238ECD8D0A0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x00000238ECD8D7C0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x00000238ECBD0220>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x00000238ECD0FF40>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x00000238ECD0FA00>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x00000238ECD0F8E0>,
                        0)]})
07/23/2024 03:51:31 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000238ECD0F130>
07/23/2024 03:51:31 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:31 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi14.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$const54.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:51:31 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:31 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:31 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:51:31 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 03:51:31 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 03:51:31 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 03:51:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:51:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:51:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:51:31 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 03:51:31 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 03:51:31 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 03:51:31 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:31 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x00000238D347C700>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECBD0C70>
07/23/2024 03:51:31 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 03:51:31 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 03:51:31 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 03:51:31 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 03:51:31 PM - DEBUG - on stmt: jump 14
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECBD0C70>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECBD0C70>
07/23/2024 03:51:31 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 03:51:31 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 03:51:31 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECBD0C70>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x00000238D347C700>))
07/23/2024 03:51:31 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 03:51:31 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 03:51:31 PM - DEBUG - on stmt: jump 55
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECBD0C70>
07/23/2024 03:51:31 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 03:51:31 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 03:51:31 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 03:51:31 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 03:51:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECBD0C70>
07/23/2024 03:51:31 PM - DEBUG - on stmt: jump 14
07/23/2024 03:51:31 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x00000238ECBF4730>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x00000238ECBF4850>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x00000238ECBF4B80>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x00000238ECBF4CA0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x00000238ECBF4DC0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000238ECBF64C0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x00000238ECBF67C0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x00000238ECBF6A30>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000238ECBF4130>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x00000238ECBF6C10>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x00000238ECBF8070>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x00000238ECBEA850>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x00000238ECBEA6D0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x00000238ECBF42B0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x00000238ECDB6190>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x00000238ECBF45B0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x00000238ECBF6610>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x00000238ECD0FCD0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x00000238ECBF43D0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x00000238ECBF4AC0>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x00000238ECBEAF70>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x00000238ECBF6910>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x00000238ECBF60D0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x00000238ECBEAE50>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x00000238ECBEAC10>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x00000238ECBEAD30>,
                         0)]})
07/23/2024 03:51:31 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000238ECBD0C70>
07/23/2024 03:51:31 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:31 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi14.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:51:31 PM - DEBUG - stack: []
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 03:51:31 PM - DEBUG - stack []
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 03:51:31 PM - DEBUG - stack ['$const54.0']
07/23/2024 03:51:31 PM - DEBUG - end state. edges=[]
07/23/2024 03:51:31 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:51:31 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 03:51:31 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 03:51:31 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 03:51:31 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 03:51:32 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 03:51:32 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:32 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 03:51:32 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 03:51:32 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 03:51:32 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:51:32 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 03:51:32 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:32 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:51:32 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:51:32 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 03:51:32 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 03:51:32 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 03:51:32 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:51:32 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:51:32 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:51:32 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 03:51:32 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 03:51:32 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:51:32 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 03:51:32 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 03:51:32 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 03:51:32 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 03:51:32 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:51:32 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x00000238D347C550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 03:51:32 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:51:32 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD3F340>
07/23/2024 03:51:32 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 03:51:32 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 03:51:32 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 03:51:32 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 03:51:32 PM - DEBUG - on stmt: jump 14
07/23/2024 03:51:32 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 03:51:32 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD3F340>
07/23/2024 03:51:32 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 03:51:32 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 03:51:32 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 03:51:32 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD3F340>
07/23/2024 03:51:32 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 03:51:32 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 03:51:32 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:32 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 03:51:32 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 03:51:32 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD3F340>
07/23/2024 03:51:32 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x00000238D347C550>))
07/23/2024 03:51:32 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 03:51:32 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 03:51:32 PM - DEBUG - on stmt: jump 55
07/23/2024 03:51:32 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 03:51:32 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD3F340>
07/23/2024 03:51:32 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 03:51:32 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 03:51:32 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 03:51:32 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 03:51:32 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000238ECD3F340>
07/23/2024 03:51:32 PM - DEBUG - on stmt: jump 14
07/23/2024 03:51:32 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x00000238ECD38F10>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x00000238ECD3D070>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x00000238ECD3D3A0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x00000238ECD3D4C0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x00000238ECD3D5E0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000238ECD3DCA0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x00000238ECD3DFA0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x00000238ECD3F250>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000238ECD38910>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x00000238ECD3F430>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x00000238ECD3F850>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x00000238ECD3FBE0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x00000238ECD3FD60>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x00000238ECD38A90>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x00000238ECD412B0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x00000238ECD38D90>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x00000238ECD3DDF0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x00000238ECD3D250>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x00000238ECD38C40>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x00000238ECD3D2E0>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x00000238ECD38790>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x00000238ECD3F130>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x00000238ECD3D8B0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x00000238ECD38670>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x00000238ECD38430>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x00000238ECD38550>,
                         0)]})
07/23/2024 03:51:32 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000238ECD3F340>
07/23/2024 03:51:37 PM - DEBUG - Logfile initialised
07/23/2024 03:52:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value2.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value10.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 03:52:02 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value24.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 03:52:02 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value20.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 03:52:02 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 03:52:02 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 03:52:02 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:02 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 03:52:02 PM - DEBUG - defmap: {}
07/23/2024 03:52:02 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:02 PM - DEBUG - keep phismap: {}
07/23/2024 03:52:02 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:52:02 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D868E0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D868E0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D868E0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D868E0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D868E0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D868E0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 03:52:02 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000022303D788B0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000022303D78700>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000022303D78490>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000022303D78190>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000022303D37CA0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000022303D37A30>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000022303D37730>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000022303D373D0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000022303D37250>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000022303D87700>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000022303D879A0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000022303D785B0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000022303D37B50>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000022303D87850>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000022303D87310>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000022303D871F0>,
                        0)]})
07/23/2024 03:52:02 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000022303D868E0>
07/23/2024 03:52:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value2.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value10.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 03:52:02 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value24.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 03:52:02 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 03:52:02 PM - DEBUG - stack ['$value20.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 03:52:02 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 03:52:02 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 03:52:02 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:02 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 03:52:02 PM - DEBUG - defmap: {}
07/23/2024 03:52:02 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:02 PM - DEBUG - keep phismap: {}
07/23/2024 03:52:02 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:52:02 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D37550>
07/23/2024 03:52:02 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D37550>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D37550>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D37550>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D37550>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303D37550>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 03:52:02 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000022303D86B50>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000022303D86EE0>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000022303D86E80>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000022303E52910>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000022303E892E0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000022303E89550>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000022303E89850>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000022303E89BB0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000022303E89D30>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000022303E80910>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000022303E804C0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000022303D86DF0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000022303E89430>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000022303E80670>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000022303E84100>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000022303E84280>,
                        0)]})
07/23/2024 03:52:02 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000022303D37550>
07/23/2024 03:52:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi14.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$const54.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:52:02 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:02 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 03:52:02 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 03:52:02 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:52:02 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 03:52:02 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 03:52:02 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x00000222C8AFC700>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303E8F880>
07/23/2024 03:52:02 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 03:52:02 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 03:52:02 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 03:52:02 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 03:52:02 PM - DEBUG - on stmt: jump 14
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303E8F880>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303E8F880>
07/23/2024 03:52:02 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 03:52:02 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303E8F880>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x00000222C8AFC700>))
07/23/2024 03:52:02 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 03:52:02 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 03:52:02 PM - DEBUG - on stmt: jump 55
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303E8F880>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303E8F880>
07/23/2024 03:52:02 PM - DEBUG - on stmt: jump 14
07/23/2024 03:52:02 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000022303E89130>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000022303E891C0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000022303E9D1C0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000022303E9D100>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000022303E9D670>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000022303E9DD30>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000022303EAD070>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000022303EAD2E0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000022303E8F370>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000022303EAD4C0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000022303EAD8E0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000022303EADC70>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000022303EADDF0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000022303E8F7C0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000022303EAF340>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000022303E84C40>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000022303E9DE80>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000022303E9D880>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000022303E84BE0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000022303E9D040>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000022303E8F3A0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000022303EAD1C0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000022303E9D940>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000022303E8FAC0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000022303E8FDC0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000022303E8F670>,
                         0)]})
07/23/2024 03:52:02 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000022303E8F880>
07/23/2024 03:52:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi14.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:52:02 PM - DEBUG - stack: []
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack []
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$const54.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 03:52:02 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 03:52:02 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 03:52:02 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 03:52:02 PM - DEBUG - stack ['$phi30.0']
07/23/2024 03:52:02 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 03:52:02 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:02 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 03:52:02 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 03:52:02 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:52:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 03:52:02 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 03:52:02 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 03:52:02 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 03:52:02 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:02 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x00000222C8AFC550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303EFB0D0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 03:52:02 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 03:52:02 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 03:52:02 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 03:52:02 PM - DEBUG - on stmt: jump 14
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303EFB0D0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303EFB0D0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 03:52:02 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 03:52:02 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303EFB0D0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x00000222C8AFC550>))
07/23/2024 03:52:02 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 03:52:02 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 03:52:02 PM - DEBUG - on stmt: jump 55
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303EFB0D0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 03:52:02 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 03:52:02 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 03:52:02 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 03:52:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000022303EFB0D0>
07/23/2024 03:52:02 PM - DEBUG - on stmt: jump 14
07/23/2024 03:52:02 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000022303EF3D30>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000022303EF3E50>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000022303EF91C0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000022303EF92E0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000022303EF9400>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000022303EF9AC0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000022303EF9DC0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000022303EFB070>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000022303EF3730>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000022303EFB250>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000022303EFB670>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000022303EFBA00>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000022303EFBB80>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000022303EF38B0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000022303EFD0D0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000022303EF3BB0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000022303EF9C10>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000022303EFBD00>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000022303EF39D0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000022303EF9100>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000022303EF35B0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000022303EF9F10>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000022303EF96D0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000022303EF3490>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000022303EF3250>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000022303EF3370>,
                         0)]})
07/23/2024 03:52:02 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000022303EFB0D0>
07/23/2024 03:52:07 PM - DEBUG - Logfile initialised
07/23/2024 03:52:07 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 03:52:39 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:39 PM - DEBUG - stack: []
07/23/2024 03:52:39 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 03:52:39 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:39 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:39 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:52:39 PM - DEBUG - defmap: {}
07/23/2024 03:52:39 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:39 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:39 PM - DEBUG - keep phismap: {}
07/23/2024 03:52:39 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:52:39 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:39 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:39 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 03:52:39 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:39 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000253095F6F40>
07/23/2024 03:52:39 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 03:52:39 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 03:52:39 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 03:52:39 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>))
07/23/2024 03:52:39 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 03:52:39 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 03:52:39 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 03:52:39 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 03:52:39 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x00000253095FDD60>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000002530964C070>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000002530964C190>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x00000253095FD6D0>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x00000253095FDAC0>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x00000253095FD130>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x00000253095FD040>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x00000253095FD550>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x00000253095FD430>,
                                 0)]})
07/23/2024 03:52:39 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000253095FDEE0>
07/23/2024 03:52:39 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:39 PM - DEBUG - stack: []
07/23/2024 03:52:39 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state74.34']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state86.39']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants144.67']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants190.89']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants224.105']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - stack ['$const262.123']
07/23/2024 03:52:39 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:39 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:39 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:52:39 PM - DEBUG - defmap: {}
07/23/2024 03:52:39 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:39 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:39 PM - DEBUG - keep phismap: {}
07/23/2024 03:52:39 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:52:39 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:39 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:39 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x00000253095EF280>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 03:52:39 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:39 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000025309A36AC0>
07/23/2024 03:52:39 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 03:52:39 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 03:52:39 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 03:52:39 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>))
07/23/2024 03:52:39 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 03:52:39 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x00000253095EF280>))
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 03:52:39 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 03:52:39 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 03:52:39 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 03:52:39 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 03:52:39 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 03:52:39 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 03:52:39 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 03:52:39 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 03:52:39 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 03:52:39 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 03:52:39 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 03:52:39 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 03:52:39 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 03:52:39 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000002530964CCD0>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x0000025309A348B0>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x0000025309A34A30>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x0000025309A101C0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000002530964C670>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x0000025309A44130>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x0000025309A36430>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x0000025309A365B0>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x0000025309A44760>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x0000025309A36C70>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x0000025309A36DF0>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x0000025309A44820>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x0000025309A39700>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x0000025309A448E0>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x0000025309A39CD0>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x0000025309A449A0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000025309A40F40>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x0000025309A44A60>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x0000025309A3B6D0>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x0000025309A44B20>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x0000025309A3BC70>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x0000025309A3BDF0>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x0000025309A44BE0>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x0000025309A3D700>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x0000025309A44CA0>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x0000025309A3DCD0>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000002530964C7F0>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x0000025309A44D60>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x0000025309A403D0>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x0000025309A40550>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x0000025309A44E20>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000002530964CF70>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x0000025309A40E20>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x0000025309A44EE0>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x0000025309A42430>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x0000025309A44FA0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x00000253099D3D30>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x0000025309A490A0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x0000025309A42DF0>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x0000025309A42F70>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x0000025309A445E0>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000025309A10E50>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x0000025309A40FD0>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x0000025309A2E5B0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x0000025309A32A00>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x0000025309A2EDC0>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000025309A10640>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x0000025309A32160>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x0000025309A3B850>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x0000025309A30B80>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x00000253099D3220>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x0000025309A102B0>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x00000253099D3BE0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x0000025309A10400>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x0000025309A429D0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x0000025309A32E80>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000002530964C730>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x0000025309A34580>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x0000025309A34CA0>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x0000025309A36100>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x0000025309A36820>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000025309A2E1C0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x0000025309A390A0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x0000025309A39400>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x0000025309A399A0>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x0000025309A39F40>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x0000025309A3B3A0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x0000025309A3B940>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x0000025309A3D0A0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x0000025309A3D400>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x0000025309A3D9A0>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x0000025309A3DF40>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x0000025309A407C0>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x0000025309A40B20>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x0000025309A42100>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x0000025309A426A0>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x0000025309A42AC0>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x0000025309A44220>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x0000025309A44460>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x0000025309A2E280>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x0000025309A2E820>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x0000025309A300A0>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x0000025309A304C0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x0000025309A308E0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x0000025309A30D00>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x0000025309A32400>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x0000025309A32820>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x0000025309A32B80>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x0000025309A34160>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x00000253095F6910>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x0000025309A320A0>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000002530964C3A0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x0000025309A2EB80>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x00000253095F6C40>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x00000253095F6D90>, 0)]})
07/23/2024 03:52:39 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000025309A39E50>
07/23/2024 03:52:39 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:39 PM - DEBUG - stack: []
07/23/2024 03:52:39 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:52:39 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 03:52:39 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:39 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:39 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:52:39 PM - DEBUG - defmap: {}
07/23/2024 03:52:39 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:39 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:39 PM - DEBUG - keep phismap: {}
07/23/2024 03:52:39 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:52:39 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:39 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:39 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 03:52:39 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:39 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000025309A2E9D0>
07/23/2024 03:52:39 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 03:52:39 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 03:52:39 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 03:52:39 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>))
07/23/2024 03:52:39 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 03:52:39 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 03:52:39 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:39 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 03:52:39 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 03:52:39 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x0000025309A71FA0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x0000025309A685B0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x0000025309A49A30>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000025309A32DC0>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x0000025309A36220>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x0000025309A0C850>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x0000025309A82820>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x0000025309ABA340>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x0000025309ACD520>,
                                 0)]})
07/23/2024 03:52:39 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000025309A2E9D0>
07/23/2024 03:52:39 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:52:39 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:52:39 PM - DEBUG - stack: []
07/23/2024 03:52:39 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 03:52:39 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 03:52:39 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state74.34']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 03:52:39 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state86.39']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 03:52:39 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants144.67']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 03:52:39 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack []
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants190.89']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 03:52:39 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 03:52:39 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:52:40 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 03:52:40 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 03:52:40 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:52:40 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 03:52:40 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack []
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$constants224.105']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack []
07/23/2024 03:52:40 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:52:40 PM - DEBUG - stack ['$const262.123']
07/23/2024 03:52:40 PM - DEBUG - end state. edges=[]
07/23/2024 03:52:40 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:52:40 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:52:40 PM - DEBUG - defmap: {}
07/23/2024 03:52:40 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:40 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:52:40 PM - DEBUG - keep phismap: {}
07/23/2024 03:52:40 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:52:40 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:52:40 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:52:40 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x00000253099CFB80>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 03:52:40 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:52:40 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000025309ACD4C0>
07/23/2024 03:52:40 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 03:52:40 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 03:52:40 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 03:52:40 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000252D7B2EB80>))
07/23/2024 03:52:40 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 03:52:40 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x00000253099CFB80>))
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 03:52:40 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 03:52:40 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 03:52:40 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 03:52:40 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 03:52:40 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 03:52:40 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 03:52:40 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 03:52:40 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 03:52:40 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 03:52:40 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 03:52:40 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 03:52:40 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 03:52:40 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 03:52:40 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 03:52:40 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x0000025309B35970>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x0000025309B28D00>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x0000025309B28E80>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x0000025309B14A30>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x0000025309ADD6A0>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x0000025309B37580>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x0000025309B2A880>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x0000025309B2AA00>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x0000025309B37BB0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x0000025309B2C100>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x0000025309B2C280>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x0000025309B37C70>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x0000025309B2CB50>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x0000025309B37D30>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x0000025309B2F160>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x0000025309B37DF0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000025309B2A040>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x0000025309B37EB0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x0000025309B2FB20>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x0000025309B37F70>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x0000025309B31100>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x0000025309B31280>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x0000025309B3C070>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x0000025309B31B50>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x0000025309B3C130>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x0000025309B33160>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x0000025309B22160>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x0000025309B3C1F0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x0000025309B33820>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x0000025309B339A0>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x0000025309B3C2B0>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x0000025309B22310>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x0000025309B352B0>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x0000025309B3C370>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x0000025309B35880>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x0000025309B3C430>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x0000025309B224C0>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x0000025309B3C4F0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x0000025309B37280>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x0000025309B37400>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x0000025309B37A30>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000025309B01A90>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x0000025309B14EE0>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x0000025309B22A00>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x0000025309B24370>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x0000025309B24250>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000025309B0AB80>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x0000025309B24790>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x0000025309B06EE0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x0000025309B2C370>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x0000025309B2FCA0>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x0000025309B0A460>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x0000025309B2F700>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x0000025309A422B0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x0000025309B33670>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x0000025309B28310>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x0000025309B33DF0>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x0000025309B289D0>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x0000025309B2A130>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x0000025309B2A550>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x0000025309B2AC70>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000025309B14CA0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x0000025309B2C4F0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x0000025309B2C850>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x0000025309B2CDF0>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x0000025309B2F3D0>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x0000025309B2F7F0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x0000025309B2FD90>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x0000025309B314F0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x0000025309B31850>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x0000025309B31DF0>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x0000025309B333D0>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x0000025309B33C10>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x0000025309B33F70>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x0000025309B35550>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x0000025309B35AF0>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x0000025309B35F10>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x0000025309B37670>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x0000025309B378B0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x0000025309B226D0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x0000025309B22C70>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x0000025309B244F0>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x0000025309B24910>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x0000025309B24D30>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x0000025309B26190>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x0000025309B26850>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x0000025309B26C70>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x0000025309B26FD0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x0000025309B285B0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x0000025309AF4610>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x0000025309B264F0>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x0000025309AE6250>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x0000025309B22FD0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x0000025309AF43D0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x0000025309B018B0>, 0)]})
07/23/2024 03:52:40 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000025309ACD4C0>
07/23/2024 03:58:03 PM - DEBUG - Logfile initialised
07/23/2024 03:58:04 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 03:58:15 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:58:15 PM - DEBUG - stack: []
07/23/2024 03:58:15 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 03:58:15 PM - DEBUG - stack []
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack []
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:58:15 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 03:58:15 PM - DEBUG - end state. edges=[]
07/23/2024 03:58:15 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:58:15 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:58:15 PM - DEBUG - defmap: {}
07/23/2024 03:58:15 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:15 PM - DEBUG - keep phismap: {}
07/23/2024 03:58:15 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:58:15 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:58:15 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:58:15 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 03:58:15 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:58:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021044CD9D00>
07/23/2024 03:58:15 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 03:58:15 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 03:58:15 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 03:58:15 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 03:58:15 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>))
07/23/2024 03:58:15 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 03:58:15 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 03:58:15 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:15 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 03:58:15 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 03:58:15 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x0000021044CE82E0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x0000021044CE85B0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x0000021044CE86D0>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000021044CE2910>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x0000021044CE2400>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x0000021044CD9B80>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x0000021044CE2190>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x0000021044CE2C10>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x0000021044CE2E50>,
                                 0)]})
07/23/2024 03:58:15 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000021044CD9D00>
07/23/2024 03:58:15 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:58:15 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:58:15 PM - DEBUG - stack: []
07/23/2024 03:58:15 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 03:58:15 PM - DEBUG - stack []
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack []
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 03:58:15 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack []
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 03:58:15 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 03:58:15 PM - DEBUG - stack []
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 03:58:15 PM - DEBUG - stack ['$state74.34']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 03:58:15 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 03:58:15 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 03:58:15 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 03:58:15 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:58:15 PM - DEBUG - stack []
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:58:15 PM - DEBUG - stack ['$state86.39']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:15 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 03:58:15 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:58:15 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 03:58:15 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 03:58:15 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:15 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$constants144.67']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:16 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$constants190.89']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:16 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$constants224.105']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - stack ['$const262.123']
07/23/2024 03:58:16 PM - DEBUG - end state. edges=[]
07/23/2024 03:58:16 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:58:16 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:58:16 PM - DEBUG - defmap: {}
07/23/2024 03:58:16 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:16 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:16 PM - DEBUG - keep phismap: {}
07/23/2024 03:58:16 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:58:16 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:58:16 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:58:16 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x0000021044CD7040>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 03:58:16 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:58:16 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021089AAC9D0>
07/23/2024 03:58:16 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 03:58:16 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 03:58:16 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 03:58:16 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>))
07/23/2024 03:58:16 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 03:58:16 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x0000021044CD7040>))
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 03:58:16 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 03:58:16 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 03:58:16 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 03:58:16 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 03:58:16 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 03:58:16 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 03:58:16 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 03:58:16 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 03:58:16 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 03:58:16 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 03:58:16 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 03:58:16 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 03:58:16 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 03:58:16 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x0000021089AA8340>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x0000021089A9A220>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x0000021089A9A3A0>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x0000021044CE8FA0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x0000021089A70F70>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x0000021089A701F0>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x0000021089A9AD60>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x0000021089A9AEE0>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x0000021089AAE0D0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x0000021089A9D5E0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x0000021089A9D760>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x0000021089AAE190>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x0000021089A9E070>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x0000021089AAE250>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x0000021089A9E640>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x0000021089AAE310>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000021089A73640>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x0000021089AAE3D0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x0000021089AA1040>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x0000021089AAE490>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x0000021089AA15E0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x0000021089AA1760>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x0000021089AAE550>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x0000021089AA3070>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x0000021089AAE610>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x0000021089AA3640>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x0000021089A76D90>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x0000021089AAE6D0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x0000021089AA3D00>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x0000021089AA3E80>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x0000021089AAE790>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x0000021089A76BE0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x0000021089AA6790>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x0000021089AAE850>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x0000021089AA6D60>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x0000021089AAE910>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x0000021089A76E20>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x0000021089AAE9D0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x0000021089AA8760>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x0000021089AA88E0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x0000021089AA8F10>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000021089A42130>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x0000021089A735E0>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x0000021089A933A0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x0000021089A739D0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x0000021089A93BB0>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000021089A42160>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x0000021089A73730>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x0000021089A738B0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x0000021089AA1130>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x0000021089AA1C40>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x0000021089A421C0>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x0000021089AA3BE0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x0000021044CE8460>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x0000021089AA6040>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x0000021089A97C70>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x0000021089AA6940>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x0000021089A733D0>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x0000021089A9A610>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x0000021089A9AA30>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x0000021089A9D190>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000021089A76DF0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x0000021089A9D9D0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x0000021089A9DD30>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x0000021089A9E310>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x0000021089A9E8B0>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x0000021089A9ECD0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x0000021089AA12B0>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x0000021089AA19D0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x0000021089AA1D30>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x0000021089AA3310>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x0000021089AA38B0>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x0000021089AA6130>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x0000021089AA6490>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x0000021089AA6A30>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x0000021089AA6FD0>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x0000021089AA8430>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x0000021089AA8B50>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x0000021089AA8D90>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x0000021089A93070>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x0000021089A93610>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x0000021089A93E50>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x0000021089A952B0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x0000021089A956D0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x0000021089A95AF0>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x0000021089A971F0>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x0000021089A97610>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x0000021089A97970>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x0000021089A70190>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x0000021089A70340>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x0000021089A95E50>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x0000021089A70E80>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x0000021089A93970>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x0000021089A70AC0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x0000021089A42760>, 0)]})
07/23/2024 03:58:16 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000021089A93AC0>
07/23/2024 03:58:16 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:58:16 PM - DEBUG - stack: []
07/23/2024 03:58:16 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 03:58:16 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 03:58:16 PM - DEBUG - end state. edges=[]
07/23/2024 03:58:16 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:58:16 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:58:16 PM - DEBUG - defmap: {}
07/23/2024 03:58:16 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:16 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:16 PM - DEBUG - keep phismap: {}
07/23/2024 03:58:16 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:58:16 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:58:16 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:58:16 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 03:58:16 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:58:16 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021089AACC10>
07/23/2024 03:58:16 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 03:58:16 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 03:58:16 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 03:58:16 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>))
07/23/2024 03:58:16 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 03:58:16 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 03:58:16 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:16 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 03:58:16 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 03:58:16 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x0000021089AEFAF0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x0000021089ACB9D0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x0000021089ACB520>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000021089B26520>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x0000021089A9D2B0>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x0000021089A93CD0>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x0000021089AA8160>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x0000021089B18B50>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x0000021089B61700>,
                                 0)]})
07/23/2024 03:58:16 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000021089AACC10>
07/23/2024 03:58:16 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:58:16 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 03:58:16 PM - DEBUG - stack: []
07/23/2024 03:58:16 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 03:58:16 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 03:58:16 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 03:58:16 PM - DEBUG - stack ['$state74.34']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 03:58:16 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 03:58:16 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 03:58:16 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 03:58:16 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack []
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$state86.39']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:58:16 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 03:58:16 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 03:58:17 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack []
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$constants144.67']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 03:58:17 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack []
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$constants190.89']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 03:58:17 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack []
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$constants224.105']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack []
07/23/2024 03:58:17 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 03:58:17 PM - DEBUG - stack ['$const262.123']
07/23/2024 03:58:17 PM - DEBUG - end state. edges=[]
07/23/2024 03:58:17 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 03:58:17 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 03:58:17 PM - DEBUG - defmap: {}
07/23/2024 03:58:17 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 03:58:17 PM - DEBUG - keep phismap: {}
07/23/2024 03:58:17 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 03:58:17 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 03:58:17 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 03:58:17 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x0000021089A51F70>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 03:58:17 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 03:58:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000021089BA2E50>
07/23/2024 03:58:17 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 03:58:17 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 03:58:17 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 03:58:17 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000021077400670>))
07/23/2024 03:58:17 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 03:58:17 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x0000021089A51F70>))
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 03:58:17 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 03:58:17 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 03:58:17 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 03:58:17 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 03:58:17 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 03:58:17 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 03:58:17 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 03:58:17 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 03:58:17 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 03:58:17 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 03:58:17 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 03:58:17 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 03:58:17 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 03:58:17 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 03:58:17 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x0000021089B7AFA0>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x0000021089B8E910>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x0000021089B8EA90>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x0000021089A86280>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x0000021089B9D070>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x0000021089B9D700>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x0000021089B91400>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x0000021089B91580>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x0000021089B9D7C0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x0000021089B91C40>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x0000021089B91DC0>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x0000021089B9D880>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x0000021089B936D0>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x0000021089B9D940>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x0000021089B93CA0>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x0000021089B9DA00>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000021089B81700>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x0000021089B9DAC0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x0000021089B946A0>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x0000021089B9DB80>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x0000021089B94C40>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x0000021089B94DC0>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x0000021089B9DC40>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x0000021089B966D0>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x0000021089B9DD00>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x0000021089B96CA0>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x0000021089B69670>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x0000021089B9DDC0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x0000021089B983A0>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x0000021089B98520>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x0000021089B9DE80>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x0000021089A42E80>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x0000021089B98DF0>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x0000021089B9DF40>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x0000021089B9B400>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x0000021089B8E4F0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x0000021089B81250>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x0000021089B8EFA0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x0000021089B9BDC0>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x0000021089B9BF40>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x0000021089B9D5B0>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000021089A86EB0>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x0000021089B811F0>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x0000021089B81610>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x0000021089B8AC70>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x0000021089B81E20>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000021089A86850>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x0000021089B91700>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x0000021089B98610>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x0000021089B98970>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x0000021089B7AC40>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x0000021089A86820>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x0000021089B7ABB0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x0000021089A865B0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x0000021089B7A5E0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x0000021089B8CEE0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x0000021089B7AD30>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x0000021089B8E5E0>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x0000021089B8ED00>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x0000021089B910D0>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x0000021089B917F0>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000021089B6CF40>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x0000021089B93070>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x0000021089B933D0>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x0000021089B93970>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x0000021089B93F10>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x0000021089B94370>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x0000021089B94910>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x0000021089B96070>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x0000021089B963D0>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x0000021089B96970>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x0000021089B96F10>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x0000021089B98790>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x0000021089B98AF0>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x0000021089B9B0D0>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x0000021089B9B670>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x0000021089B9BA90>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x0000021089B9D1F0>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x0000021089B9D430>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x0000021089B81040>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x0000021089B81880>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x0000021089B8A100>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x0000021089B8A520>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x0000021089B8A940>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x0000021089B8AD60>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x0000021089B8C460>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x0000021089B8C880>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x0000021089B8CBE0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x0000021089B8E1C0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x0000021089B7A400>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x0000021089B8C100>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x0000021089B7A6D0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x0000021089B81BE0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x0000021089B7AA60>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x0000021089B7A760>, 0)]})
07/23/2024 03:58:17 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000021089B93880>
07/23/2024 04:00:02 PM - DEBUG - Could not get breakpoints from the frontend.
07/23/2024 04:00:02 PM - DEBUG - Could not get breakpoints from the frontend.
07/23/2024 04:00:06 PM - DEBUG - Logfile initialised
07/23/2024 04:00:06 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 04:00:15 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:00:15 PM - DEBUG - stack: []
07/23/2024 04:00:15 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:00:15 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 04:00:15 PM - DEBUG - end state. edges=[]
07/23/2024 04:00:15 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:00:15 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:00:15 PM - DEBUG - defmap: {}
07/23/2024 04:00:15 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:15 PM - DEBUG - keep phismap: {}
07/23/2024 04:00:15 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:00:15 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:00:15 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:00:15 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 04:00:15 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:00:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001AE099B40A0>
07/23/2024 04:00:15 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 04:00:15 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 04:00:15 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 04:00:15 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>))
07/23/2024 04:00:15 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 04:00:15 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 04:00:15 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 04:00:15 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 04:00:15 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001AE099BDD30>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001AE099D8040>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001AE099D8160>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001AE099BD6A0>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001AE099BDA90>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001AE099BD1C0>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001AE099BD2E0>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001AE099BD520>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001AE099BD400>,
                                 0)]})
07/23/2024 04:00:15 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001AE099BD160>
07/23/2024 04:00:15 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:00:15 PM - DEBUG - stack: []
07/23/2024 04:00:15 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 04:00:15 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 04:00:15 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 04:00:15 PM - DEBUG - stack ['$state74.34']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 04:00:15 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 04:00:15 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 04:00:15 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 04:00:15 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$state86.39']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:15 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$constants144.67']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:15 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$constants190.89']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:15 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$constants224.105']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack []
07/23/2024 04:00:15 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:00:15 PM - DEBUG - stack ['$const262.123']
07/23/2024 04:00:15 PM - DEBUG - end state. edges=[]
07/23/2024 04:00:15 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:00:15 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:00:15 PM - DEBUG - defmap: {}
07/23/2024 04:00:15 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:15 PM - DEBUG - keep phismap: {}
07/23/2024 04:00:15 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:00:15 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:00:15 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:00:15 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001AE095D9430>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 04:00:15 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:00:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001AE09AC5FD0>
07/23/2024 04:00:15 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 04:00:15 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 04:00:15 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 04:00:15 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>))
07/23/2024 04:00:15 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 04:00:15 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001AE095D9430>))
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 04:00:15 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 04:00:15 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 04:00:15 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 04:00:15 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 04:00:15 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 04:00:15 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 04:00:15 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 04:00:15 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 04:00:15 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 04:00:15 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 04:00:15 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 04:00:15 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 04:00:15 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 04:00:15 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 04:00:15 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001AE099D8970>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001AE09AAF7F0>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001AE09AAF970>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001AE09A8D100>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001AE099D8E80>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001AE09AC0070>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001AE09AB1370>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001AE09AB14F0>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001AE09AC06A0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001AE09AB1BB0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001AE09AB1D30>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001AE09AC0760>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001AE09AB3640>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001AE09AC0820>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001AE09AB3C10>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001AE09AC08E0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001AE09AB6700>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001AE09AC09A0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001AE09AB6610>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001AE09AC0A60>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001AE09AB6BB0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001AE09AB6D30>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001AE09AC0B20>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001AE09AB8640>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001AE09AC0BE0>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001AE09AB8C10>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001AE099D8A90>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001AE09AC0CA0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001AE09ABB310>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001AE09ABB490>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001AE09AC0D60>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001AE09A89A90>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001AE09ABBD60>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001AE09AC0E20>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001AE09ABD370>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001AE09AC0EE0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001AE09A89A30>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001AE09AC0FA0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001AE09ABDD30>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001AE09ABDEB0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001AE09AC0520>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001AE09A8DD90>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001AE09AB3D90>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001AE09AA84F0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001AE09AB37F0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001AE09AA8D00>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001AE09A8D550>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001AE09AB87F0>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001AE09A89AF0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001AE09A894F0>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001AE09ABB970>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001AE09A8D1F0>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001AE09ABB8E0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001AE09A8D340>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001AE09ABD910>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001AE09AADDC0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001AE099D8910>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001AE09AAF4C0>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001AE09AAFBE0>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001AE09AB1040>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001AE09AB1760>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001AE09AA8100>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001AE09AB1FA0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001AE09AB3340>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001AE09AB38E0>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001AE09AB3E80>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001AE09AB62E0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001AE09AB6880>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001AE09AB6FA0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001AE09AB8340>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001AE09AB88E0>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001AE09AB8E80>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001AE09ABB700>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001AE09ABBA60>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001AE09ABD040>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001AE09ABD5E0>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001AE09ABDA00>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001AE09AC0160>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001AE09AC03A0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001AE09AA81C0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001AE09AA8760>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001AE09AA8FA0>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001AE09AAA400>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001AE09AAA820>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001AE09AAAC40>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001AE09AAD340>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001AE09AAD760>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001AE09AADAC0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001AE09AAF0A0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001AE099B4DC0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001AE09AAAFA0>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001AE099D8D90>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001AE09AA8AC0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001AE099B4400>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001AE099B4D30>, 0)]})
07/23/2024 04:00:15 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001AE09AAFA60>
07/23/2024 04:00:26 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:00:26 PM - DEBUG - stack: []
07/23/2024 04:00:26 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:00:26 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 04:00:26 PM - DEBUG - end state. edges=[]
07/23/2024 04:00:26 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:00:26 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:00:26 PM - DEBUG - defmap: {}
07/23/2024 04:00:26 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:26 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:26 PM - DEBUG - keep phismap: {}
07/23/2024 04:00:26 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:00:26 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:00:26 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:00:26 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 04:00:26 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:00:26 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001AE09A89760>
07/23/2024 04:00:26 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 04:00:26 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 04:00:26 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 04:00:26 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>))
07/23/2024 04:00:26 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 04:00:26 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 04:00:26 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 04:00:26 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 04:00:26 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001AE09AC5310>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001AE09B82460>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001AE09B824C0>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001AE099DA4F0>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001AE09ADD910>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001AE09AA8400>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001AE09AA8880>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001AE09AC6160>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001AE09B423D0>,
                                 0)]})
07/23/2024 04:00:26 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001AE09A89760>
07/23/2024 04:00:26 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:00:26 PM - DEBUG - stack: []
07/23/2024 04:00:26 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 04:00:26 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 04:00:26 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 04:00:26 PM - DEBUG - stack ['$state74.34']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 04:00:26 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 04:00:26 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 04:00:26 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 04:00:26 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$state86.39']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 04:00:26 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$constants144.67']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 04:00:26 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$constants190.89']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 04:00:26 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$constants224.105']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack []
07/23/2024 04:00:26 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:00:26 PM - DEBUG - stack ['$const262.123']
07/23/2024 04:00:26 PM - DEBUG - end state. edges=[]
07/23/2024 04:00:26 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:00:26 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:00:26 PM - DEBUG - defmap: {}
07/23/2024 04:00:26 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:26 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:00:26 PM - DEBUG - keep phismap: {}
07/23/2024 04:00:26 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:00:26 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:00:26 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:00:26 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001AE09BD6430>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 04:00:26 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:00:26 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001AE09C20D00>
07/23/2024 04:00:26 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 04:00:26 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 04:00:26 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 04:00:26 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001ADD555EAF0>))
07/23/2024 04:00:26 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 04:00:26 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001AE09BD6430>))
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 04:00:26 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 04:00:26 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 04:00:26 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 04:00:26 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 04:00:26 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 04:00:26 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 04:00:26 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 04:00:26 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 04:00:26 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 04:00:26 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 04:00:26 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 04:00:26 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 04:00:26 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 04:00:26 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 04:00:26 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001AE09C188E0>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001AE09C0B5B0>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001AE09C0B730>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001AE09B785B0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001AE09C18F70>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001AE09C0F640>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001AE09BF6AC0>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001AE09C0BDF0>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001AE09C0FA60>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001AE09C0D4F0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001AE09C0D670>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001AE09C04430>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001AE09C0DF40>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001AE09C1F070>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001AE09C0F550>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001AE09C1F130>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001AE09C14640>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001AE09C1F1F0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001AE09C0FF10>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001AE09C1F2B0>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001AE09C124F0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001AE09C12670>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001AE09C1F370>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001AE09C12F40>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001AE09C1F430>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001AE09C14550>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001AE09B01100>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001AE09C1F4F0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001AE09C14C10>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001AE09C14D90>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001AE09C1F5B0>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001AE09B4FF40>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001AE09C166A0>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001AE09C1F670>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001AE09C16C70>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001AE09C1F730>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001AE09AB69D0>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001AE09C1F7F0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001AE09C18670>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001AE09C187F0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001AE09C18E20>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001AE09BF62B0>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001AE09C14E80>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001AE09C042B0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001AE09C162B0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001AE09C04AC0>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001AE09BF6040>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001AE09BF81C0>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001AE09BF8130>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001AE09BF8FD0>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001AE09BF8EB0>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001AE09AB1190>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001AE09BF84C0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001AE09B78640>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001AE09BF8F40>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001AE09C09B80>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001AE09BF8E80>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001AE09C0B280>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001AE09C0B9A0>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001AE09BF65E0>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001AE09C0D0A0>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001AE09B7ED00>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001AE09C0D8E0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001AE09C0DC40>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001AE09C0F220>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001AE09C0F7C0>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001AE09C0FBE0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001AE09C121C0>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001AE09C128E0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001AE09C12C40>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001AE09C14220>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001AE09C147C0>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001AE09C16040>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001AE09C163A0>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001AE09C16940>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001AE09C16EE0>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001AE09C18340>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001AE09C18A60>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001AE09C18CA0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001AE09B85E80>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001AE09C04520>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001AE09C04D60>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001AE09C071C0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001AE09C075E0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001AE09C07A00>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001AE09C09100>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001AE09C09520>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001AE09C09880>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001AE09C09E20>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001AE09BF65B0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001AE09C07D60>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001AE09BF66A0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001AE09C04880>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001AE09BF6BE0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001AE09BF6490>, 0)]})
07/23/2024 04:00:26 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001AE09C0BC40>
07/23/2024 04:02:01 PM - DEBUG - Logfile initialised
07/23/2024 04:02:01 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 04:02:38 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:02:38 PM - DEBUG - stack: []
07/23/2024 04:02:38 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:02:38 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 04:02:38 PM - DEBUG - end state. edges=[]
07/23/2024 04:02:38 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:02:38 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:02:38 PM - DEBUG - defmap: {}
07/23/2024 04:02:38 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:02:38 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:02:38 PM - DEBUG - keep phismap: {}
07/23/2024 04:02:38 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:02:38 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:02:38 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:02:38 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001496C0BEB80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 04:02:38 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:02:38 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001498A1657F0>
07/23/2024 04:02:38 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 04:02:38 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 04:02:38 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 04:02:38 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001496C0BEB80>))
07/23/2024 04:02:38 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 04:02:38 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 04:02:38 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 04:02:38 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 04:02:38 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001498B8E9160>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001498B8E9430>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001498B8E9550>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001498A16EA90>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001498A16EE80>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001498A16E5E0>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001498A16E6D0>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001498A16E910>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001498A16E7F0>,
                                 0)]})
07/23/2024 04:02:38 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001498A16E4F0>
07/23/2024 04:02:38 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:02:38 PM - DEBUG - stack: []
07/23/2024 04:02:38 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 04:02:38 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 04:02:38 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 04:02:38 PM - DEBUG - stack ['$state74.34']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 04:02:38 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 04:02:38 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 04:02:38 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 04:02:38 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$state86.39']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 04:02:38 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$constants144.67']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 04:02:38 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$constants190.89']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 04:02:38 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$constants224.105']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack []
07/23/2024 04:02:38 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:02:38 PM - DEBUG - stack ['$const262.123']
07/23/2024 04:02:38 PM - DEBUG - end state. edges=[]
07/23/2024 04:02:38 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:02:38 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:02:38 PM - DEBUG - defmap: {}
07/23/2024 04:02:38 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:02:38 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:02:38 PM - DEBUG - keep phismap: {}
07/23/2024 04:02:38 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:02:38 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:02:38 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:02:38 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001496C0BEB80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001498A15D280>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 04:02:38 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:02:38 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001498B9C6220>
07/23/2024 04:02:38 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 04:02:38 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 04:02:38 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 04:02:38 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001496C0BEB80>))
07/23/2024 04:02:38 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 04:02:38 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001498A15D280>))
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 04:02:38 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 04:02:38 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 04:02:38 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 04:02:38 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 04:02:38 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 04:02:38 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 04:02:38 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 04:02:38 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 04:02:38 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 04:02:38 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 04:02:38 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 04:02:38 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 04:02:38 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 04:02:38 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 04:02:38 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001498A1655E0>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001498B9C2B20>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001498B9C2CA0>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001498B9BC2E0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001498A1654C0>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001498B9D13A0>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001498B9C46A0>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001498B9C4820>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001498B9D19D0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001498B9C4EE0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001498B9C60A0>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001498B9D1A90>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001498B9C6970>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001498B9D1B50>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001498B9C6F40>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001498B9D1C10>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001498B8E9F10>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001498B9D1CD0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001498B9C9940>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001498B9D1D90>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001498B9C9EE0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001498B9CB0A0>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001498B9D1E50>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001498B9CB970>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001498B9D1F10>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001498B9CBF40>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001498A165B50>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001498B9D1FD0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001498B9CC640>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001498B9CC7C0>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001498B9D70D0>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001498B8E98B0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001498B9CF0D0>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001498B9D7190>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001498B9CF6A0>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001498B9D7250>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001498B8E9FD0>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001498B9D7310>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001498B9D10A0>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001498B9D1220>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001498B9D1850>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001498B99E070>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001498B9C2E20>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001498B9BC820>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001498B9BEE80>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001498B9BE070>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001498B99EE20>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001498B9BE9D0>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001498B9C0580>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001498B9CC490>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001498B9CC070>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001498B99EFA0>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001498B9CF1F0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001498B9BC160>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001498B9CFBB0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001498B9C2130>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001498A165370>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001498B9C27F0>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001498B9C2F10>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001498B9C4370>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001498B9C4A90>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001498B9BC580>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001498B9C6310>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001498B9C6670>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001498B9C6C10>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001498B9C91F0>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001498B9C9610>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001498B9C9BB0>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001498B9CB310>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001498B9CB670>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001498B9CBC10>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001498B9CC1F0>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001498B9CCA30>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001498B9CCD90>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001498B9CF370>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001498B9CF910>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001498B9CFD30>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001498B9D1490>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001498B9D16D0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001498B99BCD0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001498B9BCA90>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001498B9BE310>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001498B9BE730>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001498B9BEB50>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001498B9BEF70>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001498B9C0670>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001498B9C0A90>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001498B9C0DF0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001498B9C23D0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001498B99E310>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001498B9C0310>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001498A1652B0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001498B9BCDF0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001498B99E400>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001498B99E280>, 0)]})
07/23/2024 04:02:38 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001498B9C6220>
07/23/2024 04:07:06 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:07:06 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 04:07:06 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 04:07:06 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 04:07:06 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:07:06 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:07:06 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:07:06 PM - DEBUG - defmap: {}
07/23/2024 04:07:06 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:06 PM - DEBUG - keep phismap: {}
07/23/2024 04:07:06 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:07:06 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09160>
07/23/2024 04:07:06 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09160>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09160>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09160>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09160>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09160>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:07:06 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000014985CB23D0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000014985CB2580>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000014985CB27F0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000014985CB2AF0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000014985CB2FA0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000014985CB4250>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000014985C15AF0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000014985C078E0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000014985C07970>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000014985C23D00>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000014985C23F70>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000014985CB26D0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000014985CB4130>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000014985C23E50>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000014985C15D90>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000014985C15C70>,
                        0)]})
07/23/2024 04:07:06 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000014985C09160>
07/23/2024 04:07:06 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:07:06 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 04:07:06 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 04:07:06 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 04:07:06 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 04:07:06 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:07:06 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:07:06 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:07:06 PM - DEBUG - defmap: {}
07/23/2024 04:07:06 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:06 PM - DEBUG - keep phismap: {}
07/23/2024 04:07:06 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:07:06 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CB8F70>
07/23/2024 04:07:06 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CB8F70>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CB8F70>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CB8F70>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CB8F70>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CB8F70>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:07:06 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000014985CD8670>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000014985CD8400>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000014985C07BB0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000014985CB4970>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000014985CDF490>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000014985CDFAF0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000014985CDF0A0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000014985CDFF40>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000014985CE3100>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000014985CD8F40>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000014985CD8310>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000014985C07490>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000014985CDFC10>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000014985CD8C70>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000014985CB8160>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000014985CB8640>,
                        0)]})
07/23/2024 04:07:06 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000014985CB8F70>
07/23/2024 04:07:06 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:07:06 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:07:06 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:07:06 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:07:06 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:07:06 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:07:06 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:07:06 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001496C0BE700>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09190>
07/23/2024 04:07:06 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:07:06 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:07:06 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:07:06 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:07:06 PM - DEBUG - on stmt: jump 14
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09190>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09190>
07/23/2024 04:07:06 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:07:06 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09190>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001496C0BE700>))
07/23/2024 04:07:06 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:07:06 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:07:06 PM - DEBUG - on stmt: jump 55
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09190>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985C09190>
07/23/2024 04:07:06 PM - DEBUG - on stmt: jump 14
07/23/2024 04:07:06 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000014985CEAAF0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000014985CF60A0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000014985CF6640>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000014985CF6760>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000014985CF6880>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000014985CF6F40>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000014985CFC280>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000014985CFC4F0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000014985CEA9A0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000014985CFC6D0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000014985CFCAF0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000014985CFCE80>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000014985CFE040>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000014985CEAB50>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000014985CFE550>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000014985CEACA0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000014985CFC0D0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000014985CFE1C0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000014985CEADC0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000014985CF6580>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000014985CEAE80>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000014985CFC3D0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000014985CF6B50>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000014985CEAEB0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000014985CE32B0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000014985CE3430>,
                         0)]})
07/23/2024 04:07:06 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000014985C09190>
07/23/2024 04:07:06 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:07:06 PM - DEBUG - stack: []
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack []
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:07:06 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:07:06 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:07:06 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 04:07:06 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:07:06 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:07:06 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:07:06 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:07:06 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:07:06 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:07:06 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:07:06 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:07:06 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:07:06 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:07:06 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:06 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001496C0BE550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CFED90>
07/23/2024 04:07:06 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:07:06 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:07:06 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:07:06 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:07:06 PM - DEBUG - on stmt: jump 14
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CFED90>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CFED90>
07/23/2024 04:07:06 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:07:06 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:07:06 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CFED90>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001496C0BE550>))
07/23/2024 04:07:06 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:07:06 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:07:06 PM - DEBUG - on stmt: jump 55
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CFED90>
07/23/2024 04:07:06 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:07:06 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:07:06 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:07:06 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:07:06 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000014985CFED90>
07/23/2024 04:07:06 PM - DEBUG - on stmt: jump 14
07/23/2024 04:07:06 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000014985D46130>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000014985D46250>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000014985D46580>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000014985D466A0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000014985D467C0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000014985D46E80>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000014985D481C0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000014985D48430>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000014985D40AF0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000014985D48610>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000014985D48A30>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000014985D48DC0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000014985D48F40>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000014985D40C70>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000014985D4A490>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000014985D40F70>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000014985D46FD0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000014985D4A100>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000014985D40E20>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000014985D464C0>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000014985D40970>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000014985D48310>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000014985D46A90>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000014985D40850>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000014985D2F550>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000014985D40700>,
                         0)]})
07/23/2024 04:07:06 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000014985CFED90>
07/23/2024 04:07:12 PM - DEBUG - Logfile initialised
07/23/2024 04:07:12 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 04:07:23 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:07:23 PM - DEBUG - stack: []
07/23/2024 04:07:23 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:07:23 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 04:07:23 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:23 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:07:23 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:07:23 PM - DEBUG - defmap: {}
07/23/2024 04:07:23 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:23 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:23 PM - DEBUG - keep phismap: {}
07/23/2024 04:07:23 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:07:23 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:07:23 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:23 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EF97EEEB80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 04:07:23 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:07:23 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EFE56D6CA0>
07/23/2024 04:07:23 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 04:07:23 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 04:07:23 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 04:07:23 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EF97EEEB80>))
07/23/2024 04:07:23 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 04:07:23 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 04:07:23 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 04:07:23 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 04:07:23 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001F0095D6FD0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001F0095DD2E0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001F0095DD400>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001F0095D6940>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001F0095D6D30>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001F0095D6460>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001F0095D6580>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001F0095D67C0>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001F0095D66A0>,
                                 0)]})
07/23/2024 04:07:23 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001F0095D6E20>
07/23/2024 04:07:23 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:07:23 PM - DEBUG - stack: []
07/23/2024 04:07:23 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 04:07:23 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 04:07:23 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 04:07:23 PM - DEBUG - stack ['$state74.34']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 04:07:23 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 04:07:23 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 04:07:23 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 04:07:23 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$state86.39']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 04:07:23 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$constants144.67']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 04:07:23 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$constants190.89']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 04:07:23 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$constants224.105']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack []
07/23/2024 04:07:23 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:07:23 PM - DEBUG - stack ['$const262.123']
07/23/2024 04:07:23 PM - DEBUG - end state. edges=[]
07/23/2024 04:07:23 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:07:23 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:07:23 PM - DEBUG - defmap: {}
07/23/2024 04:07:23 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:23 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:07:23 PM - DEBUG - keep phismap: {}
07/23/2024 04:07:23 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:07:23 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:07:23 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:07:23 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EF97EEEB80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001EFE56CE0D0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 04:07:23 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:07:23 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001F009A78490>
07/23/2024 04:07:23 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 04:07:23 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 04:07:23 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 04:07:23 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EF97EEEB80>))
07/23/2024 04:07:23 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 04:07:23 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001EFE56CE0D0>))
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 04:07:23 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 04:07:23 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 04:07:23 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 04:07:23 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 04:07:23 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 04:07:23 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 04:07:23 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 04:07:23 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 04:07:23 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 04:07:23 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 04:07:23 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 04:07:23 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 04:07:23 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 04:07:23 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 04:07:23 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001F009A4AE20>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001F009A70A90>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001F009A70C10>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001EFE56D66D0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001F009A4ACD0>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001F009A80310>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001F009A72610>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001F009A72790>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001F009A80940>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001F009A72E50>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001F009A72FD0>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001F009A80A00>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001F009A768E0>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001F009A80AC0>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001F009A76EB0>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001F009A80B80>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001F009A76FA0>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001F009A80C40>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001F009A788B0>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001F009A80D00>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001F009A78E50>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001F009A78FD0>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001F009A80DC0>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001F009A7A8E0>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001F009A80E80>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001F009A7AEB0>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001F0095DD8E0>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001F009A80F40>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001F009A7C5B0>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001F009A7C730>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001F009A85040>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001F009A4AEE0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001F009A7E040>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001F009A85100>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001F009A7E610>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001F009A851C0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001F009A4AC10>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001F009A85280>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001F009A7EFD0>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001F009A80190>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001F009A807C0>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001EFE56D64F0>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001F009A43130>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001F009A51790>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001F009A43070>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001F009A51FA0>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001EFE56D67C0>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001F009A43FD0>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001F009A43520>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001F009A7AFA0>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001F009A7A460>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001EFE56D6E50>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001F009A7CC10>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001EFE56D6DC0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001F009A7E160>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001F009A700A0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001F009A7EB20>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001F009A70760>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001F009A70E80>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001F009A722E0>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001F009A72A00>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001F009A513A0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001F009A76280>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001F009A765E0>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001F009A76B80>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001F009A78160>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001F009A78580>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001F009A78B20>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001F009A7A280>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001F009A7A5E0>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001F009A7AB80>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001F009A7C160>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001F009A7C9A0>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001F009A7CD00>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001F009A7E2E0>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001F009A7E880>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001F009A7ECA0>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001F009A80400>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001F009A80640>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001F009A51460>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001F009A51A00>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001F009A6C280>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001F009A6C6A0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001F009A6CAC0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001F009A6CEE0>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001F009A6E5E0>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001F009A6EA00>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001F009A6ED60>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001F009A70340>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001F0095DDDF0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001F009A6E280>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001F009A4A1C0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001F009A51D60>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001F0095DDD60>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001F0095DD550>, 0)]})
07/23/2024 04:07:23 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001F009A78490>
07/23/2024 04:14:07 PM - DEBUG - Logfile initialised
07/23/2024 04:14:07 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 04:14:14 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:14:14 PM - DEBUG - stack: []
07/23/2024 04:14:14 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:14:14 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 04:14:14 PM - DEBUG - end state. edges=[]
07/23/2024 04:14:14 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:14:14 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:14:14 PM - DEBUG - defmap: {}
07/23/2024 04:14:14 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:14:14 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:14:14 PM - DEBUG - keep phismap: {}
07/23/2024 04:14:14 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:14:14 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:14:14 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:14:14 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001B1E8951B80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 04:14:14 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:14:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001B2082DAD30>
07/23/2024 04:14:14 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 04:14:14 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 04:14:14 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 04:14:14 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 04:14:14 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001B1E8951B80>))
07/23/2024 04:14:14 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 04:14:14 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 04:14:14 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:14:14 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 04:14:14 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 04:14:14 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001B20AA24D00>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001B20AA24FD0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001B20BA23130>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001B20AA24670>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001B20AA24A60>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001B20AA241C0>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001B20AA242B0>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001B20AA244F0>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001B20AA243D0>,
                                 0)]})
07/23/2024 04:14:14 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001B2082DAD30>
07/23/2024 04:14:14 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:14:14 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:14:14 PM - DEBUG - stack: []
07/23/2024 04:14:14 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 04:14:14 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 04:14:14 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 04:14:14 PM - DEBUG - stack ['$state74.34']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 04:14:14 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 04:14:14 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 04:14:14 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 04:14:14 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$state86.39']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 04:14:14 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$constants144.67']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 04:14:14 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$constants190.89']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 04:14:14 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:14:14 PM - DEBUG - stack []
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 04:14:14 PM - DEBUG - stack ['$constants224.105']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:14:14 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 04:14:14 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 04:14:14 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack []
07/23/2024 04:14:15 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:14:15 PM - DEBUG - stack ['$const262.123']
07/23/2024 04:14:15 PM - DEBUG - end state. edges=[]
07/23/2024 04:14:15 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:14:15 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:14:15 PM - DEBUG - defmap: {}
07/23/2024 04:14:15 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:14:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:14:15 PM - DEBUG - keep phismap: {}
07/23/2024 04:14:15 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:14:15 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:14:15 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:14:15 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001B1E8951B80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001B20AA130D0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 04:14:15 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:14:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001B20C24BFD0>
07/23/2024 04:14:15 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 04:14:15 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 04:14:15 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 04:14:15 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001B1E8951B80>))
07/23/2024 04:14:15 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 04:14:15 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001B20AA130D0>))
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 04:14:15 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 04:14:15 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 04:14:15 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 04:14:15 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 04:14:15 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 04:14:15 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 04:14:15 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 04:14:15 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 04:14:15 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 04:14:15 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 04:14:15 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 04:14:15 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 04:14:15 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 04:14:15 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 04:14:15 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001B20C224760>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001B20C238670>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001B20C2387F0>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001B20C224BB0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001B20C224A90>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001B20C2243A0>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001B20C23A1F0>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001B20C23A370>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001B20C247520>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001B20C23AA30>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001B20C23ABB0>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001B20C2475E0>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001B20C23C4C0>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001B20C2476A0>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001B20C23CA90>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001B20C247760>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001B20C240B80>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001B20C247820>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001B20C23E490>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001B20C2478E0>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001B20C23EA30>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001B20C23EBB0>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001B20C2479A0>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001B20C2404C0>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001B20C247A60>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001B20C240A90>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001B20C20E610>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001B20C247B20>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001B20C242190>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001B20C242310>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001B20C247BE0>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001B2082DAD90>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001B20C242BE0>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001B20C247CA0>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001B20C2451F0>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001B20C247D60>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001B20BA23880>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001B20C247E20>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001B20C245BB0>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001B20C245D30>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001B20C2473A0>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001B20C230130>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001B20C23C0D0>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001B20BA23C40>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001B20C2381C0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001B20C230B80>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001B20C2302B0>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001B20C238D00>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001B20C242760>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001B20C242490>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001B20C2452E0>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001B20C230430>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001B20C23A460>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001B20C2305B0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001B20C224CD0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001B20C236C40>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001B20C224580>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001B20C238340>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001B20C238A60>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001B20C238E80>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001B20C23A5E0>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001B20C224910>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001B20C23AE20>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001B20C23C1C0>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001B20C23C760>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001B20C23CD00>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001B20C23E160>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001B20C23E700>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001B20C23EE20>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001B20C2401C0>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001B20C240760>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001B20C240D00>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001B20C242580>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001B20C2428E0>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001B20C242E80>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001B20C245460>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001B20C245880>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001B20C245FA0>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001B20C247220>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001B20BA23AC0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001B20BA26AC0>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001B20C230E20>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001B20C233280>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001B20C2336A0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001B20C233AC0>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001B20C2361C0>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001B20C2365E0>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001B20C236940>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001B20C236EE0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001B20C224E50>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001B20C233E20>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001B20C224D30>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001B20C230940>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001B20C2246A0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001B20C224F70>, 0)]})
07/23/2024 04:14:15 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001B20C230A00>
07/23/2024 04:16:12 PM - DEBUG - Logfile initialised
07/23/2024 04:16:12 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 04:19:48 PM - WARNING - diffeq system file path not valid
07/23/2024 04:23:48 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:23:48 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 04:23:48 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 04:23:48 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 04:23:48 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:23:48 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:23:48 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:23:48 PM - DEBUG - defmap: {}
07/23/2024 04:23:48 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:23:48 PM - DEBUG - keep phismap: {}
07/23/2024 04:23:48 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:23:48 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F8466D220>
07/23/2024 04:23:48 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F8466D220>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F8466D220>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F8466D220>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F8466D220>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F8466D220>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:23:48 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000029F8467B220>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000029F8467B3D0>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000029F8467B640>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000029F8466DD00>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000029F8466BC10>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000029F8467B700>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000029F8467BA00>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000029F8467BDC0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000029F84759190>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000029F8467AB50>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000029F8467ADC0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000029F8467B520>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000029F846658B0>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000029F8467ACA0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000029F8467A760>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000029F8467A640>,
                        0)]})
07/23/2024 04:23:48 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029F8466D220>
07/23/2024 04:23:48 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:23:48 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 04:23:48 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 04:23:48 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 04:23:48 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 04:23:48 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:23:48 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:23:48 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:23:48 PM - DEBUG - defmap: {}
07/23/2024 04:23:48 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:23:48 PM - DEBUG - keep phismap: {}
07/23/2024 04:23:48 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:23:48 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824190>
07/23/2024 04:23:48 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824190>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824190>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824190>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824190>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824190>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:23:48 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000029F84759F10>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000029F84759730>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000029F84759A90>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000029F84759B50>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000029F84759D00>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000029F8482F2B0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000029F8482F5B0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000029F8482F910>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000029F8482FA90>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000029F847F37C0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000029F8466D280>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000029F84759970>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000029F8482F190>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000029F8466D610>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000029F8481F2B0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000029F8481FBE0>,
                        0)]})
07/23/2024 04:23:48 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029F84824190>
07/23/2024 04:23:48 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:23:48 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:23:48 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:23:48 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:23:48 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:23:48 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:23:48 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:23:48 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000029F2F841700>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F846650A0>
07/23/2024 04:23:48 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:23:48 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:23:48 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:23:48 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:23:48 PM - DEBUG - on stmt: jump 14
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F846650A0>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F846650A0>
07/23/2024 04:23:48 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:23:48 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F846650A0>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000029F2F841700>))
07/23/2024 04:23:48 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:23:48 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:23:48 PM - DEBUG - on stmt: jump 55
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F846650A0>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F846650A0>
07/23/2024 04:23:48 PM - DEBUG - on stmt: jump 14
07/23/2024 04:23:48 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000029F848506A0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000029F848507C0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000029F84850AF0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000029F84850C10>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000029F84850D30>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000029F84852430>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000029F84852730>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000029F848529A0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000029F848500A0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000029F84852B80>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000029F84852FA0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000029F84854370>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000029F8483A9A0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000029F84850220>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000029F84824EE0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000029F84850520>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000029F84852580>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000029F846656A0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000029F84850340>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000029F84850A30>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000029F8483AEE0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000029F84852880>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000029F84852040>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000029F8483ADC0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000029F8483AB80>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000029F8483ACA0>,
                         0)]})
07/23/2024 04:23:48 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029F846650A0>
07/23/2024 04:23:48 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:23:48 PM - DEBUG - stack: []
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack []
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:23:48 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:23:48 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:23:48 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 04:23:48 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:23:48 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:23:48 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:23:48 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:23:48 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:23:48 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:23:48 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:23:48 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:23:48 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:23:48 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:23:48 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:23:48 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000029F2F841550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824B50>
07/23/2024 04:23:48 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:23:48 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:23:48 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:23:48 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:23:48 PM - DEBUG - on stmt: jump 14
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824B50>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824B50>
07/23/2024 04:23:48 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:23:48 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:23:48 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824B50>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000029F2F841550>))
07/23/2024 04:23:48 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:23:48 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:23:48 PM - DEBUG - on stmt: jump 55
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824B50>
07/23/2024 04:23:48 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:23:48 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:23:48 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:23:48 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:23:48 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029F84824B50>
07/23/2024 04:23:48 PM - DEBUG - on stmt: jump 14
07/23/2024 04:23:48 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000029F848991F0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000029F84899310>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000029F84899640>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000029F84899760>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000029F84899880>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000029F84899F40>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000029F8489B280>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000029F8489B4F0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000029F84894BB0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000029F8489B6D0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000029F8489BAF0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000029F8489BE80>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000029F8489D040>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000029F84894D30>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000029F8489D550>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000029F84899070>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000029F8489B0D0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000029F8489D1C0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000029F84894EE0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000029F84899580>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000029F84894A30>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000029F8489B3D0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000029F84899B50>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000029F84894910>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000029F848946D0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000029F848947F0>,
                         0)]})
07/23/2024 04:23:48 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029F84824B50>
07/23/2024 04:23:55 PM - DEBUG - Logfile initialised
07/23/2024 04:41:30 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:41:30 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 04:41:30 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 04:41:30 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 04:41:30 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:41:30 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:30 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:41:30 PM - DEBUG - defmap: {}
07/23/2024 04:41:30 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:30 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:30 PM - DEBUG - keep phismap: {}
07/23/2024 04:41:30 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:41:30 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:30 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F35FE130>
07/23/2024 04:41:30 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:41:30 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F35FE130>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:41:30 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F35FE130>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F35FE130>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:41:30 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F35FE130>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F35FE130>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:41:30 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:41:30 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x00000210F36383A0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x00000210F3638550>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x00000210F36387C0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x00000210F3638AC0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x00000210F3638F70>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x00000210F3633220>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x00000210F3633520>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x00000210F3633880>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x00000210F3633A00>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x00000210F35FCF40>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x00000210F35FCBB0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x00000210F36386A0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x00000210F3633100>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x00000210F35FCE50>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x00000210F3604C40>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x00000210F35FE670>,
                        0)]})
07/23/2024 04:41:30 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000210F35FE130>
07/23/2024 04:41:30 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:41:30 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 04:41:30 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 04:41:30 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 04:41:30 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 04:41:30 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:41:30 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:30 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:41:30 PM - DEBUG - defmap: {}
07/23/2024 04:41:30 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:30 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:30 PM - DEBUG - keep phismap: {}
07/23/2024 04:41:30 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:41:30 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:30 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3621910>
07/23/2024 04:41:30 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:41:30 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3621910>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:41:30 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3621910>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3621910>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:41:30 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3621910>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3621910>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:41:30 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:41:30 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x00000210F37ED070>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x00000210F37ED220>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x00000210F37ED490>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x00000210F37ED790>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x00000210F37EDC40>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x00000210F37EDEB0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x00000210F37EF1F0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x00000210F37EF550>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x00000210F37EF6D0>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x00000210F37E79A0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x00000210F37E7C10>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x00000210F37ED370>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x00000210F37EDD90>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x00000210F37E7AF0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x00000210F37E75B0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x00000210F37E7490>,
                        0)]})
07/23/2024 04:41:30 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000210F3621910>
07/23/2024 04:41:30 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:30 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:30 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:30 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:30 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:30 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:41:30 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:41:30 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:41:30 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:30 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:30 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:30 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:41:30 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:41:30 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:41:30 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:30 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x00000210D9ED1670>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F37FAA60>
07/23/2024 04:41:30 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:41:30 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:41:30 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:41:30 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:41:30 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F37FAA60>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F37FAA60>
07/23/2024 04:41:30 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:41:30 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:41:30 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F37FAA60>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x00000210D9ED1670>))
07/23/2024 04:41:30 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:41:30 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:41:30 PM - DEBUG - on stmt: jump 55
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F37FAA60>
07/23/2024 04:41:30 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:41:30 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:41:30 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:41:30 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:41:30 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F37FAA60>
07/23/2024 04:41:30 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:30 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x00000210F380F1C0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x00000210F380F2E0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x00000210F380F610>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x00000210F380F730>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x00000210F380F850>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000210F380FF10>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x00000210F3812250>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x00000210F38124C0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000210F3806B80>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x00000210F38126A0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x00000210F3812AC0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x00000210F38062E0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x00000210F3806160>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x00000210F3806D00>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x00000210F35FE220>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x00000210F380F040>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x00000210F38120A0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x00000210F3621700>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x00000210F3806EB0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x00000210F380F550>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x00000210F3806A00>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x00000210F38123A0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x00000210F380FB20>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x00000210F38068E0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x00000210F38066A0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x00000210F38067C0>,
                         0)]})
07/23/2024 04:41:30 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000210F37FAA60>
07/23/2024 04:41:30 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:30 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:30 PM - DEBUG - stack: []
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 04:41:30 PM - DEBUG - stack []
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:41:30 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:30 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:41:30 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:41:30 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 04:41:30 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:41:30 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:41:30 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:31 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:41:31 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:41:31 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 04:41:31 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:31 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:41:31 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:31 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:31 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:31 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:41:31 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:41:31 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:41:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:31 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:31 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:41:31 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:41:31 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:31 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:41:31 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:41:31 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:41:31 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:41:31 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:31 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x00000210D9ED14C0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:41:31 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3843520>
07/23/2024 04:41:31 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:41:31 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:41:31 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:41:31 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:41:31 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:31 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:41:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3843520>
07/23/2024 04:41:31 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:41:31 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:41:31 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:41:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3843520>
07/23/2024 04:41:31 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:41:31 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:41:31 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:31 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:41:31 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:41:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3843520>
07/23/2024 04:41:31 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x00000210D9ED14C0>))
07/23/2024 04:41:31 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:41:31 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:41:31 PM - DEBUG - on stmt: jump 55
07/23/2024 04:41:31 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:41:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3843520>
07/23/2024 04:41:31 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:41:31 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:41:31 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:41:31 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:41:31 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000210F3843520>
07/23/2024 04:41:31 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:31 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x00000210F37E9CD0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x00000210F37E9DF0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x00000210F385B160>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x00000210F385B280>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x00000210F385B3A0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000210F385BA60>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x00000210F385BD60>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x00000210F385BFD0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000210F37E96D0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x00000210F385D1F0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x00000210F385D610>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x00000210F385D9A0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x00000210F385DB20>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x00000210F37E9850>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x00000210F385F070>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x00000210F37E9B50>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x00000210F385BBB0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x00000210F385DCA0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x00000210F37E9A00>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x00000210F385B0A0>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x00000210F37E9550>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x00000210F385BEB0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x00000210F385B670>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x00000210F37E9430>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x00000210F37E91F0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x00000210F37E9310>,
                         0)]})
07/23/2024 04:41:31 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x00000210F3843520>
07/23/2024 04:41:38 PM - DEBUG - Logfile initialised
07/23/2024 04:41:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 04:41:58 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 04:41:58 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 04:41:58 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 04:41:58 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 04:41:58 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:41:58 PM - DEBUG - defmap: {}
07/23/2024 04:41:58 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:58 PM - DEBUG - keep phismap: {}
07/23/2024 04:41:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:41:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399B970040>
07/23/2024 04:41:58 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399B970040>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399B970040>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399B970040>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399B970040>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399B970040>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:41:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000002399B961E50>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000002399B961CA0>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000002399B961A30>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000002399B961730>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000002399B961280>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000002399B991D90>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000002399B920F40>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000002399B920BE0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000002399B920A60>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000002399B96ECA0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000002399B963280>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000002399B961B50>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000002399B991C70>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000002399B963340>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000002399B96E7F0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000002399B96EA30>,
                        0)]})
07/23/2024 04:41:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000002399B968100>
07/23/2024 04:41:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value2.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value10.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 04:41:58 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value24.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 04:41:58 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 04:41:58 PM - DEBUG - stack ['$value20.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 04:41:58 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 04:41:58 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 04:41:58 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 04:41:58 PM - DEBUG - defmap: {}
07/23/2024 04:41:58 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:41:58 PM - DEBUG - keep phismap: {}
07/23/2024 04:41:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:41:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6C9A0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6C9A0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6C9A0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6C9A0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6C9A0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6C9A0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 04:41:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000002399BA6FD60>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000002399BA6FF10>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000002399BA721C0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000002399BA724C0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000002399BA72970>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000002399BA72BE0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000002399BA72EE0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000002399BA74280>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000002399BA74400>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000002399BA6F6D0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000002399BA6F940>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000002399BA720A0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000002399BA72AC0>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000002399BA6F820>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000002399BA6F2E0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000002399BA6F1C0>,
                        0)]})
07/23/2024 04:41:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000002399BA6C9A0>
07/23/2024 04:41:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:58 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:41:58 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:41:58 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:58 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:41:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:41:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000023981ED3700>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6CDC0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:41:58 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:41:58 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:41:58 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:41:58 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6CDC0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6CDC0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:41:58 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6CDC0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000023981ED3700>))
07/23/2024 04:41:58 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:41:58 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:41:58 PM - DEBUG - on stmt: jump 55
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6CDC0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA6CDC0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000002399BA8FD30>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000002399BA8FE50>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000002399BA931C0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000002399BA932E0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000002399BA93400>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000002399BA93AC0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000002399BA93DC0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000002399BA80FA0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002399BA8F730>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000002399BA80C70>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000002399BA6CAC0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000002399BA6CD60>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000002399B920580>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000002399BA8F8B0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000002399BA371F0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000002399BA8FBB0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000002399BA93C10>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000002399BA803A0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000002399BA8FA60>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000002399BA93100>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000002399BA8F5B0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000002399BA93F10>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000002399BA936D0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000002399BA8F490>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000002399BA8F250>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000002399BA8F370>,
                         0)]})
07/23/2024 04:41:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000002399BA6CDC0>
07/23/2024 04:41:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi14.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:58 PM - DEBUG - stack: []
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack []
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$const54.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 04:41:58 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 04:41:58 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 04:41:58 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 04:41:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 04:41:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 04:41:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:41:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 04:41:58 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 04:41:58 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 04:41:58 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 04:41:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 04:41:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 04:41:58 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:41:58 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000023981ED3550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA745E0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 04:41:58 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 04:41:58 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 04:41:58 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 04:41:58 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA745E0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA745E0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 04:41:58 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 04:41:58 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA745E0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000023981ED3550>))
07/23/2024 04:41:58 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 04:41:58 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 04:41:58 PM - DEBUG - on stmt: jump 55
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA745E0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 04:41:58 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 04:41:58 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 04:41:58 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 04:41:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002399BA745E0>
07/23/2024 04:41:58 PM - DEBUG - on stmt: jump 14
07/23/2024 04:41:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000002399BAA96D0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000002399BAA97F0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000002399BAA9B20>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000002399BAA9C40>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000002399BAA9D60>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000002399BADD460>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000002399BADD760>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000002399BADD9D0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002399BAA90D0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000002399BADDBB0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000002399BADDFD0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000002399BADF3A0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000002399BADF520>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000002399BAA9250>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000002399BADFA30>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000002399BAA9550>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000002399BADD5B0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000002399BADF6A0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000002399BAA9370>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000002399BAA9A60>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000002399BAD6F10>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000002399BADD8B0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000002399BADD070>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000002399BAD6DF0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000002399BAD6BB0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000002399BAD6CD0>,
                         0)]})
07/23/2024 04:41:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000002399BA745E0>
07/23/2024 04:42:02 PM - DEBUG - Logfile initialised
07/23/2024 04:42:02 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 04:55:25 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:55:25 PM - DEBUG - stack: []
07/23/2024 04:55:25 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:55:25 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 04:55:25 PM - DEBUG - end state. edges=[]
07/23/2024 04:55:25 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:55:25 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:55:25 PM - DEBUG - defmap: {}
07/23/2024 04:55:25 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:55:25 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:55:25 PM - DEBUG - keep phismap: {}
07/23/2024 04:55:25 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:55:25 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:55:25 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:55:25 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 04:55:25 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:55:25 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E209B657F0>
07/23/2024 04:55:25 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 04:55:25 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 04:55:25 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 04:55:25 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>))
07/23/2024 04:55:25 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 04:55:25 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 04:55:25 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 04:55:25 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 04:55:25 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001E209F12B80>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001E209F12E50>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001E209F12F70>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001E209F124F0>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001E209F128E0>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001E209B65640>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001E209F12130>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001E209F12370>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001E209F12250>,
                                 0)]})
07/23/2024 04:55:25 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E209B657F0>
07/23/2024 04:55:25 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:55:25 PM - DEBUG - stack: []
07/23/2024 04:55:25 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 04:55:25 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 04:55:25 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 04:55:25 PM - DEBUG - stack ['$state74.34']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 04:55:25 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 04:55:25 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 04:55:25 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 04:55:25 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$state86.39']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 04:55:25 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$constants144.67']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 04:55:25 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$constants190.89']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 04:55:25 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$constants224.105']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack []
07/23/2024 04:55:25 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:55:25 PM - DEBUG - stack ['$const262.123']
07/23/2024 04:55:25 PM - DEBUG - end state. edges=[]
07/23/2024 04:55:25 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:55:25 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:55:25 PM - DEBUG - defmap: {}
07/23/2024 04:55:25 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:55:25 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:55:25 PM - DEBUG - keep phismap: {}
07/23/2024 04:55:25 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:55:25 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:55:25 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:55:25 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001E209B56280>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 04:55:25 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:55:25 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E20A000BB0>
07/23/2024 04:55:25 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 04:55:25 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 04:55:25 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 04:55:25 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>))
07/23/2024 04:55:25 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 04:55:25 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001E209B56280>))
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 04:55:25 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 04:55:25 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 04:55:25 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 04:55:25 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 04:55:25 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 04:55:25 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 04:55:25 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 04:55:25 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 04:55:25 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 04:55:25 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 04:55:25 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 04:55:25 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 04:55:25 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 04:55:25 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 04:55:25 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001E209FC6280>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001E209FEE1C0>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001E209FEE340>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001E209FC6670>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001E209FC6460>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001E209FFAA00>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001E209FEED00>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001E209FEEE80>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001E209FFC070>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001E209FF0580>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001E209FF0700>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001E209FFC130>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001E209FF0FD0>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001E209FFC1F0>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001E209FF15E0>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001E209FFC2B0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001E209FF6B80>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001E209FFC370>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001E209FF1FA0>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001E209FFC430>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001E209FF3580>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001E209FF3700>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001E209FFC4F0>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001E209FF3FD0>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001E209FFC5B0>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001E209FF65E0>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001E209F15580>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001E209FFC670>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001E209FF6CA0>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001E209FF6E20>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001E209FFC730>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001E209F15790>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001E209FF8730>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001E209FFC7F0>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001E209FF8D00>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001E209FFC8B0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001E209F151F0>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001E209FFC970>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001E209FFA700>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001E209FFA880>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001E209FFAEB0>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001E209FD9970>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001E209FEE850>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001E209FD9E50>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001E209FF03D0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001E209FE76D0>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001E209FD9AF0>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001E209FF30D0>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001E209FF8DF0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001E209FECD60>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001E209FEC940>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001E209FD9C70>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001E209FC6F70>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001E209FD9DF0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001E209FC6BB0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001E209FEC790>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001E209FC6040>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001E209FECE50>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001E209FEE5B0>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001E209FEE9D0>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001E209FF0130>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001E209F12A60>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001E209FF0970>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001E209FF0CD0>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001E209FF12B0>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001E209FF1850>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001E209FF1C70>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001E209FF3250>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001E209FF3970>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001E209FF3CD0>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001E209FF62B0>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001E209FF6850>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001E209FF80D0>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001E209FF8430>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001E209FF89D0>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001E209FF8F70>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001E209FFA3D0>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001E209FFAAF0>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001E209FFAD30>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001E209FD9400>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001E209FE7130>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001E209FE7970>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001E209FE7D90>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001E209FE91F0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001E209FE9610>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001E209FE9CD0>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001E209FEC130>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001E209FEC490>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001E209FECA30>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001E209FD96D0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001E209FE9970>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001E209FD9040>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001E209FE7490>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001E209FD95B0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001E209FD97F0>, 0)]})
07/23/2024 04:55:25 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E209F15D30>
07/23/2024 04:56:27 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:56:27 PM - DEBUG - stack: []
07/23/2024 04:56:27 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 04:56:27 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 04:56:27 PM - DEBUG - end state. edges=[]
07/23/2024 04:56:27 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:56:27 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:56:27 PM - DEBUG - defmap: {}
07/23/2024 04:56:27 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:56:27 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:56:27 PM - DEBUG - keep phismap: {}
07/23/2024 04:56:27 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:56:27 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:56:27 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:56:27 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 04:56:27 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:56:27 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E209FF8B80>
07/23/2024 04:56:27 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 04:56:27 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 04:56:27 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 04:56:27 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>))
07/23/2024 04:56:27 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 04:56:27 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 04:56:27 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 04:56:27 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 04:56:27 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001E20A01AF70>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001E20A0C40A0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001E20A0C0EB0>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001E20A062FA0>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001E209FFCEE0>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001E209FFAC70>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001E20A01D2B0>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001E20A04DD30>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001E20A05A460>,
                                 0)]})
07/23/2024 04:56:27 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E209FF8B80>
07/23/2024 04:56:27 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 04:56:27 PM - DEBUG - stack: []
07/23/2024 04:56:27 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 04:56:27 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 04:56:27 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 04:56:27 PM - DEBUG - stack ['$state74.34']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 04:56:27 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 04:56:27 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 04:56:27 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 04:56:27 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$state86.39']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 04:56:27 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$constants144.67']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 04:56:27 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$constants190.89']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 04:56:27 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$constants224.105']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack []
07/23/2024 04:56:27 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 04:56:27 PM - DEBUG - stack ['$const262.123']
07/23/2024 04:56:27 PM - DEBUG - end state. edges=[]
07/23/2024 04:56:27 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 04:56:27 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 04:56:27 PM - DEBUG - defmap: {}
07/23/2024 04:56:27 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:56:27 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 04:56:27 PM - DEBUG - keep phismap: {}
07/23/2024 04:56:27 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 04:56:27 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 04:56:27 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 04:56:27 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001E20A0F80D0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 04:56:27 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 04:56:27 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E20B100EE0>
07/23/2024 04:56:27 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 04:56:27 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 04:56:27 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 04:56:27 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E188B24B80>))
07/23/2024 04:56:27 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 04:56:27 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001E20A0F80D0>))
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 04:56:27 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 04:56:27 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 04:56:27 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 04:56:27 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 04:56:27 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 04:56:27 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 04:56:27 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 04:56:27 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 04:56:27 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 04:56:27 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 04:56:27 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 04:56:27 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 04:56:27 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 04:56:27 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 04:56:27 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001E20A0C86D0>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001E20B0ECD90>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001E20B0ECF10>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001E20A0BB2B0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001E20B0FC190>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001E20B0FC7C0>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001E20B0D6040>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001E20B0ED610>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001E20B0FC880>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001E20B0EDCD0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001E20B0EDE50>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001E20B0FC940>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001E20B0EF760>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001E20B0FCA00>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001E20B0EFD30>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001E20B0FCAC0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001E20B0EF2E0>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001E20B0FCB80>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001E20B0F5730>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001E20B0FCC40>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001E20B0F5CD0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001E20B0F5E50>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001E20B0FCD00>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001E20B0F7760>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001E20B0FCDC0>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001E20B0F7D30>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001E20B0E51F0>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001E20B0FCE80>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001E20B0F9430>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001E20B0F95B0>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001E20B0FCF40>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001E20B0E53A0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001E20B0F9E80>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001E20B0EC8E0>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001E20B0FA490>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001E20B0D68E0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001E20B0E5550>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001E20B0D6F70>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001E20B0FAE50>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001E20B0FAFD0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001E20B0FC640>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001E209FF8670>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001E20B0EDF40>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001E20B0E5A90>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001E20B0E9640>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001E20B0E72E0>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001E20A0081F0>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001E20B0E90A0>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001E20B0F5F40>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001E209FBEAC0>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001E20B0F7370>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001E20A0AA700>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001E20B0F7910>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001E20A0BB310>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001E20B0FA9A0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001E20B0EC3A0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001E20A0C8B20>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001E20B0ECA60>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001E20B0ED1C0>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001E20A0C8D00>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001E20B0ED880>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001E209F15A00>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001E20B0EF100>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001E20B0EF460>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001E20B0EFA00>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001E20B0EFFA0>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001E20B0F5400>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001E20B0F59A0>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001E20B0F7100>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001E20B0F7460>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001E20B0F7A00>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001E20B0F7FA0>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001E20B0F9820>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001E20B0F9B80>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001E20B0FA160>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001E20B0FA700>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001E20B0FAB20>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001E20B0FC280>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001E20B0FC4C0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001E20B0E5760>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001E20B0E5D00>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001E20B0E7580>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001E20B0E79A0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001E20B0E7DC0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001E20B0E9220>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001E20B0E98E0>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001E20B0E9D00>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001E20B0EC0A0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001E20B0EC640>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001E20A039A60>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001E20B0E9580>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001E20A0C88E0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001E20B0E70A0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001E20A0C8940>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001E20A070BE0>, 0)]})
07/23/2024 04:56:27 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E20B0F96A0>
07/23/2024 04:57:51 PM - DEBUG - Logfile initialised
07/23/2024 05:07:46 PM - DEBUG - Logfile initialised
07/23/2024 05:19:28 PM - DEBUG - Logfile initialised
07/23/2024 06:53:42 PM - DEBUG - Logfile initialised
07/23/2024 06:53:59 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value2.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value10.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 06:53:59 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value24.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 06:53:59 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value20.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 06:53:59 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 06:53:59 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 06:53:59 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:53:59 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 06:53:59 PM - DEBUG - defmap: {}
07/23/2024 06:53:59 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:53:59 PM - DEBUG - keep phismap: {}
07/23/2024 06:53:59 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:53:59 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062F6FD0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062F6FD0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062F6FD0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062F6FD0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062F6FD0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062F6FD0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 06:53:59 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000029D062DCAC0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000029D062DCC70>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000029D062DCEE0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000029D062DE250>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000029D062F6460>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000029D062F66D0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000029D062F69D0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000029D062F6D30>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000029D062F6EB0>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000029D062CDDC0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000029D062DC4C0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000029D062DCDC0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000029D062F65B0>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000029D062C7A30>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000029D062CFC40>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000029D062CFE80>,
                        0)]})
07/23/2024 06:53:59 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029D062F6FD0>
07/23/2024 06:53:59 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value2.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value10.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 06:53:59 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value24.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 06:53:59 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 06:53:59 PM - DEBUG - stack ['$value20.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 06:53:59 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 06:53:59 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 06:53:59 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:53:59 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 06:53:59 PM - DEBUG - defmap: {}
07/23/2024 06:53:59 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:53:59 PM - DEBUG - keep phismap: {}
07/23/2024 06:53:59 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:53:59 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062CF340>
07/23/2024 06:53:59 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062CF340>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062CF340>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062CF340>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062CF340>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D062CF340>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 06:53:59 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x0000029D064AA4F0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x0000029D064AA6A0>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x0000029D064AA910>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x0000029D064AAC10>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x0000029D064AB100>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x0000029D064AB370>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x0000029D064AB670>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x0000029D064AB9D0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x0000029D064ABB50>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000029D064A5E20>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x0000029D064AA0D0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x0000029D064AA7F0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x0000029D064AB250>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x0000029D064A5F70>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x0000029D064A5A30>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x0000029D064A5910>,
                        0)]})
07/23/2024 06:53:59 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029D062CF340>
07/23/2024 06:53:59 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi14.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$const54.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:53:59 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:53:59 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 06:53:59 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 06:53:59 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:53:59 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 06:53:59 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 06:53:59 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000029CACFE9700>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064ABD00>
07/23/2024 06:53:59 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 06:53:59 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 06:53:59 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 06:53:59 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 06:53:59 PM - DEBUG - on stmt: jump 14
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064ABD00>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064ABD00>
07/23/2024 06:53:59 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 06:53:59 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064ABD00>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x0000029CACFE9700>))
07/23/2024 06:53:59 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 06:53:59 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 06:53:59 PM - DEBUG - on stmt: jump 55
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064ABD00>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064ABD00>
07/23/2024 06:53:59 PM - DEBUG - on stmt: jump 14
07/23/2024 06:53:59 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000029D064C7730>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000029D064C7850>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000029D064C7B80>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000029D064C7CA0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000029D064C7DC0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000029D064CC4C0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000029D064CC7C0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000029D064CCA30>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000029D064C7130>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000029D064CCC10>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000029D064CE070>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000029D064C2940>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000029D064C27C0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000029D064C72B0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000029D063D4610>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000029D064C75B0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000029D064CC610>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000029D063D4460>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000029D064C73D0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000029D064C7AC0>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000029D064C2F70>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000029D064CC910>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000029D064CC0D0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000029D064C2E50>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000029D064C2C10>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000029D064C2D30>,
                         0)]})
07/23/2024 06:53:59 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029D064ABD00>
07/23/2024 06:53:59 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi14.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:53:59 PM - DEBUG - stack: []
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack []
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$const54.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:53:59 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 06:53:59 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 06:53:59 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 06:53:59 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:53:59 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:53:59 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:53:59 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 06:53:59 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 06:53:59 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:53:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:53:59 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 06:53:59 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 06:53:59 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 06:53:59 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:53:59 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000029CACFE9550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064978B0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 06:53:59 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 06:53:59 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 06:53:59 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 06:53:59 PM - DEBUG - on stmt: jump 14
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064978B0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064978B0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 06:53:59 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 06:53:59 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064978B0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x0000029CACFE9550>))
07/23/2024 06:53:59 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 06:53:59 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 06:53:59 PM - DEBUG - on stmt: jump 55
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064978B0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:53:59 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:53:59 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:53:59 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 06:53:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000029D064978B0>
07/23/2024 06:53:59 PM - DEBUG - on stmt: jump 14
07/23/2024 06:53:59 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000029D06513DF0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x0000029D06513F10>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x0000029D06518280>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x0000029D065183A0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x0000029D065184C0>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000029D06518B80>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x0000029D06518E80>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x0000029D0651A130>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000029D065137F0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x0000029D0651A310>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x0000029D0651A730>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000029D0651AAC0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x0000029D0651AC40>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000029D06513970>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x0000029D0651C190>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000029D06513C70>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x0000029D06518CD0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x0000029D0651AEE0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x0000029D06513A90>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x0000029D065181C0>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x0000029D06513670>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x0000029D06518FD0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x0000029D06518790>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x0000029D06513550>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x0000029D06513310>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x0000029D06513430>,
                         0)]})
07/23/2024 06:53:59 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000029D064978B0>
07/23/2024 06:53:59 PM - DEBUG - Logfile initialised
07/23/2024 06:55:07 PM - DEBUG - Logfile initialised
07/23/2024 06:56:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value2.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value10.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 06:56:58 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value24.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 06:56:58 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value20.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 06:56:58 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 06:56:58 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 06:56:58 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:56:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 06:56:58 PM - DEBUG - defmap: {}
07/23/2024 06:56:58 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:56:58 PM - DEBUG - keep phismap: {}
07/23/2024 06:56:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:56:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06DFFC40>
07/23/2024 06:56:58 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06DFFC40>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06DFFC40>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06DFFC40>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06DFFC40>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06DFFC40>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 06:56:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001EE06E02580>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001EE06E02730>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001EE06E029A0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001EE06E0DFA0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001EE06E12490>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001EE06E12700>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001EE06E2D040>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001EE06E2D430>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001EE06E2D5B0>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001EE06DF8F40>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001EE06E02190>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001EE06E02880>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001EE06E125E0>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001EE06DF89A0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001EE06DFA0A0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001EE06DFA1C0>,
                        0)]})
07/23/2024 06:56:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE06DFFC40>
07/23/2024 06:56:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value2.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value10.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 06:56:58 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value24.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 06:56:58 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 06:56:58 PM - DEBUG - stack ['$value20.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 06:56:58 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 06:56:58 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 06:56:58 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:56:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 06:56:58 PM - DEBUG - defmap: {}
07/23/2024 06:56:58 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:56:58 PM - DEBUG - keep phismap: {}
07/23/2024 06:56:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:56:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06FD0AC0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06FD0AC0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06FD0AC0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06FD0AC0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06FD0AC0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06FD0AC0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 06:56:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001EE06FD5A60>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001EE06FD5C10>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001EE06FD5E80>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001EE06FD81C0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001EE06FD8670>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001EE06FD88E0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001EE06FD8BE0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001EE06FD8F40>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001EE06FDA100>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001EE06FD53D0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001EE06FD5640>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001EE06FD5D60>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001EE06FD87C0>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001EE06FD5520>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001EE06FD0FA0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001EE06FD0E80>,
                        0)]})
07/23/2024 06:56:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE06FD0AC0>
07/23/2024 06:56:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi14.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$const54.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:56:58 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:56:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 06:56:58 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 06:56:58 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:56:58 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 06:56:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 06:56:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001EDAC526700>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06E6B520>
07/23/2024 06:56:58 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 06:56:58 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 06:56:58 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 06:56:58 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 06:56:58 PM - DEBUG - on stmt: jump 14
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06E6B520>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06E6B520>
07/23/2024 06:56:58 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 06:56:58 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06E6B520>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001EDAC526700>))
07/23/2024 06:56:58 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 06:56:58 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 06:56:58 PM - DEBUG - on stmt: jump 55
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06E6B520>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE06E6B520>
07/23/2024 06:56:58 PM - DEBUG - on stmt: jump 14
07/23/2024 06:56:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001EE06FF8A30>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001EE06FF8B50>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE06FF8E80>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE06FF8FA0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE06FFA100>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001EE06FFA7C0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001EE06FFAAC0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001EE06E6B670>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE06FF8430>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001EE06FE5A60>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001EE06FE0580>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001EE06FD0580>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001EE06FD0C10>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001EE06FF85B0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001EE06E2D910>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001EE06FF88B0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001EE06FFA910>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001EE06FE5040>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001EE06FF86D0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001EE06FF8DC0>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001EE06FF82B0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001EE06FFAC10>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001EE06FFA3D0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001EE06FF8190>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001EE06FE5F10>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001EE06FF8070>,
                         0)]})
07/23/2024 06:56:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE06E6B520>
07/23/2024 06:56:58 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi14.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:56:58 PM - DEBUG - stack: []
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack []
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$const54.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 06:56:58 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 06:56:58 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 06:56:58 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 06:56:58 PM - DEBUG - stack ['$phi30.0']
07/23/2024 06:56:58 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 06:56:58 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:56:58 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 06:56:58 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 06:56:58 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:56:58 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 06:56:58 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 06:56:58 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 06:56:58 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 06:56:58 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:56:58 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001EDAC526550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE07011BE0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 06:56:58 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 06:56:58 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 06:56:58 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 06:56:58 PM - DEBUG - on stmt: jump 14
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE07011BE0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE07011BE0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 06:56:58 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 06:56:58 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE07011BE0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001EDAC526550>))
07/23/2024 06:56:58 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 06:56:58 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 06:56:58 PM - DEBUG - on stmt: jump 55
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE07011BE0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:56:58 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:56:58 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:56:58 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 06:56:58 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE07011BE0>
07/23/2024 06:56:58 PM - DEBUG - on stmt: jump 14
07/23/2024 06:56:58 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001EE06FFC2B0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001EE06FFC3D0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE06FFC700>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE06FFC820>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE06FFC940>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001EE07042040>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001EE07042340>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001EE070425B0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE0703CC70>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001EE07042790>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001EE07042BB0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001EE07042F40>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001EE07044100>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001EE0703CDF0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001EE07044610>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001EE06FFC130>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001EE07042190>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001EE07044280>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001EE0703CFA0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001EE06FFC640>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001EE0703CAF0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001EE07042490>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001EE06FFCC10>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001EE0703C9D0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001EE0703C790>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001EE0703C8B0>,
                         0)]})
07/23/2024 06:56:58 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE07011BE0>
07/23/2024 06:57:00 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:00 PM - DEBUG - stack: []
07/23/2024 06:57:00 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 06:57:00 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 06:57:00 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:00 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:00 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:00 PM - DEBUG - defmap: {}
07/23/2024 06:57:00 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:00 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:00 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:00 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:00 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:00 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:00 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EE06DE23A0>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 06:57:00 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:00 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE089F35B0>
07/23/2024 06:57:00 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 06:57:00 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 06:57:00 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 06:57:00 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EE06DE23A0>))
07/23/2024 06:57:00 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 06:57:00 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 06:57:00 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 06:57:00 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 06:57:00 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001EE089FACD0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001EE089FAFA0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001EE06EFB100>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001EE089FA640>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001EE089FAA30>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001EE089FA130>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001EE089FA280>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001EE089FA4C0>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001EE089FA3A0>,
                                 0)]})
07/23/2024 06:57:00 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE089FA100>
07/23/2024 06:57:00 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:00 PM - DEBUG - stack: []
07/23/2024 06:57:00 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 06:57:00 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 06:57:00 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 06:57:00 PM - DEBUG - stack ['$state74.34']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 06:57:00 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 06:57:00 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 06:57:00 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 06:57:00 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$state86.39']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:00 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$constants144.67']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 06:57:00 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$constants190.89']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 06:57:00 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$constants224.105']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack []
07/23/2024 06:57:00 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 06:57:00 PM - DEBUG - stack ['$const262.123']
07/23/2024 06:57:00 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:00 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:00 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:00 PM - DEBUG - defmap: {}
07/23/2024 06:57:00 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:00 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:00 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:00 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:00 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:00 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:00 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EE06DE23A0>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001EE089EE0D0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 06:57:00 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:00 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EDAC396FD0>
07/23/2024 06:57:00 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 06:57:00 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 06:57:00 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 06:57:00 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001EE06DE23A0>))
07/23/2024 06:57:00 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 06:57:00 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001EE089EE0D0>))
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 06:57:00 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 06:57:00 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 06:57:00 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 06:57:00 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 06:57:00 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 06:57:00 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 06:57:00 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 06:57:00 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 06:57:00 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 06:57:00 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 06:57:00 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 06:57:00 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 06:57:00 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 06:57:00 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 06:57:00 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001EDC3C2D880>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001EDC3C6E7F0>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001EDC3C6E970>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001EDC3BB99D0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001EE06EFB520>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001EDC3C21070>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001EDC3C6C370>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001EDC3C6C4F0>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001EDC3C216A0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001EDC3C6CBB0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001EDC3C6CD30>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001EDC3C21760>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001EDC3C37640>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001EDC3C21820>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001EDC3C37C10>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001EDC3C218E0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001EDC3C6EE80>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001EDC3C219A0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001EDC3C22610>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001EDC3C21A60>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001EDC3C22BB0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001EDC3C22D30>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001EDC3C21B20>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001EDC3C31640>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001EDC3C21BE0>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001EDC3C31C10>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001EDC3BB9C10>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001EDC3C21CA0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001EDC3C30310>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001EDC3C30490>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001EDC3C21D60>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001EDC3BB9DC0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001EDC3C30D60>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001EDC3C21E20>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001EDC3C2D370>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001EDC3C21EE0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001EDC3BB9F70>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001EDC3C21FA0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001EDC3C2DD30>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001EDC3C2DEB0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001EDC3C21520>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001EDC3A7CE50>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001EDC3C6EF10>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001EDC3B784F0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001EE089F3640>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001EDC3B78D00>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001EDC3A7C880>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001EE089F3250>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001EE089F3CD0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001EDC3C6CA00>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001EDC3C22EB0>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001EDC3BB97F0>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001EDC3C22790>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001EDC3BB9670>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001EDC3C30580>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001EDC3B55DC0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001EDC3C30E80>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001EDC3C6E4C0>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001EDC3C6EBE0>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001EDC3C6C040>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001EDC3C6C760>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001EDC3BB91C0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001EDC3C6CFA0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001EDC3C37340>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001EDC3C378E0>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001EDC3C37E80>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001EDC3C222E0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001EDC3C22880>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001EDC3C22FA0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001EDC3C31340>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001EDC3C318E0>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001EDC3C31E80>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001EDC3C30700>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001EDC3C30A60>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001EDC3C2D040>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001EDC3C2D5E0>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001EDC3C2DA00>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001EDC3C21160>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001EDC3C213A0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001EDC3B781C0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001EDC3B78760>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001EDC3B78FA0>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001EDC3B5A400>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001EDC3B5A820>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001EDC3B5AC40>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001EDC3B55340>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001EDC3B55760>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001EDC3B55AC0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001EDC3C6E0A0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001EDC3A7C7F0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001EDC3B5AFA0>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001EE06EFB460>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001EDC3B78AC0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001EDC3A7DF70>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001EDC3A7CD00>, 0)]})
07/23/2024 06:57:00 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EDC3C31760>
07/23/2024 06:57:01 PM - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Geometr212 BkCn BT Book.ttf', name='Geometr212 BkCn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simhei.ttf', name='SimHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\olfsimplesansoc-regular.ttf', name='OLF SimpleSansOC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humanst521 BT Bold Italic.ttf', name='Humanst521 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop2.ttf', name='SWIsop2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Regular.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 WGL4 BT Italic.ttf', name='Swis721 WGL4 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\hyswlongfangsong.ttf', name='HYSWLongFangSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DeVinne Txt BT.ttf', name='DeVinne Txt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Clarendon BT Bold.ttf', name='Clarendon BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 BT Roman.ttf', name='Century751 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 BT Italic.ttf', name='Century751 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Bold.otf', name='Adobe Devanagari', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Lt BT Light Italic.ttf', name='Swis721 Lt BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Geometr415 Blk BT Black.ttf', name='Geometr415 Blk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Futura Bk BT Book Italic.ttf', name='Futura Bk BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Exotc350 Bd BT Bold.ttf', name='Exotc350 Bd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Regular.otf', name='Adobe Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 No2 BT Bold.ttf', name='Century751 No2 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 No2 BT Italic.ttf', name='Century751 No2 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humnst777 Cn BT.ttf', name='Humnst777 Cn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmusic.ttf', name='SWMusic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NewsGoth BT Bold.ttf', name='NewsGoth BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 WGL4 BT Bold Italic.ttf', name='Swis721 WGL4 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Bodoni Bk BT Book Italic.ttf', name='Bodoni Bk BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Futura Md BT Medium Italic.ttf', name='Futura Md BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Regular.otf', name='Adobe Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Lt BT Light.ttf', name='Swis721 Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 No2 BT Roman.ttf', name='Century751 No2 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\News706 BT Bold.ttf', name='News706 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 WGL4 BT Roman.ttf', name='Swis721 WGL4 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrpc.ttf', name='SWScrpc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Blk BT Black.ttf', name='Swis721 Blk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgreks.ttf', name='SWGreks', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Futura Md BT Medium.ttf', name='Futura Md BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TypoUpright BT.ttf', name='TypoUpright BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmath.ttf', name='SWMath', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Square721 Cn BT Roman.ttf', name='Square721 Cn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome5-solid-webfont.ttf', name='Font Awesome 5 Free Solid', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Freehand521 BT.ttf', name='Freehand521 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 BT Roman.ttf', name='Swis721 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobepistd.otf', name='Adobe Pi Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Exotc350 DmBd BT Demi-Bold.ttf', name='Exotc350 DmBd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeGothicStd-Bold.otf', name='Adobe Gothic Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 WGL4 BT Bold.ttf', name='Swis721 WGL4 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeFanHeitiStd-Bold.otf', name='Adobe Fan Heiti Std', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\phosphor.ttf', name='Phosphor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Bold.otf', name='Adobe Arabic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome5-brands-webfont.ttf', name='Font Awesome 5 Brands', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PDM.ttf', name='PDM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humanst521 Lt BT Light Italic.ttf', name='Humanst521 Lt BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot2.ttf', name='SWIsot2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-oblique.otf', name='Courier Std', style='oblique', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCR-B 10 BT.ttf', name='OCR-B 10 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humnst777 Lt BT Light.ttf', name='Humnst777 Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Bodoni Bd BT Bold.ttf', name='Bodoni Bd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swsimp.ttf', name='SWSimp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Clarendon Blk BT Black.ttf', name='Clarendon Blk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Geometr706 BlkCn BT Black.ttf', name='Geometr706 BlkCn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\elusiveicons-webfont-2.0.ttf', name='elusiveicons', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemyungjostd-medium.otf', name='Adobe Myungjo Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CascadiaCode.ttf', name='Cascadia Code', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\materialdesignicons6-webfont.ttf', name='Material Design Icons', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmono.ttf', name='SWMono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GeoSlab703 Md BT Bold Italic.ttf', name='GeoSlab703 Md BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GeoSlab703 MdCn BT Bold.ttf', name='GeoSlab703 MdCn BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozminpr6n-regular.otf', name='Kozuka Mincho Pr6N', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swastro.ttf', name='SWAstro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Clarendon BT Roman.ttf', name='Clarendon BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Square721 BT Roman.ttf', name='Square721 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Square721 BT Bold.ttf', name='Square721 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-Italic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humanst521 BT Italic.ttf', name='Humanst521 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Square721 Cn BT Bold.ttf', name='Square721 Cn BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humnst777 Cn BT Bold.ttf', name='Humnst777 Cn BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome5-regular-webfont-5.15.4.ttf', name='Font Awesome 5 Free Regular', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeArabic-BoldItalic.otf', name='Adobe Arabic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\materialdesignicons6-webfont-6.9.96.ttf', name='Material Design Icons', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MyriadPro-Regular.otf', name='Myriad Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\web-PDM.ttf', name='web-PDM', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Dengl.ttf', name='DengXian', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\remixicon.ttf', name='remixicon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NewsGoth BT Italic.ttf', name='NewsGoth BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simfang.ttf', name='FangSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-BoldItalic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot3.ttf', name='SWIsot3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome5-brands-webfont-5.15.4.ttf', name='Font Awesome 5 Brands', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop1.ttf', name='SWIsop1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-bold.otf', name='Courier Std', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swcomp.ttf', name='SWComp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Deng.ttf', name='DengXian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GeoSlab703 Md BT Medium.ttf', name='GeoSlab703 Md BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humanst521 BT Roman.ttf', name='Humanst521 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CentSchbkCyrill BT Roman.ttf', name='CentSchbkCyrill BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Clarendon Lt BT Light.ttf', name='Clarendon Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Geometr212 BkCn BT Heavy.ttf', name='Geometr212 BkCn BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisot1.ttf', name='SWIsot1', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Schadow BT Bold.ttf', name='Schadow BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobemingstd-light.otf', name='Adobe Ming Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobeheitistd-regular.otf', name='Adobe Heiti Std', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NewsGoth Lt BT Light.ttf', name='NewsGoth Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnt.ttf', name='SWRomnt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCR-A BT.ttf', name='OCR-A BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Futura Md BT Bold.ttf', name='Futura Md BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Kaufmann BT.ttf', name='Kaufmann BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\materialdesignicons5-webfont.ttf', name='Material Design Icons 5.9.55', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Schadow BT Roman.ttf', name='Schadow BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\codicon-0.0.35.ttf', name='codicon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgdt.ttf', name='SWGDT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swital.ttf', name='SWItal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Hv BT Heavy.ttf', name='Swis721 Hv BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgrekc.ttf', name='SWGrekc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\adobesongstd-light.otf', name='Adobe Song Std', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GeoSlab703 MdCn BT Medium.ttf', name='GeoSlab703 MdCn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humnst777 BT Roman.ttf', name='Humnst777 BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\EngraversGothic BT.ttf', name='EngraversGothic BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome5-solid-webfont-5.15.4.ttf', name='Font Awesome 5 Free Solid', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome4.7-webfont.ttf', name='FontAwesome', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 BT Italic.ttf', name='Swis721 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 BT Bold Italic.ttf', name='Swis721 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome5-regular-webfont.ttf', name='Font Awesome 5 Free Regular', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\3ds_fonticon.ttf', name='3DS Fonticon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\News701 BT Bold.ttf', name='News701 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\elusiveicons-webfont.ttf', name='elusiveicons', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Cn BT Bold Italic.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\myriadcad.otf', name='Myriad CAD', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Regular.otf', name='Adobe Thai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gothic.ttf', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnd.ttf', name='SWRomnd', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NewsGoth BT Roman.ttf', name='NewsGoth BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swscrps.ttf', name='SWScrps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalc.ttf', name='SWItalc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Cn BT Italic.ttf', name='Swis721 Cn BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Italic.otf', name='Adobe Thai', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swlink.ttf', name='SWLink', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 BlkCn BT Black.ttf', name='Swis721 BlkCn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CentSchbkCyrill BT Bold Italic.ttf', name='CentSchbkCyrill BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 SeBd BT Semi Bold Italic.ttf', name='Century751 SeBd BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-BoldItalic.otf', name='Adobe Devanagari', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-BoldItalic.otf', name='Adobe Thai', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 No2 BT Bold Italic.ttf', name='Century751 No2 BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Embassy BT.ttf', name='Embassy BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\remixicon-2.5.0.ttf', name='remixicon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\materialdesignicons5-webfont-5.9.55.ttf', name='Material Design Icons 5.9.55', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd-boldoblique.otf', name='Courier Std', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humnst777 BlkCn BT Black.ttf', name='Humnst777 BlkCn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Italic.otf', name='Adobe Devanagari', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Bodoni Bd BT Bold Italic.ttf', name='Bodoni Bd BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CentSchbkCyrill BT Italic.ttf', name='CentSchbkCyrill BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CascadiaMono.ttf', name='Cascadia Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century751 SeBd BT Semi Bold.ttf', name='Century751 SeBd BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeThai-Bold.otf', name='Adobe Thai', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swisop3.ttf', name='SWIsop3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromns.ttf', name='SWRomns', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Century725 Cn BT.ttf', name='Century725 Cn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothi.ttf', name='SWGothi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\kozgopr6n-medium.otf', name='Kozuka Gothic Pr6N', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humanst521 Lt BT Light.ttf', name='Humanst521 Lt BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Cn BT Roman.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\codicon.ttf', name='codicon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\courierstd.otf', name='Courier Std', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simkai.ttf', name='KaiTi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CentSchbkCyrill BT Bold.ttf', name='CentSchbkCyrill BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humnst777 Blk BT Black Italic.ttf', name='Humnst777 Blk BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GeoSlab703 Md BT Medium Italic.ttf', name='GeoSlab703 Md BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothg.ttf', name='SWGothg', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Bodoni Bk BT Book.ttf', name='Bodoni Bk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Dengb.ttf', name='DengXian', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 BT Bold.ttf', name='Swis721 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GeoSlab703 Md BT Bold.ttf', name='GeoSlab703 Md BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\MinionPro-Regular.otf', name='Minion Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmeteo.ttf', name='SWMeteo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\News701 BT Italic.ttf', name='News701 BT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Bold.otf', name='Adobe Hebrew', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NewsGoth BT Bold Italic.ttf', name='NewsGoth BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Futura Bk BT Book.ttf', name='Futura Bk BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\phosphor-1.3.0.ttf', name='Phosphor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swromnc.ttf', name='SWRomnc', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Users\\cca79\\AppData\\Local\\Microsoft\\Windows\\Fonts\\fontawesome4-webfont-4.7.ttf', name='FontAwesome', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swgothe.ttf', name='SWGothe', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Program Files\\SolidWorksEE2022\\SOLIDWORKS\\HoopsPublish\\resource\\Font\\AdobeHebrew-Italic.otf', name='Adobe Hebrew', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swtxt.ttf', name='SWTxt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Futura Md BT Bold Italic.ttf', name='Futura Md BT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\switalt.ttf', name='SWItalt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\swmap.ttf', name='SWMap', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 LtEx BT Light.ttf', name='Swis721 LtEx BT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Humanst521 BT Bold.ttf', name='Humanst521 BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Swis721 Cn BT Bold.ttf', name='Swis721 Cn BT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
07/23/2024 06:57:01 PM - DEBUG - findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
07/23/2024 06:57:01 PM - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\venvs\\py39\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IHDR' 16 13
07/23/2024 06:57:01 PM - DEBUG - STREAM b'sBIT' 41 4
07/23/2024 06:57:01 PM - DEBUG - b'sBIT' 41 4 (unknown)
07/23/2024 06:57:01 PM - DEBUG - STREAM b'pHYs' 57 9
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IDAT' 78 696
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IHDR' 16 13
07/23/2024 06:57:01 PM - DEBUG - STREAM b'sBIT' 41 4
07/23/2024 06:57:01 PM - DEBUG - b'sBIT' 41 4 (unknown)
07/23/2024 06:57:01 PM - DEBUG - STREAM b'pHYs' 57 9
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IDAT' 78 526
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IHDR' 16 13
07/23/2024 06:57:01 PM - DEBUG - STREAM b'sBIT' 41 4
07/23/2024 06:57:01 PM - DEBUG - b'sBIT' 41 4 (unknown)
07/23/2024 06:57:01 PM - DEBUG - STREAM b'pHYs' 57 9
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IDAT' 78 499
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IHDR' 16 13
07/23/2024 06:57:01 PM - DEBUG - STREAM b'sBIT' 41 4
07/23/2024 06:57:01 PM - DEBUG - b'sBIT' 41 4 (unknown)
07/23/2024 06:57:01 PM - DEBUG - STREAM b'pHYs' 57 9
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IDAT' 78 673
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IHDR' 16 13
07/23/2024 06:57:01 PM - DEBUG - STREAM b'sBIT' 41 4
07/23/2024 06:57:01 PM - DEBUG - b'sBIT' 41 4 (unknown)
07/23/2024 06:57:01 PM - DEBUG - STREAM b'pHYs' 57 9
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IDAT' 78 922
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IHDR' 16 13
07/23/2024 06:57:01 PM - DEBUG - STREAM b'sBIT' 41 4
07/23/2024 06:57:01 PM - DEBUG - b'sBIT' 41 4 (unknown)
07/23/2024 06:57:01 PM - DEBUG - STREAM b'pHYs' 57 9
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IDAT' 78 568
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IHDR' 16 13
07/23/2024 06:57:01 PM - DEBUG - STREAM b'sBIT' 41 4
07/23/2024 06:57:01 PM - DEBUG - b'sBIT' 41 4 (unknown)
07/23/2024 06:57:01 PM - DEBUG - STREAM b'pHYs' 57 9
07/23/2024 06:57:01 PM - DEBUG - STREAM b'IDAT' 78 626
07/23/2024 06:57:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=225)
           2	LOAD_FAST(arg=0, lineno=227)
           4	LOAD_ATTR(arg=0, lineno=227)
           6	LOAD_CONST(arg=1, lineno=227)
           8	BINARY_SUBSCR(arg=None, lineno=227)
          10	STORE_FAST(arg=3, lineno=227)
          12	LOAD_GLOBAL(arg=1, lineno=228)
          14	LOAD_FAST(arg=1, lineno=228)
          16	CALL_FUNCTION(arg=1, lineno=228)
          18	STORE_FAST(arg=1, lineno=228)
          20	LOAD_GLOBAL(arg=1, lineno=229)
          22	LOAD_FAST(arg=2, lineno=229)
          24	CALL_FUNCTION(arg=1, lineno=229)
          26	STORE_FAST(arg=2, lineno=229)
          28	LOAD_FAST(arg=3, lineno=231)
          30	LOAD_CONST(arg=2, lineno=231)
          32	COMPARE_OP(arg=5, lineno=231)
          34	POP_JUMP_IF_FALSE(arg=114, lineno=231)
          36	LOAD_GLOBAL(arg=2, lineno=232)
          38	LOAD_FAST(arg=0, lineno=232)
          40	LOAD_CONST(arg=1, lineno=232)
          42	LOAD_FAST(arg=1, lineno=232)
          44	CALL_FUNCTION(arg=3, lineno=232)
          46	POP_TOP(arg=None, lineno=232)
          48	LOAD_GLOBAL(arg=3, lineno=235)
          50	LOAD_FAST(arg=2, lineno=235)
          52	CALL_FUNCTION(arg=1, lineno=235)
          54	GET_ITER(arg=None, lineno=235)
>         56	FOR_ITER(arg=14, lineno=235)
          58	STORE_FAST(arg=4, lineno=235)
          60	LOAD_GLOBAL(arg=4, lineno=236)
          62	LOAD_FAST(arg=0, lineno=236)
          64	LOAD_CONST(arg=1, lineno=236)
          66	CALL_FUNCTION(arg=2, lineno=236)
          68	POP_TOP(arg=None, lineno=236)
          70	JUMP_ABSOLUTE(arg=56, lineno=236)
>         72	LOAD_GLOBAL(arg=3, lineno=239)
          74	LOAD_CONST(arg=2, lineno=239)
          76	LOAD_FAST(arg=3, lineno=239)
          78	CALL_FUNCTION(arg=2, lineno=239)
          80	GET_ITER(arg=None, lineno=239)
>         82	FOR_ITER(arg=30, lineno=239)
          84	STORE_FAST(arg=5, lineno=239)
          86	LOAD_FAST(arg=0, lineno=240)
          88	LOAD_FAST(arg=5, lineno=240)
          90	LOAD_CONST(arg=2, lineno=240)
          92	BINARY_SUBTRACT(arg=None, lineno=240)
          94	BINARY_SUBSCR(arg=None, lineno=240)
          96	LOAD_FAST(arg=0, lineno=240)
          98	LOAD_FAST(arg=5, lineno=240)
         100	STORE_SUBSCR(arg=None, lineno=240)
         102	LOAD_GLOBAL(arg=4, lineno=241)
         104	LOAD_FAST(arg=0, lineno=241)
         106	LOAD_FAST(arg=5, lineno=241)
         108	CALL_FUNCTION(arg=2, lineno=241)
         110	POP_TOP(arg=None, lineno=241)
         112	JUMP_ABSOLUTE(arg=82, lineno=241)
>        114	LOAD_CONST(arg=0, lineno=241)
         116	RETURN_VALUE(arg=None, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=225)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=227)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=227)
07/23/2024 06:57:02 PM - DEBUG - stack ['$states2.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=227)
07/23/2024 06:57:02 PM - DEBUG - stack ['$4load_attr.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=227)
07/23/2024 06:57:02 PM - DEBUG - stack ['$4load_attr.1', '$const6.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=10, inst=STORE_FAST(arg=3, lineno=227)
07/23/2024 06:57:02 PM - DEBUG - stack ['$8binary_subscr.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=228)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=228)
07/23/2024 06:57:02 PM - DEBUG - stack ['$12load_global.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=228)
07/23/2024 06:57:02 PM - DEBUG - stack ['$12load_global.4', '$seed14.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=18, inst=STORE_FAST(arg=1, lineno=228)
07/23/2024 06:57:02 PM - DEBUG - stack ['$16call_function.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=229)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=229)
07/23/2024 06:57:02 PM - DEBUG - stack ['$20load_global.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=24, inst=CALL_FUNCTION(arg=1, lineno=229)
07/23/2024 06:57:02 PM - DEBUG - stack ['$20load_global.7', '$subsequence_start22.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=26, inst=STORE_FAST(arg=2, lineno=229)
07/23/2024 06:57:02 PM - DEBUG - stack ['$24call_function.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=28, inst=LOAD_FAST(arg=3, lineno=231)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=231)
07/23/2024 06:57:02 PM - DEBUG - stack ['$n28.10']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=32, inst=COMPARE_OP(arg=5, lineno=231)
07/23/2024 06:57:02 PM - DEBUG - stack ['$n28.10', '$const30.11']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=114, lineno=231)
07/23/2024 06:57:02 PM - DEBUG - stack ['$32compare_op.12']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=114, stack=(), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=36, inst=LOAD_GLOBAL(arg=2, lineno=232)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=232)
07/23/2024 06:57:02 PM - DEBUG - stack ['$36load_global.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=232)
07/23/2024 06:57:02 PM - DEBUG - stack ['$36load_global.0', '$states38.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=232)
07/23/2024 06:57:02 PM - DEBUG - stack ['$36load_global.0', '$states38.1', '$const40.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=44, inst=CALL_FUNCTION(arg=3, lineno=232)
07/23/2024 06:57:02 PM - DEBUG - stack ['$36load_global.0', '$states38.1', '$const40.2', '$seed42.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=46, inst=POP_TOP(arg=None, lineno=232)
07/23/2024 06:57:02 PM - DEBUG - stack ['$44call_function.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=235)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=235)
07/23/2024 06:57:02 PM - DEBUG - stack ['$48load_global.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=235)
07/23/2024 06:57:02 PM - DEBUG - stack ['$48load_global.5', '$subsequence_start50.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=54, inst=GET_ITER(arg=None, lineno=235)
07/23/2024 06:57:02 PM - DEBUG - stack ['$52call_function.7']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=56, stack=('$54get_iter.8',), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=56 nstack_initial=1)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=114 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=116, inst=RETURN_VALUE(arg=None, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack ['$const114.0']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=56 nstack_initial=1)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi56.0']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=56 nstack_initial=1)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=56, inst=FOR_ITER(arg=14, lineno=235)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi56.0']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=('$phi56.0', '$56for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=58 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=72 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=3, lineno=239)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=239)
07/23/2024 06:57:02 PM - DEBUG - stack ['$72load_global.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=3, lineno=239)
07/23/2024 06:57:02 PM - DEBUG - stack ['$72load_global.0', '$const74.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=239)
07/23/2024 06:57:02 PM - DEBUG - stack ['$72load_global.0', '$const74.1', '$n76.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=80, inst=GET_ITER(arg=None, lineno=239)
07/23/2024 06:57:02 PM - DEBUG - stack ['$78call_function.3']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=82, stack=('$80get_iter.4',), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=2), State(pc_initial=82 nstack_initial=1)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi58.0', '$phi58.1']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=2)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=58, inst=STORE_FAST(arg=4, lineno=235)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi58.0', '$phi58.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=60, inst=LOAD_GLOBAL(arg=4, lineno=236)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi58.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=236)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi58.0', '$60load_global.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=236)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi58.0', '$60load_global.2', '$states62.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=66, inst=CALL_FUNCTION(arg=2, lineno=236)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi58.0', '$60load_global.2', '$states62.3', '$const64.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=68, inst=POP_TOP(arg=None, lineno=236)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi58.0', '$66call_function.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=70, inst=JUMP_ABSOLUTE(arg=56, lineno=236)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi58.0']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=56, stack=('$phi58.0',), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=56 nstack_initial=1)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi82.0']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=1)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=82, inst=FOR_ITER(arg=30, lineno=239)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi82.0']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi82.0', '$82for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=56 nstack_initial=1), State(pc_initial=114 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi84.0', '$phi84.1']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=84 nstack_initial=2)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=5, lineno=239)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$phi84.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$states86.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$states86.2', '$i88.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=92, inst=BINARY_SUBTRACT(arg=None, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$states86.2', '$i88.3', '$const90.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=94, inst=BINARY_SUBSCR(arg=None, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$states86.2', '$92binary_subtract.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=0, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$94binary_subscr.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$94binary_subscr.6', '$states96.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=240)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$94binary_subscr.6', '$states96.7', '$i98.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=102, inst=LOAD_GLOBAL(arg=4, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$102load_global.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=5, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$102load_global.9', '$states104.10']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=108, inst=CALL_FUNCTION(arg=2, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$102load_global.9', '$states104.10', '$i106.11']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=110, inst=POP_TOP(arg=None, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0', '$108call_function.12']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=112, inst=JUMP_ABSOLUTE(arg=82, lineno=241)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi84.0']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=82, stack=('$phi84.0',), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=1)])
07/23/2024 06:57:02 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:02 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=1): {'$phi56.0'},
             State(pc_initial=58 nstack_initial=2): {'$phi58.1'},
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=1): {'$phi82.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=114 nstack_initial=0): set()})
07/23/2024 06:57:02 PM - DEBUG - defmap: {'$phi56.0': State(pc_initial=36 nstack_initial=0),
 '$phi58.1': State(pc_initial=56 nstack_initial=1),
 '$phi82.0': State(pc_initial=72 nstack_initial=0),
 '$phi84.1': State(pc_initial=82 nstack_initial=1)}
07/23/2024 06:57:02 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=2))},
             '$phi58.0': {('$phi56.0', State(pc_initial=56 nstack_initial=1))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0)),
                          ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi84.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/23/2024 06:57:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=1))},
             '$phi58.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/23/2024 06:57:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/23/2024 06:57:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/23/2024 06:57:02 PM - DEBUG - keep phismap: {'$phi56.0': {('$54get_iter.8', State(pc_initial=36 nstack_initial=0))},
 '$phi58.1': {('$56for_iter.2', State(pc_initial=56 nstack_initial=1))},
 '$phi82.0': {('$80get_iter.4', State(pc_initial=72 nstack_initial=0))},
 '$phi84.1': {('$82for_iter.2', State(pc_initial=82 nstack_initial=1))}}
07/23/2024 06:57:02 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=36 nstack_initial=0): {'$phi56.0': '$54get_iter.8'},
             State(pc_initial=56 nstack_initial=1): {'$phi58.1': '$56for_iter.2'},
             State(pc_initial=72 nstack_initial=0): {'$phi82.0': '$80get_iter.4'},
             State(pc_initial=82 nstack_initial=1): {'$phi84.1': '$82for_iter.2'}})
07/23/2024 06:57:02 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$states2.0'}), (4, {'item': '$states2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$seed14.5'}), (16, {'func': '$12load_global.4', 'args': ['$seed14.5'], 'res': '$16call_function.6'}), (18, {'value': '$16call_function.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$subsequence_start22.8'}), (24, {'func': '$20load_global.7', 'args': ['$subsequence_start22.8'], 'res': '$24call_function.9'}), (26, {'value': '$24call_function.9'}), (28, {'res': '$n28.10'}), (30, {'res': '$const30.11'}), (32, {'lhs': '$n28.10', 'rhs': '$const30.11', 'res': '$32compare_op.12'}), (34, {'pred': '$32compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 114: ()})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$36load_global.0'}), (38, {'res': '$states38.1'}), (40, {'res': '$const40.2'}), (42, {'res': '$seed42.3'}), (44, {'func': '$36load_global.0', 'args': ['$states38.1', '$const40.2', '$seed42.3'], 'res': '$44call_function.4'}), (48, {'res': '$48load_global.5'}), (50, {'res': '$subsequence_start50.6'}), (52, {'func': '$48load_global.5', 'args': ['$subsequence_start50.6'], 'res': '$52call_function.7'}), (54, {'value': '$52call_function.7', 'res': '$54get_iter.8'})), outgoing_phis={'$phi56.0': '$54get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: ('$54get_iter.8',)})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=56 nstack_initial=1):
AdaptBlockInfo(insts=((56, {'iterator': '$phi56.0', 'pair': '$56for_iter.1', 'indval': '$56for_iter.2', 'pred': '$56for_iter.3'}),), outgoing_phis={'$phi58.1': '$56for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: (), 58: ('$phi56.0', '$56for_iter.2')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=58 nstack_initial=2):
AdaptBlockInfo(insts=((58, {'value': '$phi58.1'}), (60, {'res': '$60load_global.2'}), (62, {'res': '$states62.3'}), (64, {'res': '$const64.4'}), (66, {'func': '$60load_global.2', 'args': ['$states62.3', '$const64.4'], 'res': '$66call_function.5'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: ('$phi58.0',)})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$72load_global.0'}), (74, {'res': '$const74.1'}), (76, {'res': '$n76.2'}), (78, {'func': '$72load_global.0', 'args': ['$const74.1', '$n76.2'], 'res': '$78call_function.3'}), (80, {'value': '$78call_function.3', 'res': '$80get_iter.4'})), outgoing_phis={'$phi82.0': '$80get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$80get_iter.4',)})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=82 nstack_initial=1):
AdaptBlockInfo(insts=((82, {'iterator': '$phi82.0', 'pair': '$82for_iter.1', 'indval': '$82for_iter.2', 'pred': '$82for_iter.3'}),), outgoing_phis={'$phi84.1': '$82for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 84: ('$phi82.0', '$82for_iter.2')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$states86.2'}), (88, {'res': '$i88.3'}), (90, {'res': '$const90.4'}), (92, {'lhs': '$i88.3', 'rhs': '$const90.4', 'res': '$92binary_subtract.5'}), (94, {'index': '$92binary_subtract.5', 'target': '$states86.2', 'res': '$94binary_subscr.6'}), (96, {'res': '$states96.7'}), (98, {'res': '$i98.8'}), (100, {'target': '$states96.7', 'index': '$i98.8', 'value': '$94binary_subscr.6'}), (102, {'res': '$102load_global.9'}), (104, {'res': '$states104.10'}), (106, {'res': '$i106.11'}), (108, {'func': '$102load_global.9', 'args': ['$states104.10', '$i106.11'], 'res': '$108call_function.12'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$phi84.0',)})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$const114.0'}), (116, {'retval': '$const114.0', 'castval': '$116return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:02 PM - DEBUG - label 0:
    states = arg(0, name=states)             ['states']
    seed = arg(1, name=seed)                 ['seed']
    subsequence_start = arg(2, name=subsequence_start) ['subsequence_start']
    $4load_attr.1 = getattr(value=states, attr=shape) ['$4load_attr.1', 'states']
    $const6.2 = const(int, 0)                ['$const6.2']
    n = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$const6.2', 'n']
    $12load_global.4 = global(uint64: uint64) ['$12load_global.4']
    seed.1 = call $12load_global.4(seed, func=$12load_global.4, args=[Var(seed, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.4', 'seed', 'seed.1']
    $20load_global.7 = global(uint64: uint64) ['$20load_global.7']
    subsequence_start.1 = call $20load_global.7(subsequence_start, func=$20load_global.7, args=[Var(subsequence_start, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', 'subsequence_start', 'subsequence_start.1']
    $const30.11 = const(int, 1)              ['$const30.11']
    $32compare_op.12 = n >= $const30.11      ['$32compare_op.12', '$const30.11', 'n']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.12, func=bool34, args=(Var($32compare_op.12, random.py:231),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.12', '$34pred', 'bool34']
    branch $34pred, 36, 114                  ['$34pred']
label 36:
    $36load_global.0 = global(init_xoroshiro128p_state: CPUDispatcher(<function init_xoroshiro128p_state at 0x000001EDAC503790>)) ['$36load_global.0']
    $const40.2 = const(int, 0)               ['$const40.2']
    $44call_function.4 = call $36load_global.0(states, $const40.2, seed.1, func=$36load_global.0, args=[Var(states, random.py:225), Var($const40.2, random.py:232), Var(seed.1, random.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.0', '$44call_function.4', '$const40.2', 'seed.1', 'states']
    $48load_global.5 = global(range: <class 'range'>) ['$48load_global.5']
    $52call_function.7 = call $48load_global.5(subsequence_start.1, func=$48load_global.5, args=[Var(subsequence_start.1, random.py:229)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.5', '$52call_function.7', 'subsequence_start.1']
    $54get_iter.8 = getiter(value=$52call_function.7) ['$52call_function.7', '$54get_iter.8']
    $phi56.0 = $54get_iter.8                 ['$54get_iter.8', '$phi56.0']
    jump 56                                  []
label 56:
    $56for_iter.1 = iternext(value=$phi56.0) ['$56for_iter.1', '$phi56.0']
    $56for_iter.2 = pair_first(value=$56for_iter.1) ['$56for_iter.1', '$56for_iter.2']
    $56for_iter.3 = pair_second(value=$56for_iter.1) ['$56for_iter.1', '$56for_iter.3']
    $phi58.1 = $56for_iter.2                 ['$56for_iter.2', '$phi58.1']
    branch $56for_iter.3, 58, 72             ['$56for_iter.3']
label 58:
    _ = $phi58.1                             ['$phi58.1', '_']
    $60load_global.2 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001EDAC503CA0>)) ['$60load_global.2']
    $const64.4 = const(int, 0)               ['$const64.4']
    $66call_function.5 = call $60load_global.2(states, $const64.4, func=$60load_global.2, args=[Var(states, random.py:225), Var($const64.4, random.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_global.2', '$66call_function.5', '$const64.4', 'states']
    jump 56                                  []
label 72:
    $72load_global.0 = global(range: <class 'range'>) ['$72load_global.0']
    $const74.1 = const(int, 1)               ['$const74.1']
    $78call_function.3 = call $72load_global.0($const74.1, n, func=$72load_global.0, args=[Var($const74.1, random.py:239), Var(n, random.py:227)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.0', '$78call_function.3', '$const74.1', 'n']
    $80get_iter.4 = getiter(value=$78call_function.3) ['$78call_function.3', '$80get_iter.4']
    $phi82.0 = $80get_iter.4                 ['$80get_iter.4', '$phi82.0']
    jump 82                                  []
label 82:
    $82for_iter.1 = iternext(value=$phi82.0) ['$82for_iter.1', '$phi82.0']
    $82for_iter.2 = pair_first(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.2']
    $82for_iter.3 = pair_second(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.3']
    $phi84.1 = $82for_iter.2                 ['$82for_iter.2', '$phi84.1']
    branch $82for_iter.3, 84, 114            ['$82for_iter.3']
label 84:
    i = $phi84.1                             ['$phi84.1', 'i']
    $const90.4 = const(int, 1)               ['$const90.4']
    $92binary_subtract.5 = i - $const90.4    ['$92binary_subtract.5', '$const90.4', 'i']
    $94binary_subscr.6 = getitem(value=states, index=$92binary_subtract.5, fn=<built-in function getitem>) ['$92binary_subtract.5', '$94binary_subscr.6', 'states']
    states[i] = $94binary_subscr.6           ['$94binary_subscr.6', 'i', 'states']
    $102load_global.9 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001EDAC503CA0>)) ['$102load_global.9']
    $108call_function.12 = call $102load_global.9(states, i, func=$102load_global.9, args=[Var(states, random.py:225), Var(i, random.py:239)], kws=(), vararg=None, varkwarg=None, target=None) ['$102load_global.9', '$108call_function.12', 'i', 'states']
    jump 82                                  []
label 114:
    $const114.0 = const(NoneType, None)      ['$const114.0']
    $116return_value.1 = cast(value=$const114.0) ['$116return_value.1', '$const114.0']
    return $116return_value.1                ['$116return_value.1']

07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:02 PM - DEBUG - on stmt: seed = arg(1, name=seed)
07/23/2024 06:57:02 PM - DEBUG - on stmt: subsequence_start = arg(2, name=subsequence_start)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $4load_attr.1 = getattr(value=states, attr=shape)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const6.2 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $12load_global.4 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: seed.1 = call $12load_global.4(seed, func=$12load_global.4, args=[Var(seed, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $20load_global.7 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: subsequence_start.1 = call $20load_global.7(subsequence_start, func=$20load_global.7, args=[Var(subsequence_start, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const30.11 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $32compare_op.12 = n >= $const30.11
07/23/2024 06:57:02 PM - DEBUG - on stmt: bool34 = global(bool: <class 'bool'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $34pred = call bool34($32compare_op.12, func=bool34, args=(Var($32compare_op.12, random.py:231),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $34pred, 36, 114
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $36load_global.0 = global(init_xoroshiro128p_state: CPUDispatcher(<function init_xoroshiro128p_state at 0x000001EDAC503790>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const40.2 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $44call_function.4 = call $36load_global.0(states, $const40.2, seed.1, func=$36load_global.0, args=[Var(states, random.py:225), Var($const40.2, random.py:232), Var(seed.1, random.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $48load_global.5 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $52call_function.7 = call $48load_global.5(subsequence_start.1, func=$48load_global.5, args=[Var(subsequence_start.1, random.py:229)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $54get_iter.8 = getiter(value=$52call_function.7)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi56.0 = $54get_iter.8
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 56
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 56
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $56for_iter.1 = iternext(value=$phi56.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $56for_iter.2 = pair_first(value=$56for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $56for_iter.3 = pair_second(value=$56for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi58.1 = $56for_iter.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $56for_iter.3, 58, 72
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 58
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: _ = $phi58.1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $60load_global.2 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001EDAC503CA0>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const64.4 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $66call_function.5 = call $60load_global.2(states, $const64.4, func=$60load_global.2, args=[Var(states, random.py:225), Var($const64.4, random.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 56
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 72
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $72load_global.0 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const74.1 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $78call_function.3 = call $72load_global.0($const74.1, n, func=$72load_global.0, args=[Var($const74.1, random.py:239), Var(n, random.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $80get_iter.4 = getiter(value=$78call_function.3)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi82.0 = $80get_iter.4
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 82
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 82
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82for_iter.1 = iternext(value=$phi82.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi84.1 = $82for_iter.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $82for_iter.3, 84, 114
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 84
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: i = $phi84.1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const90.4 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $92binary_subtract.5 = i - $const90.4
07/23/2024 06:57:02 PM - DEBUG - on stmt: $94binary_subscr.6 = getitem(value=states, index=$92binary_subtract.5, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: states[i] = $94binary_subscr.6
07/23/2024 06:57:02 PM - DEBUG - on stmt: $102load_global.9 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001EDAC503CA0>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $108call_function.12 = call $102load_global.9(states, i, func=$102load_global.9, args=[Var(states, random.py:225), Var(i, random.py:239)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 82
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 114
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const114.0 = const(NoneType, None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $116return_value.1 = cast(value=$const114.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: return $116return_value.1
07/23/2024 06:57:02 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$102load_global.9': [(<numba.core.ir.Assign object at 0x000001EE1491D580>,
                                    84)],
             '$108call_function.12': [(<numba.core.ir.Assign object at 0x000001EE1491D9A0>,
                                       84)],
             '$116return_value.1': [(<numba.core.ir.Assign object at 0x000001EE1491DB80>,
                                     114)],
             '$12load_global.4': [(<numba.core.ir.Assign object at 0x000001EE14910100>,
                                   0)],
             '$20load_global.7': [(<numba.core.ir.Assign object at 0x000001EE14910640>,
                                   0)],
             '$32compare_op.12': [(<numba.core.ir.Assign object at 0x000001EE14910E50>,
                                   0)],
             '$34pred': [(<numba.core.ir.Assign object at 0x000001EE14916100>,
                          0)],
             '$36load_global.0': [(<numba.core.ir.Assign object at 0x000001EE149055B0>,
                                   36)],
             '$44call_function.4': [(<numba.core.ir.Assign object at 0x000001EE149166A0>,
                                     36)],
             '$48load_global.5': [(<numba.core.ir.Assign object at 0x000001EE149167C0>,
                                   36)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x000001EE149051F0>,
                                0)],
             '$52call_function.7': [(<numba.core.ir.Assign object at 0x000001EE14916AC0>,
                                     36)],
             '$54get_iter.8': [(<numba.core.ir.Assign object at 0x000001EE14916BE0>,
                                36)],
             '$56for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE14916E50>,
                                56)],
             '$56for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14916F70>,
                                56)],
             '$56for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE149190D0>,
                                56)],
             '$60load_global.2': [(<numba.core.ir.Assign object at 0x000001EE14919520>,
                                   58)],
             '$66call_function.5': [(<numba.core.ir.Assign object at 0x000001EE149199A0>,
                                     58)],
             '$72load_global.0': [(<numba.core.ir.Assign object at 0x000001EE14919BE0>,
                                   72)],
             '$78call_function.3': [(<numba.core.ir.Assign object at 0x000001EE1491B0A0>,
                                     72)],
             '$80get_iter.4': [(<numba.core.ir.Assign object at 0x000001EE1491B1C0>,
                                72)],
             '$82for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE1491B4F0>,
                                82)],
             '$82for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE1491B610>,
                                82)],
             '$82for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE1491B730>,
                                82)],
             '$92binary_subtract.5': [(<numba.core.ir.Assign object at 0x000001EE1491BF70>,
                                       84)],
             '$94binary_subscr.6': [(<numba.core.ir.Assign object at 0x000001EE1491D130>,
                                     84)],
             '$const114.0': [(<numba.core.ir.Assign object at 0x000001EE1491D730>,
                              114)],
             '$const30.11': [(<numba.core.ir.Assign object at 0x000001EE14910CA0>,
                              0)],
             '$const40.2': [(<numba.core.ir.Assign object at 0x000001EE149163A0>,
                             36)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x000001EE14905370>,
                            0)],
             '$const64.4': [(<numba.core.ir.Assign object at 0x000001EE149197C0>,
                             58)],
             '$const74.1': [(<numba.core.ir.Assign object at 0x000001EE14919D60>,
                             72)],
             '$const90.4': [(<numba.core.ir.Assign object at 0x000001EE1491BDC0>,
                             84)],
             '$phi56.0': [(<numba.core.ir.Assign object at 0x000001EE14916220>,
                           36)],
             '$phi58.1': [(<numba.core.ir.Assign object at 0x000001EE14916D90>,
                           56)],
             '$phi82.0': [(<numba.core.ir.Assign object at 0x000001EE14919F10>,
                           72)],
             '$phi84.1': [(<numba.core.ir.Assign object at 0x000001EE1491B430>,
                           82)],
             '_': [(<numba.core.ir.Assign object at 0x000001EE149193A0>, 58)],
             'bool34': [(<numba.core.ir.Assign object at 0x000001EE14910FA0>,
                         0)],
             'i': [(<numba.core.ir.Assign object at 0x000001EE1491BA00>, 84)],
             'n': [(<numba.core.ir.Assign object at 0x000001EE14928BE0>, 0)],
             'seed': [(<numba.core.ir.Assign object at 0x000001EE14905970>, 0)],
             'seed.1': [(<numba.core.ir.Assign object at 0x000001EE14910400>,
                         0)],
             'states': [(<numba.core.ir.Assign object at 0x000001EE14905BB0>,
                         0)],
             'subsequence_start': [(<numba.core.ir.Assign object at 0x000001EE14905730>,
                                    0)],
             'subsequence_start.1': [(<numba.core.ir.Assign object at 0x000001EE14910940>,
                                      0)]})
07/23/2024 06:57:02 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE148FEDF0>
07/23/2024 06:57:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=46)
           2	LOAD_GLOBAL(arg=0, lineno=60)
           4	LOAD_FAST(arg=1, lineno=60)
           6	CALL_FUNCTION(arg=1, lineno=60)
           8	STORE_FAST(arg=1, lineno=60)
          10	LOAD_GLOBAL(arg=1, lineno=61)
          12	LOAD_FAST(arg=2, lineno=61)
          14	CALL_FUNCTION(arg=1, lineno=61)
          16	STORE_FAST(arg=2, lineno=61)
          18	LOAD_FAST(arg=2, lineno=63)
          20	LOAD_GLOBAL(arg=1, lineno=63)
          22	LOAD_CONST(arg=1, lineno=63)
          24	CALL_FUNCTION(arg=1, lineno=63)
          26	BINARY_ADD(arg=None, lineno=63)
          28	STORE_FAST(arg=3, lineno=63)
          30	LOAD_FAST(arg=3, lineno=64)
          32	LOAD_FAST(arg=3, lineno=64)
          34	LOAD_GLOBAL(arg=2, lineno=64)
          36	LOAD_CONST(arg=2, lineno=64)
          38	CALL_FUNCTION(arg=1, lineno=64)
          40	BINARY_RSHIFT(arg=None, lineno=64)
          42	BINARY_XOR(arg=None, lineno=64)
          44	LOAD_GLOBAL(arg=1, lineno=64)
          46	LOAD_CONST(arg=3, lineno=64)
          48	CALL_FUNCTION(arg=1, lineno=64)
          50	BINARY_MULTIPLY(arg=None, lineno=64)
          52	STORE_FAST(arg=3, lineno=64)
          54	LOAD_FAST(arg=3, lineno=65)
          56	LOAD_FAST(arg=3, lineno=65)
          58	LOAD_GLOBAL(arg=2, lineno=65)
          60	LOAD_CONST(arg=4, lineno=65)
          62	CALL_FUNCTION(arg=1, lineno=65)
          64	BINARY_RSHIFT(arg=None, lineno=65)
          66	BINARY_XOR(arg=None, lineno=65)
          68	LOAD_GLOBAL(arg=1, lineno=65)
          70	LOAD_CONST(arg=5, lineno=65)
          72	CALL_FUNCTION(arg=1, lineno=65)
          74	BINARY_MULTIPLY(arg=None, lineno=65)
          76	STORE_FAST(arg=3, lineno=65)
          78	LOAD_FAST(arg=3, lineno=66)
          80	LOAD_FAST(arg=3, lineno=66)
          82	LOAD_GLOBAL(arg=2, lineno=66)
          84	LOAD_CONST(arg=6, lineno=66)
          86	CALL_FUNCTION(arg=1, lineno=66)
          88	BINARY_RSHIFT(arg=None, lineno=66)
          90	BINARY_XOR(arg=None, lineno=66)
          92	STORE_FAST(arg=3, lineno=66)
          94	LOAD_FAST(arg=3, lineno=68)
          96	LOAD_FAST(arg=0, lineno=68)
          98	LOAD_FAST(arg=1, lineno=68)
         100	BINARY_SUBSCR(arg=None, lineno=68)
         102	LOAD_CONST(arg=7, lineno=68)
         104	STORE_SUBSCR(arg=None, lineno=68)
         106	LOAD_FAST(arg=3, lineno=69)
         108	LOAD_FAST(arg=0, lineno=69)
         110	LOAD_FAST(arg=1, lineno=69)
         112	BINARY_SUBSCR(arg=None, lineno=69)
         114	LOAD_CONST(arg=8, lineno=69)
         116	STORE_SUBSCR(arg=None, lineno=69)
         118	LOAD_CONST(arg=9, lineno=69)
         120	RETURN_VALUE(arg=None, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=46)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=60)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=60)
07/23/2024 06:57:02 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=60)
07/23/2024 06:57:02 PM - DEBUG - stack ['$2load_global.0', '$index4.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=60)
07/23/2024 06:57:02 PM - DEBUG - stack ['$6call_function.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=61)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=61)
07/23/2024 06:57:02 PM - DEBUG - stack ['$10load_global.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=61)
07/23/2024 06:57:02 PM - DEBUG - stack ['$10load_global.3', '$seed12.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=2, lineno=61)
07/23/2024 06:57:02 PM - DEBUG - stack ['$14call_function.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=63)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=63)
07/23/2024 06:57:02 PM - DEBUG - stack ['$seed18.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=63)
07/23/2024 06:57:02 PM - DEBUG - stack ['$seed18.6', '$20load_global.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=24, inst=CALL_FUNCTION(arg=1, lineno=63)
07/23/2024 06:57:02 PM - DEBUG - stack ['$seed18.6', '$20load_global.7', '$const22.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=63)
07/23/2024 06:57:02 PM - DEBUG - stack ['$seed18.6', '$24call_function.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=3, lineno=63)
07/23/2024 06:57:02 PM - DEBUG - stack ['$26binary_add.10']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z30.11']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=34, inst=LOAD_GLOBAL(arg=2, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z30.11', '$z32.12']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z30.11', '$z32.12', '$34load_global.13']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z30.11', '$z32.12', '$34load_global.13', '$const36.14']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=40, inst=BINARY_RSHIFT(arg=None, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z30.11', '$z32.12', '$38call_function.15']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=42, inst=BINARY_XOR(arg=None, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z30.11', '$40binary_rshift.16']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$42binary_xor.17']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=3, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$42binary_xor.17', '$44load_global.18']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$42binary_xor.17', '$44load_global.18', '$const46.19']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=50, inst=BINARY_MULTIPLY(arg=None, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$42binary_xor.17', '$48call_function.20']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=52, inst=STORE_FAST(arg=3, lineno=64)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50binary_multiply.21']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=56, inst=LOAD_FAST(arg=3, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z54.22']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=2, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z54.22', '$z56.23']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=4, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z54.22', '$z56.23', '$58load_global.24']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z54.22', '$z56.23', '$58load_global.24', '$const60.25']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=64, inst=BINARY_RSHIFT(arg=None, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z54.22', '$z56.23', '$62call_function.26']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=66, inst=BINARY_XOR(arg=None, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z54.22', '$64binary_rshift.27']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$66binary_xor.28']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=5, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$66binary_xor.28', '$68load_global.29']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$66binary_xor.28', '$68load_global.29', '$const70.30']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=74, inst=BINARY_MULTIPLY(arg=None, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$66binary_xor.28', '$72call_function.31']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=76, inst=STORE_FAST(arg=3, lineno=65)
07/23/2024 06:57:02 PM - DEBUG - stack ['$74binary_multiply.32']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=3, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z78.33']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=2, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z78.33', '$z80.34']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=6, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z78.33', '$z80.34', '$82load_global.35']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=86, inst=CALL_FUNCTION(arg=1, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z78.33', '$z80.34', '$82load_global.35', '$const84.36']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=88, inst=BINARY_RSHIFT(arg=None, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z78.33', '$z80.34', '$86call_function.37']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=90, inst=BINARY_XOR(arg=None, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z78.33', '$88binary_rshift.38']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=3, lineno=66)
07/23/2024 06:57:02 PM - DEBUG - stack ['$90binary_xor.39']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=68)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z94.40']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=1, lineno=68)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z94.40', '$states96.41']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=100, inst=BINARY_SUBSCR(arg=None, lineno=68)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z94.40', '$states96.41', '$index98.42']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=68)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z94.40', '$100binary_subscr.43']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=68)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z94.40', '$100binary_subscr.43', '$const102.44']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z106.45']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z106.45', '$states108.46']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z106.45', '$states108.46', '$index110.47']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=114, inst=LOAD_CONST(arg=8, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z106.45', '$112binary_subscr.48']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=116, inst=STORE_SUBSCR(arg=None, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack ['$z106.45', '$112binary_subscr.48', '$const114.49']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=9, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=69)
07/23/2024 06:57:02 PM - DEBUG - stack ['$const118.50']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:02 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:02 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:02 PM - DEBUG - defmap: {}
07/23/2024 06:57:02 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:02 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:02 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:02 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$seed12.4'}), (14, {'func': '$10load_global.3', 'args': ['$seed12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$seed18.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$const22.8'}), (24, {'func': '$20load_global.7', 'args': ['$const22.8'], 'res': '$24call_function.9'}), (26, {'lhs': '$seed18.6', 'rhs': '$24call_function.9', 'res': '$26binary_add.10'}), (28, {'value': '$26binary_add.10'}), (30, {'res': '$z30.11'}), (32, {'res': '$z32.12'}), (34, {'res': '$34load_global.13'}), (36, {'res': '$const36.14'}), (38, {'func': '$34load_global.13', 'args': ['$const36.14'], 'res': '$38call_function.15'}), (40, {'lhs': '$z32.12', 'rhs': '$38call_function.15', 'res': '$40binary_rshift.16'}), (42, {'lhs': '$z30.11', 'rhs': '$40binary_rshift.16', 'res': '$42binary_xor.17'}), (44, {'res': '$44load_global.18'}), (46, {'res': '$const46.19'}), (48, {'func': '$44load_global.18', 'args': ['$const46.19'], 'res': '$48call_function.20'}), (50, {'lhs': '$42binary_xor.17', 'rhs': '$48call_function.20', 'res': '$50binary_multiply.21'}), (52, {'value': '$50binary_multiply.21'}), (54, {'res': '$z54.22'}), (56, {'res': '$z56.23'}), (58, {'res': '$58load_global.24'}), (60, {'res': '$const60.25'}), (62, {'func': '$58load_global.24', 'args': ['$const60.25'], 'res': '$62call_function.26'}), (64, {'lhs': '$z56.23', 'rhs': '$62call_function.26', 'res': '$64binary_rshift.27'}), (66, {'lhs': '$z54.22', 'rhs': '$64binary_rshift.27', 'res': '$66binary_xor.28'}), (68, {'res': '$68load_global.29'}), (70, {'res': '$const70.30'}), (72, {'func': '$68load_global.29', 'args': ['$const70.30'], 'res': '$72call_function.31'}), (74, {'lhs': '$66binary_xor.28', 'rhs': '$72call_function.31', 'res': '$74binary_multiply.32'}), (76, {'value': '$74binary_multiply.32'}), (78, {'res': '$z78.33'}), (80, {'res': '$z80.34'}), (82, {'res': '$82load_global.35'}), (84, {'res': '$const84.36'}), (86, {'func': '$82load_global.35', 'args': ['$const84.36'], 'res': '$86call_function.37'}), (88, {'lhs': '$z80.34', 'rhs': '$86call_function.37', 'res': '$88binary_rshift.38'}), (90, {'lhs': '$z78.33', 'rhs': '$88binary_rshift.38', 'res': '$90binary_xor.39'}), (92, {'value': '$90binary_xor.39'}), (94, {'res': '$z94.40'}), (96, {'res': '$states96.41'}), (98, {'res': '$index98.42'}), (100, {'index': '$index98.42', 'target': '$states96.41', 'res': '$100binary_subscr.43'}), (102, {'res': '$const102.44'}), (104, {'target': '$100binary_subscr.43', 'index': '$const102.44', 'value': '$z94.40'}), (106, {'res': '$z106.45'}), (108, {'res': '$states108.46'}), (110, {'res': '$index110.47'}), (112, {'index': '$index110.47', 'target': '$states108.46', 'res': '$112binary_subscr.48'}), (114, {'res': '$const114.49'}), (116, {'target': '$112binary_subscr.48', 'index': '$const114.49', 'value': '$z106.45'}), (118, {'res': '$const118.50'}), (120, {'retval': '$const118.50', 'castval': '$120return_value.51'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:02 PM - DEBUG - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    seed = arg(2, name=seed)                 ['seed']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $10load_global.3 = global(uint64: uint64) ['$10load_global.3']
    seed.1 = call $10load_global.3(seed, func=$10load_global.3, args=[Var(seed, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', 'seed', 'seed.1']
    $20load_global.7 = global(uint64: uint64) ['$20load_global.7']
    $const22.8 = const(int, 11400714819323198485) ['$const22.8']
    $24call_function.9 = call $20load_global.7($const22.8, func=$20load_global.7, args=[Var($const22.8, random.py:63)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', '$24call_function.9', '$const22.8']
    z = seed.1 + $24call_function.9          ['$24call_function.9', 'seed.1', 'z']
    $34load_global.13 = global(uint32: uint32) ['$34load_global.13']
    $const36.14 = const(int, 30)             ['$const36.14']
    $38call_function.15 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.13', '$38call_function.15', '$const36.14']
    $40binary_rshift.16 = z >> $38call_function.15 ['$38call_function.15', '$40binary_rshift.16', 'z']
    $42binary_xor.17 = z ^ $40binary_rshift.16 ['$40binary_rshift.16', '$42binary_xor.17', 'z']
    $44load_global.18 = global(uint64: uint64) ['$44load_global.18']
    $const46.19 = const(int, 13787848793156543929) ['$const46.19']
    $48call_function.20 = call $44load_global.18($const46.19, func=$44load_global.18, args=[Var($const46.19, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_global.18', '$48call_function.20', '$const46.19']
    z.1 = $42binary_xor.17 * $48call_function.20 ['$42binary_xor.17', '$48call_function.20', 'z.1']
    $58load_global.24 = global(uint32: uint32) ['$58load_global.24']
    $const60.25 = const(int, 27)             ['$const60.25']
    $62call_function.26 = call $58load_global.24($const60.25, func=$58load_global.24, args=[Var($const60.25, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.24', '$62call_function.26', '$const60.25']
    $64binary_rshift.27 = z.1 >> $62call_function.26 ['$62call_function.26', '$64binary_rshift.27', 'z.1']
    $66binary_xor.28 = z.1 ^ $64binary_rshift.27 ['$64binary_rshift.27', '$66binary_xor.28', 'z.1']
    $68load_global.29 = global(uint64: uint64) ['$68load_global.29']
    $const70.30 = const(int, 10723151780598845931) ['$const70.30']
    $72call_function.31 = call $68load_global.29($const70.30, func=$68load_global.29, args=[Var($const70.30, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.29', '$72call_function.31', '$const70.30']
    z.2 = $66binary_xor.28 * $72call_function.31 ['$66binary_xor.28', '$72call_function.31', 'z.2']
    $82load_global.35 = global(uint32: uint32) ['$82load_global.35']
    $const84.36 = const(int, 31)             ['$const84.36']
    $86call_function.37 = call $82load_global.35($const84.36, func=$82load_global.35, args=[Var($const84.36, random.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$82load_global.35', '$86call_function.37', '$const84.36']
    $88binary_rshift.38 = z.2 >> $86call_function.37 ['$86call_function.37', '$88binary_rshift.38', 'z.2']
    z.3 = z.2 ^ $88binary_rshift.38          ['$88binary_rshift.38', 'z.2', 'z.3']
    $100binary_subscr.43 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$100binary_subscr.43', 'index.1', 'states']
    $const102.44 = const(str, s0)            ['$const102.44']
    $100binary_subscr.43[$const102.44] = z.3 ['$100binary_subscr.43', '$const102.44', 'z.3']
    $112binary_subscr.48 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.48', 'index.1', 'states']
    $const114.49 = const(str, s1)            ['$const114.49']
    $112binary_subscr.48[$const114.49] = z.3 ['$112binary_subscr.48', '$const114.49', 'z.3']
    $const118.50 = const(NoneType, None)     ['$const118.50']
    $120return_value.51 = cast(value=$const118.50) ['$120return_value.51', '$const118.50']
    return $120return_value.51               ['$120return_value.51']

07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14952700>
07/23/2024 06:57:02 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:02 PM - DEBUG - on stmt: seed = arg(2, name=seed)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: seed.1 = call $10load_global.3(seed, func=$10load_global.3, args=[Var(seed, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $20load_global.7 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const22.8 = const(int, 11400714819323198485)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $24call_function.9 = call $20load_global.7($const22.8, func=$20load_global.7, args=[Var($const22.8, random.py:63)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: z = seed.1 + $24call_function.9
07/23/2024 06:57:02 PM - DEBUG - on stmt: $34load_global.13 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const36.14 = const(int, 30)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $38call_function.15 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $40binary_rshift.16 = z >> $38call_function.15
07/23/2024 06:57:02 PM - DEBUG - on stmt: $42binary_xor.17 = z ^ $40binary_rshift.16
07/23/2024 06:57:02 PM - DEBUG - on stmt: $44load_global.18 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const46.19 = const(int, 13787848793156543929)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $48call_function.20 = call $44load_global.18($const46.19, func=$44load_global.18, args=[Var($const46.19, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: z.1 = $42binary_xor.17 * $48call_function.20
07/23/2024 06:57:02 PM - DEBUG - on stmt: $58load_global.24 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const60.25 = const(int, 27)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62call_function.26 = call $58load_global.24($const60.25, func=$58load_global.24, args=[Var($const60.25, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $64binary_rshift.27 = z.1 >> $62call_function.26
07/23/2024 06:57:02 PM - DEBUG - on stmt: $66binary_xor.28 = z.1 ^ $64binary_rshift.27
07/23/2024 06:57:02 PM - DEBUG - on stmt: $68load_global.29 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const70.30 = const(int, 10723151780598845931)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $72call_function.31 = call $68load_global.29($const70.30, func=$68load_global.29, args=[Var($const70.30, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: z.2 = $66binary_xor.28 * $72call_function.31
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82load_global.35 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const84.36 = const(int, 31)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $86call_function.37 = call $82load_global.35($const84.36, func=$82load_global.35, args=[Var($const84.36, random.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $88binary_rshift.38 = z.2 >> $86call_function.37
07/23/2024 06:57:02 PM - DEBUG - on stmt: z.3 = z.2 ^ $88binary_rshift.38
07/23/2024 06:57:02 PM - DEBUG - on stmt: $100binary_subscr.43 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const102.44 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $100binary_subscr.43['s0'] = z.3
07/23/2024 06:57:02 PM - DEBUG - on stmt: $112binary_subscr.48 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const114.49 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $112binary_subscr.48['s1'] = z.3
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const118.50 = const(NoneType, None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $120return_value.51 = cast(value=$const118.50)
07/23/2024 06:57:02 PM - DEBUG - on stmt: return $120return_value.51
07/23/2024 06:57:02 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$100binary_subscr.43': [(<numba.core.ir.Assign object at 0x000001EE149617C0>,
                                       0)],
             '$10load_global.3': [(<numba.core.ir.Assign object at 0x000001EE14954AF0>,
                                   0)],
             '$112binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001EE14961EE0>,
                                       0)],
             '$120return_value.51': [(<numba.core.ir.Assign object at 0x000001EE14963430>,
                                      0)],
             '$20load_global.7': [(<numba.core.ir.Assign object at 0x000001EE14954F70>,
                                   0)],
             '$24call_function.9': [(<numba.core.ir.Assign object at 0x000001EE14952310>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE149281F0>,
                                  0)],
             '$34load_global.13': [(<numba.core.ir.Assign object at 0x000001EE14952910>,
                                    0)],
             '$38call_function.15': [(<numba.core.ir.Assign object at 0x000001EE14952C70>,
                                      0)],
             '$40binary_rshift.16': [(<numba.core.ir.Assign object at 0x000001EE14952DC0>,
                                      0)],
             '$42binary_xor.17': [(<numba.core.ir.Assign object at 0x000001EE14952F40>,
                                   0)],
             '$44load_global.18': [(<numba.core.ir.Assign object at 0x000001EE1495C0D0>,
                                    0)],
             '$48call_function.20': [(<numba.core.ir.Assign object at 0x000001EE1495C430>,
                                      0)],
             '$58load_global.24': [(<numba.core.ir.Assign object at 0x000001EE1495CA30>,
                                    0)],
             '$62call_function.26': [(<numba.core.ir.Assign object at 0x000001EE1495CD90>,
                                      0)],
             '$64binary_rshift.27': [(<numba.core.ir.Assign object at 0x000001EE1495CEE0>,
                                      0)],
             '$66binary_xor.28': [(<numba.core.ir.Assign object at 0x000001EE1495E0A0>,
                                   0)],
             '$68load_global.29': [(<numba.core.ir.Assign object at 0x000001EE1495E1F0>,
                                    0)],
             '$72call_function.31': [(<numba.core.ir.Assign object at 0x000001EE1495E550>,
                                      0)],
             '$82load_global.35': [(<numba.core.ir.Assign object at 0x000001EE1495EB50>,
                                    0)],
             '$86call_function.37': [(<numba.core.ir.Assign object at 0x000001EE1495EEB0>,
                                      0)],
             '$88binary_rshift.38': [(<numba.core.ir.Assign object at 0x000001EE14961040>,
                                      0)],
             '$const102.44': [(<numba.core.ir.Assign object at 0x000001EE14961910>,
                               0)],
             '$const114.49': [(<numba.core.ir.Assign object at 0x000001EE14963070>,
                               0)],
             '$const118.50': [(<numba.core.ir.Assign object at 0x000001EE149632B0>,
                               0)],
             '$const22.8': [(<numba.core.ir.Assign object at 0x000001EE14952130>,
                             0)],
             '$const36.14': [(<numba.core.ir.Assign object at 0x000001EE14952A90>,
                              0)],
             '$const46.19': [(<numba.core.ir.Assign object at 0x000001EE1495C250>,
                              0)],
             '$const60.25': [(<numba.core.ir.Assign object at 0x000001EE1495CBB0>,
                              0)],
             '$const70.30': [(<numba.core.ir.Assign object at 0x000001EE1495E370>,
                              0)],
             '$const84.36': [(<numba.core.ir.Assign object at 0x000001EE1495ECD0>,
                              0)],
             'index': [(<numba.core.ir.Assign object at 0x000001EE14949C40>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001EE14928E80>,
                          0)],
             'seed': [(<numba.core.ir.Assign object at 0x000001EE14949F10>, 0)],
             'seed.1': [(<numba.core.ir.Assign object at 0x000001EE14954790>,
                         0)],
             'states': [(<numba.core.ir.Assign object at 0x000001EE14949A90>,
                         0)],
             'z': [(<numba.core.ir.Assign object at 0x000001EE14952460>, 0)],
             'z.1': [(<numba.core.ir.Assign object at 0x000001EE1495C580>, 0)],
             'z.2': [(<numba.core.ir.Assign object at 0x000001EE1495E6A0>, 0)],
             'z.3': [(<numba.core.ir.Assign object at 0x000001EE149611C0>, 0)]})
07/23/2024 06:57:02 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE14952700>
07/23/2024 06:57:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=102)
           2	LOAD_GLOBAL(arg=0, lineno=111)
           4	LOAD_FAST(arg=1, lineno=111)
           6	CALL_FUNCTION(arg=1, lineno=111)
           8	STORE_FAST(arg=1, lineno=111)
          10	LOAD_GLOBAL(arg=1, lineno=113)
          12	LOAD_CONST(arg=1, lineno=113)
          14	CALL_FUNCTION(arg=1, lineno=113)
          16	LOAD_GLOBAL(arg=1, lineno=113)
          18	LOAD_CONST(arg=2, lineno=113)
          20	CALL_FUNCTION(arg=1, lineno=113)
          22	BUILD_TUPLE(arg=2, lineno=113)
          24	STORE_FAST(arg=2, lineno=113)
          26	LOAD_GLOBAL(arg=1, lineno=115)
          28	LOAD_CONST(arg=3, lineno=115)
          30	CALL_FUNCTION(arg=1, lineno=115)
          32	STORE_FAST(arg=3, lineno=115)
          34	LOAD_GLOBAL(arg=1, lineno=116)
          36	LOAD_CONST(arg=3, lineno=116)
          38	CALL_FUNCTION(arg=1, lineno=116)
          40	STORE_FAST(arg=4, lineno=116)
          42	LOAD_GLOBAL(arg=2, lineno=118)
          44	LOAD_CONST(arg=4, lineno=118)
          46	CALL_FUNCTION(arg=1, lineno=118)
          48	GET_ITER(arg=None, lineno=118)
>         50	FOR_ITER(arg=84, lineno=118)
          52	STORE_FAST(arg=5, lineno=118)
          54	LOAD_GLOBAL(arg=2, lineno=119)
          56	LOAD_CONST(arg=5, lineno=119)
          58	CALL_FUNCTION(arg=1, lineno=119)
          60	GET_ITER(arg=None, lineno=119)
>         62	FOR_ITER(arg=70, lineno=119)
          64	STORE_FAST(arg=6, lineno=119)
          66	LOAD_FAST(arg=2, lineno=120)
          68	LOAD_FAST(arg=5, lineno=120)
          70	BINARY_SUBSCR(arg=None, lineno=120)
          72	LOAD_GLOBAL(arg=1, lineno=120)
          74	LOAD_CONST(arg=6, lineno=120)
          76	CALL_FUNCTION(arg=1, lineno=120)
          78	LOAD_GLOBAL(arg=3, lineno=120)
          80	LOAD_FAST(arg=6, lineno=120)
          82	CALL_FUNCTION(arg=1, lineno=120)
          84	BINARY_LSHIFT(arg=None, lineno=120)
          86	BINARY_AND(arg=None, lineno=120)
          88	POP_JUMP_IF_FALSE(arg=122, lineno=120)
          90	LOAD_FAST(arg=3, lineno=121)
          92	LOAD_FAST(arg=0, lineno=121)
          94	LOAD_FAST(arg=1, lineno=121)
          96	BINARY_SUBSCR(arg=None, lineno=121)
          98	LOAD_CONST(arg=7, lineno=121)
         100	BINARY_SUBSCR(arg=None, lineno=121)
         102	INPLACE_XOR(arg=None, lineno=121)
         104	STORE_FAST(arg=3, lineno=121)
         106	LOAD_FAST(arg=4, lineno=122)
         108	LOAD_FAST(arg=0, lineno=122)
         110	LOAD_FAST(arg=1, lineno=122)
         112	BINARY_SUBSCR(arg=None, lineno=122)
         114	LOAD_CONST(arg=8, lineno=122)
         116	BINARY_SUBSCR(arg=None, lineno=122)
         118	INPLACE_XOR(arg=None, lineno=122)
         120	STORE_FAST(arg=4, lineno=122)
>        122	LOAD_GLOBAL(arg=4, lineno=123)
         124	LOAD_FAST(arg=0, lineno=123)
         126	LOAD_FAST(arg=1, lineno=123)
         128	CALL_FUNCTION(arg=2, lineno=123)
         130	POP_TOP(arg=None, lineno=123)
         132	JUMP_ABSOLUTE(arg=62, lineno=123)
>        134	JUMP_ABSOLUTE(arg=50, lineno=123)
>        136	LOAD_FAST(arg=3, lineno=125)
         138	LOAD_FAST(arg=0, lineno=125)
         140	LOAD_FAST(arg=1, lineno=125)
         142	BINARY_SUBSCR(arg=None, lineno=125)
         144	LOAD_CONST(arg=7, lineno=125)
         146	STORE_SUBSCR(arg=None, lineno=125)
         148	LOAD_FAST(arg=4, lineno=126)
         150	LOAD_FAST(arg=0, lineno=126)
         152	LOAD_FAST(arg=1, lineno=126)
         154	BINARY_SUBSCR(arg=None, lineno=126)
         156	LOAD_CONST(arg=8, lineno=126)
         158	STORE_SUBSCR(arg=None, lineno=126)
         160	LOAD_CONST(arg=9, lineno=126)
         162	RETURN_VALUE(arg=None, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=102)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=111)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=111)
07/23/2024 06:57:02 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=111)
07/23/2024 06:57:02 PM - DEBUG - stack ['$2load_global.0', '$index4.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=111)
07/23/2024 06:57:02 PM - DEBUG - stack ['$6call_function.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack ['$10load_global.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack ['$10load_global.3', '$const12.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack ['$14call_function.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack ['$14call_function.5', '$16load_global.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack ['$14call_function.5', '$16load_global.6', '$const18.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=22, inst=BUILD_TUPLE(arg=2, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack ['$14call_function.5', '$20call_function.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=2, lineno=113)
07/23/2024 06:57:02 PM - DEBUG - stack ['$22build_tuple.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=115)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=115)
07/23/2024 06:57:02 PM - DEBUG - stack ['$26load_global.10']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=115)
07/23/2024 06:57:02 PM - DEBUG - stack ['$26load_global.10', '$const28.11']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=3, lineno=115)
07/23/2024 06:57:02 PM - DEBUG - stack ['$30call_function.12']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=34, inst=LOAD_GLOBAL(arg=1, lineno=116)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=116)
07/23/2024 06:57:02 PM - DEBUG - stack ['$34load_global.13']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=116)
07/23/2024 06:57:02 PM - DEBUG - stack ['$34load_global.13', '$const36.14']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=4, lineno=116)
07/23/2024 06:57:02 PM - DEBUG - stack ['$38call_function.15']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=42, inst=LOAD_GLOBAL(arg=2, lineno=118)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=118)
07/23/2024 06:57:02 PM - DEBUG - stack ['$42load_global.16']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=118)
07/23/2024 06:57:02 PM - DEBUG - stack ['$42load_global.16', '$const44.17']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=48, inst=GET_ITER(arg=None, lineno=118)
07/23/2024 06:57:02 PM - DEBUG - stack ['$46call_function.18']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=50, stack=('$48get_iter.19',), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=50 nstack_initial=1)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi50.0']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=50 nstack_initial=1)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=50, inst=FOR_ITER(arg=84, lineno=118)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi50.0']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=('$phi50.0', '$50for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=52 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=136 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=136, inst=LOAD_FAST(arg=3, lineno=125)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=125)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s0136.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=1, lineno=125)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s0136.0', '$states138.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=142, inst=BINARY_SUBSCR(arg=None, lineno=125)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s0136.0', '$states138.1', '$index140.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=144, inst=LOAD_CONST(arg=7, lineno=125)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s0136.0', '$142binary_subscr.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=125)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s0136.0', '$142binary_subscr.3', '$const144.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=150, inst=LOAD_FAST(arg=0, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s1148.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s1148.5', '$states150.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=154, inst=BINARY_SUBSCR(arg=None, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s1148.5', '$states150.6', '$index152.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=156, inst=LOAD_CONST(arg=8, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s1148.5', '$154binary_subscr.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=158, inst=STORE_SUBSCR(arg=None, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s1148.5', '$154binary_subscr.8', '$const156.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=160, inst=LOAD_CONST(arg=9, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=162, inst=RETURN_VALUE(arg=None, lineno=126)
07/23/2024 06:57:02 PM - DEBUG - stack ['$const160.10']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi52.0', '$phi52.1']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=2)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=52, inst=STORE_FAST(arg=5, lineno=118)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi52.0', '$phi52.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=119)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi52.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=5, lineno=119)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi52.0', '$54load_global.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=119)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi52.0', '$54load_global.2', '$const56.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=60, inst=GET_ITER(arg=None, lineno=119)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi52.0', '$58call_function.4']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=62, stack=('$phi52.0', '$60get_iter.5'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi62.0', '$phi62.1']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=2)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=62, inst=FOR_ITER(arg=70, lineno=119)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi62.0', '$phi62.1']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=134, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=64, stack=('$phi62.0', '$phi62.1', '$62for_iter.3'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=1), State(pc_initial=64 nstack_initial=3)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi134.0']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=134 nstack_initial=1)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=134, inst=JUMP_ABSOLUTE(arg=50, lineno=123)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi134.0']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=50, stack=('$phi134.0',), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=3), State(pc_initial=50 nstack_initial=1)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi64.0', '$phi64.1', '$phi64.2']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=3)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=64, inst=STORE_FAST(arg=6, lineno=119)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$phi64.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$jump66.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$jump66.3', '$i68.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=1, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=6, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6', '$const74.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=78, inst=LOAD_GLOBAL(arg=3, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9', '$b80.10']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=84, inst=BINARY_LSHIFT(arg=None, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$82call_function.11']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=86, inst=BINARY_AND(arg=None, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$84binary_lshift.12']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=122, lineno=120)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$86binary_and.13']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=90, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0), Edge(pc=122, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi90.0', '$phi90.1']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=2)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=0, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3', '$index94.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=7, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=100, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5', '$const98.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=102, inst=INPLACE_XOR(arg=None, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$100binary_subscr.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=104, inst=STORE_FAST(arg=3, lineno=121)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$102inplace_xor.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10', '$index110.11']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=114, inst=LOAD_CONST(arg=8, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=116, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12', '$const114.13']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=118, inst=INPLACE_XOR(arg=None, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$116binary_subscr.14']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=4, lineno=122)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$118inplace_xor.15']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=122, stack=('$phi90.0', '$phi90.1'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - stack: ['$phi122.0', '$phi122.1']
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=122 nstack_initial=2)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=4, lineno=123)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi122.0', '$phi122.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=123)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$122load_global.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=1, lineno=123)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=128, inst=CALL_FUNCTION(arg=2, lineno=123)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3', '$index126.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=130, inst=POP_TOP(arg=None, lineno=123)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$128call_function.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=132, inst=JUMP_ABSOLUTE(arg=62, lineno=123)
07/23/2024 06:57:02 PM - DEBUG - stack ['$phi122.0', '$phi122.1']
07/23/2024 06:57:02 PM - DEBUG - end state. edges=[Edge(pc=62, stack=('$phi122.0', '$phi122.1'), blockstack=(), npush=0)]
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=62 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/23/2024 06:57:02 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:02 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=1): {'$phi50.0'},
             State(pc_initial=52 nstack_initial=2): {'$phi52.1'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=64 nstack_initial=3): {'$phi64.2'},
             State(pc_initial=90 nstack_initial=2): set(),
             State(pc_initial=122 nstack_initial=2): set(),
             State(pc_initial=134 nstack_initial=1): set(),
             State(pc_initial=136 nstack_initial=0): set()})
07/23/2024 06:57:02 PM - DEBUG - defmap: {'$phi50.0': State(pc_initial=0 nstack_initial=0),
 '$phi52.1': State(pc_initial=50 nstack_initial=1),
 '$phi62.1': State(pc_initial=52 nstack_initial=2),
 '$phi64.2': State(pc_initial=62 nstack_initial=2)}
07/23/2024 06:57:02 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=2))},
             '$phi122.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.1', State(pc_initial=90 nstack_initial=2))},
             '$phi134.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi134.0',
                           State(pc_initial=134 nstack_initial=1))},
             '$phi52.0': {('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi122.1',
                           State(pc_initial=122 nstack_initial=2))},
             '$phi64.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi64.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3))},
             '$phi90.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3))}})
07/23/2024 06:57:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi122.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi134.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/23/2024 06:57:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/23/2024 06:57:02 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/23/2024 06:57:02 PM - DEBUG - keep phismap: {'$phi50.0': {('$48get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi52.1': {('$50for_iter.2', State(pc_initial=50 nstack_initial=1))},
 '$phi62.1': {('$60get_iter.5', State(pc_initial=52 nstack_initial=2))},
 '$phi64.2': {('$62for_iter.3', State(pc_initial=62 nstack_initial=2))}}
07/23/2024 06:57:02 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi50.0': '$48get_iter.19'},
             State(pc_initial=50 nstack_initial=1): {'$phi52.1': '$50for_iter.2'},
             State(pc_initial=52 nstack_initial=2): {'$phi62.1': '$60get_iter.5'},
             State(pc_initial=62 nstack_initial=2): {'$phi64.2': '$62for_iter.3'}})
07/23/2024 06:57:02 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$const12.4'}), (14, {'func': '$10load_global.3', 'args': ['$const12.4'], 'res': '$14call_function.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$16load_global.6', 'args': ['$const18.7'], 'res': '$20call_function.8'}), (22, {'items': ['$14call_function.5', '$20call_function.8'], 'res': '$22build_tuple.9'}), (24, {'value': '$22build_tuple.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$const28.11'}), (30, {'func': '$26load_global.10', 'args': ['$const28.11'], 'res': '$30call_function.12'}), (32, {'value': '$30call_function.12'}), (34, {'res': '$34load_global.13'}), (36, {'res': '$const36.14'}), (38, {'func': '$34load_global.13', 'args': ['$const36.14'], 'res': '$38call_function.15'}), (40, {'value': '$38call_function.15'}), (42, {'res': '$42load_global.16'}), (44, {'res': '$const44.17'}), (46, {'func': '$42load_global.16', 'args': ['$const44.17'], 'res': '$46call_function.18'}), (48, {'value': '$46call_function.18', 'res': '$48get_iter.19'})), outgoing_phis={'$phi50.0': '$48get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$48get_iter.19',)})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'iterator': '$phi50.0', 'pair': '$50for_iter.1', 'indval': '$50for_iter.2', 'pred': '$50for_iter.3'}),), outgoing_phis={'$phi52.1': '$50for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: (), 52: ('$phi50.0', '$50for_iter.2')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=52 nstack_initial=2):
AdaptBlockInfo(insts=((52, {'value': '$phi52.1'}), (54, {'res': '$54load_global.2'}), (56, {'res': '$const56.3'}), (58, {'func': '$54load_global.2', 'args': ['$const56.3'], 'res': '$58call_function.4'}), (60, {'value': '$58call_function.4', 'res': '$60get_iter.5'})), outgoing_phis={'$phi62.1': '$60get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi52.0', '$60get_iter.5')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'iterator': '$phi62.1', 'pair': '$62for_iter.2', 'indval': '$62for_iter.3', 'pred': '$62for_iter.4'}),), outgoing_phis={'$phi64.2': '$62for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ('$phi62.0',), 64: ('$phi62.0', '$phi62.1', '$62for_iter.3')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=64 nstack_initial=3):
AdaptBlockInfo(insts=((64, {'value': '$phi64.2'}), (66, {'res': '$jump66.3'}), (68, {'res': '$i68.4'}), (70, {'index': '$i68.4', 'target': '$jump66.3', 'res': '$70binary_subscr.5'}), (72, {'res': '$72load_global.6'}), (74, {'res': '$const74.7'}), (76, {'func': '$72load_global.6', 'args': ['$const74.7'], 'res': '$76call_function.8'}), (78, {'res': '$78load_global.9'}), (80, {'res': '$b80.10'}), (82, {'func': '$78load_global.9', 'args': ['$b80.10'], 'res': '$82call_function.11'}), (84, {'lhs': '$76call_function.8', 'rhs': '$82call_function.11', 'res': '$84binary_lshift.12'}), (86, {'lhs': '$70binary_subscr.5', 'rhs': '$84binary_lshift.12', 'res': '$86binary_and.13'}), (88, {'pred': '$86binary_and.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi64.0', '$phi64.1'), 122: ('$phi64.0', '$phi64.1')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=90 nstack_initial=2):
AdaptBlockInfo(insts=((90, {'res': '$s090.2'}), (92, {'res': '$states92.3'}), (94, {'res': '$index94.4'}), (96, {'index': '$index94.4', 'target': '$states92.3', 'res': '$96binary_subscr.5'}), (98, {'res': '$const98.6'}), (100, {'index': '$const98.6', 'target': '$96binary_subscr.5', 'res': '$100binary_subscr.7'}), (102, {'lhs': '$s090.2', 'rhs': '$100binary_subscr.7', 'res': '$102inplace_xor.8'}), (104, {'value': '$102inplace_xor.8'}), (106, {'res': '$s1106.9'}), (108, {'res': '$states108.10'}), (110, {'res': '$index110.11'}), (112, {'index': '$index110.11', 'target': '$states108.10', 'res': '$112binary_subscr.12'}), (114, {'res': '$const114.13'}), (116, {'index': '$const114.13', 'target': '$112binary_subscr.12', 'res': '$116binary_subscr.14'}), (118, {'lhs': '$s1106.9', 'rhs': '$116binary_subscr.14', 'res': '$118inplace_xor.15'}), (120, {'value': '$118inplace_xor.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: ('$phi90.0', '$phi90.1')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'res': '$122load_global.2'}), (124, {'res': '$states124.3'}), (126, {'res': '$index126.4'}), (128, {'func': '$122load_global.2', 'args': ['$states124.3', '$index126.4'], 'res': '$128call_function.5'}), (132, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi122.0', '$phi122.1')})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=134 nstack_initial=1):
AdaptBlockInfo(insts=((134, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi134.0',)})
07/23/2024 06:57:02 PM - DEBUG - block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$s0136.0'}), (138, {'res': '$states138.1'}), (140, {'res': '$index140.2'}), (142, {'index': '$index140.2', 'target': '$states138.1', 'res': '$142binary_subscr.3'}), (144, {'res': '$const144.4'}), (146, {'target': '$142binary_subscr.3', 'index': '$const144.4', 'value': '$s0136.0'}), (148, {'res': '$s1148.5'}), (150, {'res': '$states150.6'}), (152, {'res': '$index152.7'}), (154, {'index': '$index152.7', 'target': '$states150.6', 'res': '$154binary_subscr.8'}), (156, {'res': '$const156.9'}), (158, {'target': '$154binary_subscr.8', 'index': '$const156.9', 'value': '$s1148.5'}), (160, {'res': '$const160.10'}), (162, {'retval': '$const160.10', 'castval': '$162return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:02 PM - DEBUG - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $10load_global.3 = global(uint64: uint64) ['$10load_global.3']
    $const12.4 = const(int, 13739361407582206667) ['$const12.4']
    $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', '$const12.4']
    $16load_global.6 = global(uint64: uint64) ['$16load_global.6']
    $const18.7 = const(int, 15594563132006766882) ['$const18.7']
    $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.6', '$20call_function.8', '$const18.7']
    jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)]) ['$14call_function.5', '$20call_function.8', 'jump']
    $26load_global.10 = global(uint64: uint64) ['$26load_global.10']
    $const28.11 = const(int, 0)              ['$const28.11']
    s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.10', '$const28.11', 's0']
    $34load_global.13 = global(uint64: uint64) ['$34load_global.13']
    $const36.14 = const(int, 0)              ['$const36.14']
    s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.13', '$const36.14', 's1']
    $42load_global.16 = global(range: <class 'range'>) ['$42load_global.16']
    $const44.17 = const(int, 2)              ['$const44.17']
    $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.16', '$46call_function.18', '$const44.17']
    $48get_iter.19 = getiter(value=$46call_function.18) ['$46call_function.18', '$48get_iter.19']
    $phi50.0 = $48get_iter.19                ['$48get_iter.19', '$phi50.0']
    jump 50                                  []
label 50:
    $50for_iter.1 = iternext(value=$phi50.0) ['$50for_iter.1', '$phi50.0']
    $50for_iter.2 = pair_first(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.2']
    $50for_iter.3 = pair_second(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.3']
    $phi52.1 = $50for_iter.2                 ['$50for_iter.2', '$phi52.1']
    branch $50for_iter.3, 52, 136            ['$50for_iter.3']
label 52:
    i = $phi52.1                             ['$phi52.1', 'i']
    $54load_global.2 = global(range: <class 'range'>) ['$54load_global.2']
    $const56.3 = const(int, 64)              ['$const56.3']
    $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$54load_global.2', '$58call_function.4', '$const56.3']
    $60get_iter.5 = getiter(value=$58call_function.4) ['$58call_function.4', '$60get_iter.5']
    $phi62.1 = $60get_iter.5                 ['$60get_iter.5', '$phi62.1']
    jump 62                                  []
label 62:
    $62for_iter.2 = iternext(value=$phi62.1) ['$62for_iter.2', '$phi62.1']
    $62for_iter.3 = pair_first(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.3']
    $62for_iter.4 = pair_second(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.4']
    $phi64.2 = $62for_iter.3                 ['$62for_iter.3', '$phi64.2']
    branch $62for_iter.4, 64, 134            ['$62for_iter.4']
label 64:
    b = $phi64.2                             ['$phi64.2', 'b']
    $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>) ['$70binary_subscr.5', 'i', 'jump']
    $72load_global.6 = global(uint64: uint64) ['$72load_global.6']
    $const74.7 = const(int, 1)               ['$const74.7']
    $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.6', '$76call_function.8', '$const74.7']
    $78load_global.9 = global(uint32: uint32) ['$78load_global.9']
    $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$78load_global.9', '$82call_function.11', 'b']
    $84binary_lshift.12 = $76call_function.8 << $82call_function.11 ['$76call_function.8', '$82call_function.11', '$84binary_lshift.12']
    $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12 ['$70binary_subscr.5', '$84binary_lshift.12', '$86binary_and.13']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None) ['$86binary_and.13', '$88pred', 'bool88']
    branch $88pred, 90, 122                  ['$88pred']
label 90:
    $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$96binary_subscr.5', 'index.1', 'states']
    $const98.6 = const(str, s0)              ['$const98.6']
    $100binary_subscr.7 = getitem(value=$96binary_subscr.5, index=$const98.6, fn=<built-in function getitem>) ['$100binary_subscr.7', '$96binary_subscr.5', '$const98.6']
    $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined) ['$100binary_subscr.7', '$102inplace_xor.8', 's0']
    s0 = $102inplace_xor.8                   ['$102inplace_xor.8', 's0']
    $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.12', 'index.1', 'states']
    $const114.13 = const(str, s1)            ['$const114.13']
    $116binary_subscr.14 = getitem(value=$112binary_subscr.12, index=$const114.13, fn=<built-in function getitem>) ['$112binary_subscr.12', '$116binary_subscr.14', '$const114.13']
    $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined) ['$116binary_subscr.14', '$118inplace_xor.15', 's1']
    s1 = $118inplace_xor.15                  ['$118inplace_xor.15', 's1']
    jump 122                                 []
label 122:
    $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>)) ['$122load_global.2']
    $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.2', '$128call_function.5', 'index.1', 'states']
    jump 62                                  []
label 134:
    jump 50                                  []
label 136:
    $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$142binary_subscr.3', 'index.1', 'states']
    $const144.4 = const(str, s0)             ['$const144.4']
    $142binary_subscr.3[$const144.4] = s0    ['$142binary_subscr.3', '$const144.4', 's0']
    $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$154binary_subscr.8', 'index.1', 'states']
    $const156.9 = const(str, s1)             ['$const156.9']
    $154binary_subscr.8[$const156.9] = s1    ['$154binary_subscr.8', '$const156.9', 's1']
    $const160.10 = const(NoneType, None)     ['$const160.10']
    $162return_value.11 = cast(value=$const160.10) ['$162return_value.11', '$const160.10']
    return $162return_value.11               ['$162return_value.11']

07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 50
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 52
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 62
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 64
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:02 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:02 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 90
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0 = $102inplace_xor.8
07/23/2024 06:57:02 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 122
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 134
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block analysis pass on 136
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:02 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:02 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$100binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001EE14A98820>,
                                      90)],
             '$102inplace_xor.8': [(<numba.core.ir.Assign object at 0x000001EE14A94430>,
                                    90)],
             '$10load_global.3': [(<numba.core.ir.Assign object at 0x000001EE14A7F040>,
                                   0)],
             '$112binary_subscr.12': [(<numba.core.ir.Assign object at 0x000001EE14A949D0>,
                                       90)],
             '$116binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001EE14A988E0>,
                                       90)],
             '$118inplace_xor.15': [(<numba.core.ir.Assign object at 0x000001EE14A94E50>,
                                     90)],
             '$122load_global.2': [(<numba.core.ir.Assign object at 0x000001EE14A948B0>,
                                    122)],
             '$128call_function.5': [(<numba.core.ir.Assign object at 0x000001EE14A963A0>,
                                      122)],
             '$142binary_subscr.3': [(<numba.core.ir.Assign object at 0x000001EE14A96A90>,
                                      136)],
             '$14call_function.5': [(<numba.core.ir.Assign object at 0x000001EE14A7FA00>,
                                     0)],
             '$154binary_subscr.8': [(<numba.core.ir.Assign object at 0x000001EE14A981F0>,
                                      136)],
             '$162return_value.11': [(<numba.core.ir.Assign object at 0x000001EE14A98700>,
                                      136)],
             '$16load_global.6': [(<numba.core.ir.Assign object at 0x000001EE14A7FB20>,
                                   0)],
             '$20call_function.8': [(<numba.core.ir.Assign object at 0x000001EE14A7FE80>,
                                     0)],
             '$26load_global.10': [(<numba.core.ir.Assign object at 0x000001EE14A85280>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE14966BB0>,
                                  0)],
             '$34load_global.13': [(<numba.core.ir.Assign object at 0x000001EE14A85820>,
                                    0)],
             '$42load_global.16': [(<numba.core.ir.Assign object at 0x000001EE14A85DC0>,
                                    0)],
             '$46call_function.18': [(<numba.core.ir.Assign object at 0x000001EE14A8A160>,
                                      0)],
             '$48get_iter.19': [(<numba.core.ir.Assign object at 0x000001EE14A8A280>,
                                 0)],
             '$50for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE14A8A430>,
                                50)],
             '$50for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14A8A550>,
                                50)],
             '$50for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14A8A670>,
                                50)],
             '$54load_global.2': [(<numba.core.ir.Assign object at 0x000001EE14A8AAC0>,
                                   52)],
             '$58call_function.4': [(<numba.core.ir.Assign object at 0x000001EE14A8AE20>,
                                     52)],
             '$60get_iter.5': [(<numba.core.ir.Assign object at 0x000001EE14A8AF40>,
                                52)],
             '$62for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14A90310>,
                                62)],
             '$62for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14A90430>,
                                62)],
             '$62for_iter.4': [(<numba.core.ir.Assign object at 0x000001EE14A90550>,
                                62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001EE14A90C10>,
                                     64)],
             '$72load_global.6': [(<numba.core.ir.Assign object at 0x000001EE14A90D60>,
                                   64)],
             '$76call_function.8': [(<numba.core.ir.Assign object at 0x000001EE14A92100>,
                                     64)],
             '$78load_global.9': [(<numba.core.ir.Assign object at 0x000001EE14A92220>,
                                   64)],
             '$82call_function.11': [(<numba.core.ir.Assign object at 0x000001EE14A92520>,
                                      64)],
             '$84binary_lshift.12': [(<numba.core.ir.Assign object at 0x000001EE14A92670>,
                                      64)],
             '$86binary_and.13': [(<numba.core.ir.Assign object at 0x000001EE14A927F0>,
                                   64)],
             '$88pred': [(<numba.core.ir.Assign object at 0x000001EE14A92A60>,
                          64)],
             '$96binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001EE14A92F70>,
                                     90)],
             '$const114.13': [(<numba.core.ir.Assign object at 0x000001EE14A94B20>,
                               90)],
             '$const12.4': [(<numba.core.ir.Assign object at 0x000001EE14A7F820>,
                             0)],
             '$const144.4': [(<numba.core.ir.Assign object at 0x000001EE14A96BE0>,
                              136)],
             '$const156.9': [(<numba.core.ir.Assign object at 0x000001EE14A98340>,
                              136)],
             '$const160.10': [(<numba.core.ir.Assign object at 0x000001EE14A98580>,
                               136)],
             '$const18.7': [(<numba.core.ir.Assign object at 0x000001EE14A7FCA0>,
                             0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001EE14A85400>,
                              0)],
             '$const36.14': [(<numba.core.ir.Assign object at 0x000001EE14A859A0>,
                              0)],
             '$const44.17': [(<numba.core.ir.Assign object at 0x000001EE14A85F40>,
                              0)],
             '$const56.3': [(<numba.core.ir.Assign object at 0x000001EE14A8AC40>,
                             52)],
             '$const74.7': [(<numba.core.ir.Assign object at 0x000001EE14A90EE0>,
                             64)],
             '$const98.6': [(<numba.core.ir.Assign object at 0x000001EE14A94100>,
                             90)],
             '$phi50.0': [(<numba.core.ir.Assign object at 0x000001EE14A7F610>,
                           0)],
             '$phi52.1': [(<numba.core.ir.Assign object at 0x000001EE14A8A370>,
                           50)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x000001EE14A8AFA0>,
                           52)],
             '$phi64.2': [(<numba.core.ir.Assign object at 0x000001EE14A90250>,
                           62)],
             'b': [(<numba.core.ir.Assign object at 0x000001EE14A90820>, 64)],
             'bool88': [(<numba.core.ir.Assign object at 0x000001EE14A92940>,
                         64)],
             'i': [(<numba.core.ir.Assign object at 0x000001EE14A8A940>, 52)],
             'index': [(<numba.core.ir.Assign object at 0x000001EE14966B50>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001EE14A7F490>,
                          0)],
             'jump': [(<numba.core.ir.Assign object at 0x000001EE14A7FFD0>, 0)],
             's0': [(<numba.core.ir.Assign object at 0x000001EE14A855E0>, 0),
                    (<numba.core.ir.Assign object at 0x000001EE14A944F0>, 90)],
             's1': [(<numba.core.ir.Assign object at 0x000001EE14A85B80>, 0),
                    (<numba.core.ir.Assign object at 0x000001EE14A94F10>, 90)],
             'states': [(<numba.core.ir.Assign object at 0x000001EE14A6EBE0>,
                         0)]})
07/23/2024 06:57:02 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE14A50B20>
07/23/2024 06:57:02 PM - DEBUG - Fix SSA violator on var s0
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - first assign: s0
07/23/2024 06:57:02 PM - DEBUG - replaced with: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:02 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:02 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0 = $102inplace_xor.8
07/23/2024 06:57:02 PM - DEBUG - replaced with: s0.1 = $102inplace_xor.8
07/23/2024 06:57:02 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:02 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:02 PM - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EE14AB35E0>],
             90: [<numba.core.ir.Assign object at 0x000001EE14AB3100>]})
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:02 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:02 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - find_def var='s0' stmt=$102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 90
07/23/2024 06:57:02 PM - DEBUG - idom 64 from label 90
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:02 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 62
07/23/2024 06:57:02 PM - DEBUG - insert phi node s0.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 122
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 122
07/23/2024 06:57:02 PM - DEBUG - insert phi node s0.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:02 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:02 PM - DEBUG - incoming_def s0.2 = phi(incoming_values=[], incoming_blocks=[])
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 90
07/23/2024 06:57:02 PM - DEBUG - incoming_def s0.1 = $102inplace_xor.8
07/23/2024 06:57:02 PM - DEBUG - incoming_def s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 52
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 52
07/23/2024 06:57:02 PM - DEBUG - idom 50 from label 52
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 50
07/23/2024 06:57:02 PM - DEBUG - insert phi node s0.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 0
07/23/2024 06:57:02 PM - DEBUG - incoming_def s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 134
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 134
07/23/2024 06:57:02 PM - DEBUG - idom 62 from label 134
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:02 PM - DEBUG - incoming_def s0.2 = phi(incoming_values=[Var(s0.3, random.py:121)], incoming_blocks=[122])
07/23/2024 06:57:02 PM - DEBUG - incoming_def s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:02 PM - DEBUG - replaced with: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.1 = $102inplace_xor.8
07/23/2024 06:57:02 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3D60>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0
07/23/2024 06:57:02 PM - DEBUG - find_def var='s0' stmt=$142binary_subscr.3['s0'] = s0
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 136
07/23/2024 06:57:02 PM - DEBUG - idom 50 from label 136
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:02 PM - DEBUG - replaced with: $142binary_subscr.3['s0'] = s0.4
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:02 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:02 PM - DEBUG - Fix SSA violator on var s1
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - first assign: s1
07/23/2024 06:57:02 PM - DEBUG - replaced with: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:02 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:02 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.1 = $102inplace_xor.8
07/23/2024 06:57:02 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:02 PM - DEBUG - replaced with: s1.1 = $118inplace_xor.15
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AB3BB0>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0.4
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:02 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:02 PM - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EE14AB3E80>],
             90: [<numba.core.ir.Assign object at 0x000001EE14AB34F0>]})
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:02 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:02 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:02 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:02 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.1 = $102inplace_xor.8
07/23/2024 06:57:02 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - find_def var='s1' stmt=$118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 90
07/23/2024 06:57:02 PM - DEBUG - idom 64 from label 90
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:02 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 62
07/23/2024 06:57:02 PM - DEBUG - insert phi node s1.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 122
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 122
07/23/2024 06:57:02 PM - DEBUG - insert phi node s1.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:02 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:02 PM - DEBUG - incoming_def s1.2 = phi(incoming_values=[], incoming_blocks=[])
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 90
07/23/2024 06:57:02 PM - DEBUG - incoming_def s1.1 = $118inplace_xor.15
07/23/2024 06:57:02 PM - DEBUG - incoming_def s1.3 = phi(incoming_values=[Var(s1.2, random.py:121), Var(s1.1, random.py:122)], incoming_blocks=[64, 90])
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 52
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 52
07/23/2024 06:57:02 PM - DEBUG - idom 50 from label 52
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 50
07/23/2024 06:57:02 PM - DEBUG - insert phi node s1.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 0
07/23/2024 06:57:02 PM - DEBUG - incoming_def s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 134
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 134
07/23/2024 06:57:02 PM - DEBUG - idom 62 from label 134
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:02 PM - DEBUG - incoming_def s1.2 = phi(incoming_values=[Var(s1.3, random.py:121)], incoming_blocks=[122])
07/23/2024 06:57:02 PM - DEBUG - incoming_def s1.4 = phi(incoming_values=[Var(s1, random.py:116), Var(s1.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:02 PM - DEBUG - replaced with: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1.2, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:02 PM - DEBUG - on stmt: s1.1 = $118inplace_xor.15
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/23/2024 06:57:02 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:02 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:02 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:02 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AB3430>
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0.4
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:02 PM - DEBUG - find_def var='s1' stmt=$154binary_subscr.8['s1'] = s1
07/23/2024 06:57:02 PM - DEBUG - find_def_from_top label 136
07/23/2024 06:57:02 PM - DEBUG - idom 50 from label 136
07/23/2024 06:57:02 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:02 PM - DEBUG - replaced with: $154binary_subscr.8['s1'] = s1.4
07/23/2024 06:57:02 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:02 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:02 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:02 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=80)
           2	LOAD_GLOBAL(arg=0, lineno=90)
           4	LOAD_FAST(arg=1, lineno=90)
           6	CALL_FUNCTION(arg=1, lineno=90)
           8	STORE_FAST(arg=1, lineno=90)
          10	LOAD_FAST(arg=0, lineno=91)
          12	LOAD_FAST(arg=1, lineno=91)
          14	BINARY_SUBSCR(arg=None, lineno=91)
          16	LOAD_CONST(arg=1, lineno=91)
          18	BINARY_SUBSCR(arg=None, lineno=91)
          20	STORE_FAST(arg=2, lineno=91)
          22	LOAD_FAST(arg=0, lineno=92)
          24	LOAD_FAST(arg=1, lineno=92)
          26	BINARY_SUBSCR(arg=None, lineno=92)
          28	LOAD_CONST(arg=2, lineno=92)
          30	BINARY_SUBSCR(arg=None, lineno=92)
          32	STORE_FAST(arg=3, lineno=92)
          34	LOAD_FAST(arg=2, lineno=93)
          36	LOAD_FAST(arg=3, lineno=93)
          38	BINARY_ADD(arg=None, lineno=93)
          40	STORE_FAST(arg=4, lineno=93)
          42	LOAD_FAST(arg=3, lineno=95)
          44	LOAD_FAST(arg=2, lineno=95)
          46	INPLACE_XOR(arg=None, lineno=95)
          48	STORE_FAST(arg=3, lineno=95)
          50	LOAD_GLOBAL(arg=1, lineno=96)
          52	LOAD_GLOBAL(arg=2, lineno=96)
          54	LOAD_FAST(arg=2, lineno=96)
          56	LOAD_GLOBAL(arg=3, lineno=96)
          58	LOAD_CONST(arg=3, lineno=96)
          60	CALL_FUNCTION(arg=1, lineno=96)
          62	CALL_FUNCTION(arg=2, lineno=96)
          64	CALL_FUNCTION(arg=1, lineno=96)
          66	LOAD_FAST(arg=3, lineno=96)
          68	BINARY_XOR(arg=None, lineno=96)
          70	LOAD_FAST(arg=3, lineno=96)
          72	LOAD_GLOBAL(arg=3, lineno=96)
          74	LOAD_CONST(arg=4, lineno=96)
          76	CALL_FUNCTION(arg=1, lineno=96)
          78	BINARY_LSHIFT(arg=None, lineno=96)
          80	BINARY_XOR(arg=None, lineno=96)
          82	LOAD_FAST(arg=0, lineno=96)
          84	LOAD_FAST(arg=1, lineno=96)
          86	BINARY_SUBSCR(arg=None, lineno=96)
          88	LOAD_CONST(arg=1, lineno=96)
          90	STORE_SUBSCR(arg=None, lineno=96)
          92	LOAD_GLOBAL(arg=1, lineno=97)
          94	LOAD_GLOBAL(arg=2, lineno=97)
          96	LOAD_FAST(arg=3, lineno=97)
          98	LOAD_GLOBAL(arg=3, lineno=97)
         100	LOAD_CONST(arg=5, lineno=97)
         102	CALL_FUNCTION(arg=1, lineno=97)
         104	CALL_FUNCTION(arg=2, lineno=97)
         106	CALL_FUNCTION(arg=1, lineno=97)
         108	LOAD_FAST(arg=0, lineno=97)
         110	LOAD_FAST(arg=1, lineno=97)
         112	BINARY_SUBSCR(arg=None, lineno=97)
         114	LOAD_CONST(arg=2, lineno=97)
         116	STORE_SUBSCR(arg=None, lineno=97)
         118	LOAD_FAST(arg=4, lineno=99)
         120	RETURN_VALUE(arg=None, lineno=99)
07/23/2024 06:57:02 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:02 PM - DEBUG - stack: []
07/23/2024 06:57:02 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=80)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=90)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=90)
07/23/2024 06:57:02 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=90)
07/23/2024 06:57:02 PM - DEBUG - stack ['$2load_global.0', '$index4.1']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=90)
07/23/2024 06:57:02 PM - DEBUG - stack ['$6call_function.2']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=91)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=91)
07/23/2024 06:57:02 PM - DEBUG - stack ['$states10.3']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=91)
07/23/2024 06:57:02 PM - DEBUG - stack ['$states10.3', '$index12.4']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=91)
07/23/2024 06:57:02 PM - DEBUG - stack ['$14binary_subscr.5']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=91)
07/23/2024 06:57:02 PM - DEBUG - stack ['$14binary_subscr.5', '$const16.6']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=2, lineno=91)
07/23/2024 06:57:02 PM - DEBUG - stack ['$18binary_subscr.7']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=92)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=92)
07/23/2024 06:57:02 PM - DEBUG - stack ['$states22.8']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=92)
07/23/2024 06:57:02 PM - DEBUG - stack ['$states22.8', '$index24.9']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=92)
07/23/2024 06:57:02 PM - DEBUG - stack ['$26binary_subscr.10']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=92)
07/23/2024 06:57:02 PM - DEBUG - stack ['$26binary_subscr.10', '$const28.11']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=3, lineno=92)
07/23/2024 06:57:02 PM - DEBUG - stack ['$30binary_subscr.12']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=93)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=93)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s034.13']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=38, inst=BINARY_ADD(arg=None, lineno=93)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s034.13', '$s136.14']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=4, lineno=93)
07/23/2024 06:57:02 PM - DEBUG - stack ['$38binary_add.15']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=95)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=95)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s142.16']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=46, inst=INPLACE_XOR(arg=None, lineno=95)
07/23/2024 06:57:02 PM - DEBUG - stack ['$s142.16', '$s044.17']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=48, inst=STORE_FAST(arg=3, lineno=95)
07/23/2024 06:57:02 PM - DEBUG - stack ['$46inplace_xor.18']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=1, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack []
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50load_global.19']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50load_global.19', '$52load_global.20']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50load_global.19', '$52load_global.20', '$s054.21']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=58, inst=LOAD_CONST(arg=3, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50load_global.19', '$52load_global.20', '$s054.21', '$56load_global.22']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50load_global.19', '$52load_global.20', '$s054.21', '$56load_global.22', '$const58.23']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=62, inst=CALL_FUNCTION(arg=2, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50load_global.19', '$52load_global.20', '$s054.21', '$60call_function.24']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=64, inst=CALL_FUNCTION(arg=1, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$50load_global.19', '$62call_function.25']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$64call_function.26']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=68, inst=BINARY_XOR(arg=None, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$64call_function.26', '$s166.27']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$68binary_xor.28']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=3, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$68binary_xor.28', '$s170.29']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=4, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$68binary_xor.28', '$s170.29', '$72load_global.30']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$68binary_xor.28', '$s170.29', '$72load_global.30', '$const74.31']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=78, inst=BINARY_LSHIFT(arg=None, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$68binary_xor.28', '$s170.29', '$76call_function.32']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=80, inst=BINARY_XOR(arg=None, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$68binary_xor.28', '$78binary_lshift.33']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=82, inst=LOAD_FAST(arg=0, lineno=96)
07/23/2024 06:57:02 PM - DEBUG - stack ['$80binary_xor.34']
07/23/2024 06:57:02 PM - DEBUG - dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=96)
07/23/2024 06:57:03 PM - DEBUG - stack ['$80binary_xor.34', '$states82.35']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=96)
07/23/2024 06:57:03 PM - DEBUG - stack ['$80binary_xor.34', '$states82.35', '$index84.36']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=1, lineno=96)
07/23/2024 06:57:03 PM - DEBUG - stack ['$80binary_xor.34', '$86binary_subscr.37']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=90, inst=STORE_SUBSCR(arg=None, lineno=96)
07/23/2024 06:57:03 PM - DEBUG - stack ['$80binary_xor.34', '$86binary_subscr.37', '$const88.38']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=92, inst=LOAD_GLOBAL(arg=1, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=2, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$92load_global.39']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$92load_global.39', '$94load_global.40']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=98, inst=LOAD_GLOBAL(arg=3, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$92load_global.39', '$94load_global.40', '$s196.41']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=100, inst=LOAD_CONST(arg=5, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$92load_global.39', '$94load_global.40', '$s196.41', '$98load_global.42']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=102, inst=CALL_FUNCTION(arg=1, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$92load_global.39', '$94load_global.40', '$s196.41', '$98load_global.42', '$const100.43']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=104, inst=CALL_FUNCTION(arg=2, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$92load_global.39', '$94load_global.40', '$s196.41', '$102call_function.44']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=106, inst=CALL_FUNCTION(arg=1, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$92load_global.39', '$104call_function.45']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$106call_function.46']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$106call_function.46', '$states108.47']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$106call_function.46', '$states108.47', '$index110.48']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$106call_function.46', '$112binary_subscr.49']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=116, inst=STORE_SUBSCR(arg=None, lineno=97)
07/23/2024 06:57:03 PM - DEBUG - stack ['$106call_function.46', '$112binary_subscr.49', '$const114.50']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=99)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=99)
07/23/2024 06:57:03 PM - DEBUG - stack ['$result118.51']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:03 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:03 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:03 PM - DEBUG - defmap: {}
07/23/2024 06:57:03 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:03 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:03 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:03 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:03 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$states10.3'}), (12, {'res': '$index12.4'}), (14, {'index': '$index12.4', 'target': '$states10.3', 'res': '$14binary_subscr.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$14binary_subscr.5', 'res': '$18binary_subscr.7'}), (20, {'value': '$18binary_subscr.7'}), (22, {'res': '$states22.8'}), (24, {'res': '$index24.9'}), (26, {'index': '$index24.9', 'target': '$states22.8', 'res': '$26binary_subscr.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$26binary_subscr.10', 'res': '$30binary_subscr.12'}), (32, {'value': '$30binary_subscr.12'}), (34, {'res': '$s034.13'}), (36, {'res': '$s136.14'}), (38, {'lhs': '$s034.13', 'rhs': '$s136.14', 'res': '$38binary_add.15'}), (40, {'value': '$38binary_add.15'}), (42, {'res': '$s142.16'}), (44, {'res': '$s044.17'}), (46, {'lhs': '$s142.16', 'rhs': '$s044.17', 'res': '$46inplace_xor.18'}), (48, {'value': '$46inplace_xor.18'}), (50, {'res': '$50load_global.19'}), (52, {'res': '$52load_global.20'}), (54, {'res': '$s054.21'}), (56, {'res': '$56load_global.22'}), (58, {'res': '$const58.23'}), (60, {'func': '$56load_global.22', 'args': ['$const58.23'], 'res': '$60call_function.24'}), (62, {'func': '$52load_global.20', 'args': ['$s054.21', '$60call_function.24'], 'res': '$62call_function.25'}), (64, {'func': '$50load_global.19', 'args': ['$62call_function.25'], 'res': '$64call_function.26'}), (66, {'res': '$s166.27'}), (68, {'lhs': '$64call_function.26', 'rhs': '$s166.27', 'res': '$68binary_xor.28'}), (70, {'res': '$s170.29'}), (72, {'res': '$72load_global.30'}), (74, {'res': '$const74.31'}), (76, {'func': '$72load_global.30', 'args': ['$const74.31'], 'res': '$76call_function.32'}), (78, {'lhs': '$s170.29', 'rhs': '$76call_function.32', 'res': '$78binary_lshift.33'}), (80, {'lhs': '$68binary_xor.28', 'rhs': '$78binary_lshift.33', 'res': '$80binary_xor.34'}), (82, {'res': '$states82.35'}), (84, {'res': '$index84.36'}), (86, {'index': '$index84.36', 'target': '$states82.35', 'res': '$86binary_subscr.37'}), (88, {'res': '$const88.38'}), (90, {'target': '$86binary_subscr.37', 'index': '$const88.38', 'value': '$80binary_xor.34'}), (92, {'res': '$92load_global.39'}), (94, {'res': '$94load_global.40'}), (96, {'res': '$s196.41'}), (98, {'res': '$98load_global.42'}), (100, {'res': '$const100.43'}), (102, {'func': '$98load_global.42', 'args': ['$const100.43'], 'res': '$102call_function.44'}), (104, {'func': '$94load_global.40', 'args': ['$s196.41', '$102call_function.44'], 'res': '$104call_function.45'}), (106, {'func': '$92load_global.39', 'args': ['$104call_function.45'], 'res': '$106call_function.46'}), (108, {'res': '$states108.47'}), (110, {'res': '$index110.48'}), (112, {'index': '$index110.48', 'target': '$states108.47', 'res': '$112binary_subscr.49'}), (114, {'res': '$const114.50'}), (116, {'target': '$112binary_subscr.49', 'index': '$const114.50', 'value': '$106call_function.46'}), (118, {'res': '$result118.51'}), (120, {'retval': '$result118.51', 'castval': '$120return_value.52'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:03 PM - DEBUG - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $14binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$14binary_subscr.5', 'index.1', 'states']
    $const16.6 = const(str, s0)              ['$const16.6']
    s0 = getitem(value=$14binary_subscr.5, index=$const16.6, fn=<built-in function getitem>) ['$14binary_subscr.5', '$const16.6', 's0']
    $26binary_subscr.10 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$26binary_subscr.10', 'index.1', 'states']
    $const28.11 = const(str, s1)             ['$const28.11']
    s1 = getitem(value=$26binary_subscr.10, index=$const28.11, fn=<built-in function getitem>) ['$26binary_subscr.10', '$const28.11', 's1']
    result = s0 + s1                         ['result', 's0', 's1']
    s1.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=s0, static_lhs=Undefined, static_rhs=Undefined) ['s0', 's1', 's1.1']
    $50load_global.19 = global(uint64: uint64) ['$50load_global.19']
    $52load_global.20 = global(rotl: CPUDispatcher(<function rotl at 0x000001EDAC503940>)) ['$52load_global.20']
    $56load_global.22 = global(uint32: uint32) ['$56load_global.22']
    $const58.23 = const(int, 55)             ['$const58.23']
    $60call_function.24 = call $56load_global.22($const58.23, func=$56load_global.22, args=[Var($const58.23, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_global.22', '$60call_function.24', '$const58.23']
    $62call_function.25 = call $52load_global.20(s0, $60call_function.24, func=$52load_global.20, args=[Var(s0, random.py:91), Var($60call_function.24, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.20', '$60call_function.24', '$62call_function.25', 's0']
    $64call_function.26 = call $50load_global.19($62call_function.25, func=$50load_global.19, args=[Var($62call_function.25, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.19', '$62call_function.25', '$64call_function.26']
    $68binary_xor.28 = $64call_function.26 ^ s1.1 ['$64call_function.26', '$68binary_xor.28', 's1.1']
    $72load_global.30 = global(uint32: uint32) ['$72load_global.30']
    $const74.31 = const(int, 14)             ['$const74.31']
    $76call_function.32 = call $72load_global.30($const74.31, func=$72load_global.30, args=[Var($const74.31, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.30', '$76call_function.32', '$const74.31']
    $78binary_lshift.33 = s1.1 << $76call_function.32 ['$76call_function.32', '$78binary_lshift.33', 's1.1']
    $80binary_xor.34 = $68binary_xor.28 ^ $78binary_lshift.33 ['$68binary_xor.28', '$78binary_lshift.33', '$80binary_xor.34']
    $86binary_subscr.37 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$86binary_subscr.37', 'index.1', 'states']
    $const88.38 = const(str, s0)             ['$const88.38']
    $86binary_subscr.37[$const88.38] = $80binary_xor.34 ['$80binary_xor.34', '$86binary_subscr.37', '$const88.38']
    $92load_global.39 = global(uint64: uint64) ['$92load_global.39']
    $94load_global.40 = global(rotl: CPUDispatcher(<function rotl at 0x000001EDAC503940>)) ['$94load_global.40']
    $98load_global.42 = global(uint32: uint32) ['$98load_global.42']
    $const100.43 = const(int, 36)            ['$const100.43']
    $102call_function.44 = call $98load_global.42($const100.43, func=$98load_global.42, args=[Var($const100.43, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call_function.44', '$98load_global.42', '$const100.43']
    $104call_function.45 = call $94load_global.40(s1.1, $102call_function.44, func=$94load_global.40, args=[Var(s1.1, random.py:95), Var($102call_function.44, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call_function.44', '$104call_function.45', '$94load_global.40', 's1.1']
    $106call_function.46 = call $92load_global.39($104call_function.45, func=$92load_global.39, args=[Var($104call_function.45, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$104call_function.45', '$106call_function.46', '$92load_global.39']
    $112binary_subscr.49 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.49', 'index.1', 'states']
    $const114.50 = const(str, s1)            ['$const114.50']
    $112binary_subscr.49[$const114.50] = $106call_function.46 ['$106call_function.46', '$112binary_subscr.49', '$const114.50']
    $120return_value.52 = cast(value=result) ['$120return_value.52', 'result']
    return $120return_value.52               ['$120return_value.52']

07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14ADA070>
07/23/2024 06:57:03 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $14binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const16.6 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = static_getitem(value=$14binary_subscr.5, index=s0, index_var=$const16.6, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $26binary_subscr.10 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const28.11 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = static_getitem(value=$26binary_subscr.10, index=s1, index_var=$const28.11, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: result = s0 + s1
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=s0, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50load_global.19 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $52load_global.20 = global(rotl: CPUDispatcher(<function rotl at 0x000001EDAC503940>))
07/23/2024 06:57:03 PM - DEBUG - on stmt: $56load_global.22 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const58.23 = const(int, 55)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $60call_function.24 = call $56load_global.22($const58.23, func=$56load_global.22, args=[Var($const58.23, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62call_function.25 = call $52load_global.20(s0, $60call_function.24, func=$52load_global.20, args=[Var(s0, random.py:91), Var($60call_function.24, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $64call_function.26 = call $50load_global.19($62call_function.25, func=$50load_global.19, args=[Var($62call_function.25, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $68binary_xor.28 = $64call_function.26 ^ s1.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $72load_global.30 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const74.31 = const(int, 14)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $76call_function.32 = call $72load_global.30($const74.31, func=$72load_global.30, args=[Var($const74.31, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $78binary_lshift.33 = s1.1 << $76call_function.32
07/23/2024 06:57:03 PM - DEBUG - on stmt: $80binary_xor.34 = $68binary_xor.28 ^ $78binary_lshift.33
07/23/2024 06:57:03 PM - DEBUG - on stmt: $86binary_subscr.37 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const88.38 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $86binary_subscr.37['s0'] = $80binary_xor.34
07/23/2024 06:57:03 PM - DEBUG - on stmt: $92load_global.39 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $94load_global.40 = global(rotl: CPUDispatcher(<function rotl at 0x000001EDAC503940>))
07/23/2024 06:57:03 PM - DEBUG - on stmt: $98load_global.42 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const100.43 = const(int, 36)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $102call_function.44 = call $98load_global.42($const100.43, func=$98load_global.42, args=[Var($const100.43, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $104call_function.45 = call $94load_global.40(s1.1, $102call_function.44, func=$94load_global.40, args=[Var(s1.1, random.py:95), Var($102call_function.44, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $106call_function.46 = call $92load_global.39($104call_function.45, func=$92load_global.39, args=[Var($104call_function.45, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $112binary_subscr.49 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const114.50 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $112binary_subscr.49['s1'] = $106call_function.46
07/23/2024 06:57:03 PM - DEBUG - on stmt: $120return_value.52 = cast(value=result)
07/23/2024 06:57:03 PM - DEBUG - on stmt: return $120return_value.52
07/23/2024 06:57:03 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$102call_function.44': [(<numba.core.ir.Assign object at 0x000001EE14ADA550>,
                                       0)],
             '$104call_function.45': [(<numba.core.ir.Assign object at 0x000001EE14ADA6D0>,
                                       0)],
             '$106call_function.46': [(<numba.core.ir.Assign object at 0x000001EE14ADA850>,
                                       0)],
             '$112binary_subscr.49': [(<numba.core.ir.Assign object at 0x000001EE14ADABE0>,
                                       0)],
             '$120return_value.52': [(<numba.core.ir.Assign object at 0x000001EE14ADC0D0>,
                                      0)],
             '$14binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001EE14ACC190>,
                                     0)],
             '$26binary_subscr.10': [(<numba.core.ir.Assign object at 0x000001EE14AB5AC0>,
                                      0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE14AD2100>,
                                  0)],
             '$50load_global.19': [(<numba.core.ir.Assign object at 0x000001EE14AD6070>,
                                    0)],
             '$52load_global.20': [(<numba.core.ir.Assign object at 0x000001EE14AD61F0>,
                                    0)],
             '$56load_global.22': [(<numba.core.ir.Assign object at 0x000001EE14AD6490>,
                                    0)],
             '$60call_function.24': [(<numba.core.ir.Assign object at 0x000001EE14AD67F0>,
                                      0)],
             '$62call_function.25': [(<numba.core.ir.Assign object at 0x000001EE14AD6970>,
                                      0)],
             '$64call_function.26': [(<numba.core.ir.Assign object at 0x000001EE14AD6AF0>,
                                      0)],
             '$68binary_xor.28': [(<numba.core.ir.Assign object at 0x000001EE14AD6D60>,
                                   0)],
             '$72load_global.30': [(<numba.core.ir.Assign object at 0x000001EE14AD6FD0>,
                                    0)],
             '$76call_function.32': [(<numba.core.ir.Assign object at 0x000001EE14AD8370>,
                                      0)],
             '$78binary_lshift.33': [(<numba.core.ir.Assign object at 0x000001EE14AD84C0>,
                                      0)],
             '$80binary_xor.34': [(<numba.core.ir.Assign object at 0x000001EE14AD8640>,
                                   0)],
             '$86binary_subscr.37': [(<numba.core.ir.Assign object at 0x000001EE14AD8A00>,
                                      0)],
             '$92load_global.39': [(<numba.core.ir.Assign object at 0x000001EE14AD8D90>,
                                    0)],
             '$94load_global.40': [(<numba.core.ir.Assign object at 0x000001EE14AD8F10>,
                                    0)],
             '$98load_global.42': [(<numba.core.ir.Assign object at 0x000001EE14ADA1F0>,
                                    0)],
             '$const100.43': [(<numba.core.ir.Assign object at 0x000001EE14ADA370>,
                               0)],
             '$const114.50': [(<numba.core.ir.Assign object at 0x000001EE14ADAD30>,
                               0)],
             '$const16.6': [(<numba.core.ir.Assign object at 0x000001EE14ACC040>,
                             0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001EE14AB58B0>,
                              0)],
             '$const58.23': [(<numba.core.ir.Assign object at 0x000001EE14AD6610>,
                              0)],
             '$const74.31': [(<numba.core.ir.Assign object at 0x000001EE14AD8190>,
                              0)],
             '$const88.38': [(<numba.core.ir.Assign object at 0x000001EE14AD8B50>,
                              0)],
             'index': [(<numba.core.ir.Assign object at 0x000001EE14ACCF40>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001EE14ACCD00>,
                          0)],
             'result': [(<numba.core.ir.Assign object at 0x000001EE14AD28E0>,
                         0)],
             's0': [(<numba.core.ir.Assign object at 0x000001EE14ADC8B0>, 0)],
             's1': [(<numba.core.ir.Assign object at 0x000001EE14ADC9D0>, 0)],
             's1.1': [(<numba.core.ir.Assign object at 0x000001EE14AD2DC0>, 0)],
             'states': [(<numba.core.ir.Assign object at 0x000001EE14ACCE20>,
                         0)]})
07/23/2024 06:57:03 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE14ADA070>
07/23/2024 06:57:03 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=75)
           4	LOAD_FAST(arg=0, lineno=75)
           6	CALL_FUNCTION(arg=1, lineno=75)
           8	STORE_FAST(arg=0, lineno=75)
          10	LOAD_GLOBAL(arg=1, lineno=76)
          12	LOAD_FAST(arg=1, lineno=76)
          14	CALL_FUNCTION(arg=1, lineno=76)
          16	STORE_FAST(arg=1, lineno=76)
          18	LOAD_FAST(arg=0, lineno=77)
          20	LOAD_FAST(arg=1, lineno=77)
          22	BINARY_LSHIFT(arg=None, lineno=77)
          24	LOAD_FAST(arg=0, lineno=77)
          26	LOAD_GLOBAL(arg=1, lineno=77)
          28	LOAD_CONST(arg=1, lineno=77)
          30	LOAD_FAST(arg=1, lineno=77)
          32	BINARY_SUBTRACT(arg=None, lineno=77)
          34	CALL_FUNCTION(arg=1, lineno=77)
          36	BINARY_RSHIFT(arg=None, lineno=77)
          38	BINARY_OR(arg=None, lineno=77)
          40	RETURN_VALUE(arg=None, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:03 PM - DEBUG - stack: []
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=75)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=75)
07/23/2024 06:57:03 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=75)
07/23/2024 06:57:03 PM - DEBUG - stack ['$2load_global.0', '$x4.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=0, lineno=75)
07/23/2024 06:57:03 PM - DEBUG - stack ['$6call_function.2']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=76)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=76)
07/23/2024 06:57:03 PM - DEBUG - stack ['$10load_global.3']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=76)
07/23/2024 06:57:03 PM - DEBUG - stack ['$10load_global.3', '$k12.4']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=1, lineno=76)
07/23/2024 06:57:03 PM - DEBUG - stack ['$14call_function.5']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$x18.6']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=22, inst=BINARY_LSHIFT(arg=None, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$x18.6', '$k20.7']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8', '$x24.9']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10', '$const28.11']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=32, inst=BINARY_SUBTRACT(arg=None, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10', '$const28.11', '$k30.12']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10', '$32binary_subtract.13']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=36, inst=BINARY_RSHIFT(arg=None, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8', '$x24.9', '$34call_function.14']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=38, inst=BINARY_OR(arg=None, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22binary_lshift.8', '$36binary_rshift.15']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=77)
07/23/2024 06:57:03 PM - DEBUG - stack ['$38binary_or.16']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:03 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:03 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:03 PM - DEBUG - defmap: {}
07/23/2024 06:57:03 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:03 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:03 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:03 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:03 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$k12.4'}), (14, {'func': '$10load_global.3', 'args': ['$k12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$x18.6'}), (20, {'res': '$k20.7'}), (22, {'lhs': '$x18.6', 'rhs': '$k20.7', 'res': '$22binary_lshift.8'}), (24, {'res': '$x24.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$k30.12'}), (32, {'lhs': '$const28.11', 'rhs': '$k30.12', 'res': '$32binary_subtract.13'}), (34, {'func': '$26load_global.10', 'args': ['$32binary_subtract.13'], 'res': '$34call_function.14'}), (36, {'lhs': '$x24.9', 'rhs': '$34call_function.14', 'res': '$36binary_rshift.15'}), (38, {'lhs': '$22binary_lshift.8', 'rhs': '$36binary_rshift.15', 'res': '$38binary_or.16'}), (40, {'retval': '$38binary_or.16', 'castval': '$40return_value.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:03 PM - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    k = arg(1, name=k)                       ['k']
    $2load_global.0 = global(uint64: uint64) ['$2load_global.0']
    x.1 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'x', 'x.1']
    $10load_global.3 = global(uint32: uint32) ['$10load_global.3']
    k.1 = call $10load_global.3(k, func=$10load_global.3, args=[Var(k, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', 'k', 'k.1']
    $22binary_lshift.8 = x.1 << k.1          ['$22binary_lshift.8', 'k.1', 'x.1']
    $26load_global.10 = global(uint32: uint32) ['$26load_global.10']
    $const28.11 = const(int, 64)             ['$const28.11']
    $32binary_subtract.13 = $const28.11 - k.1 ['$32binary_subtract.13', '$const28.11', 'k.1']
    $34call_function.14 = call $26load_global.10($32binary_subtract.13, func=$26load_global.10, args=[Var($32binary_subtract.13, random.py:77)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.10', '$32binary_subtract.13', '$34call_function.14']
    $36binary_rshift.15 = x.1 >> $34call_function.14 ['$34call_function.14', '$36binary_rshift.15', 'x.1']
    $38binary_or.16 = $22binary_lshift.8 | $36binary_rshift.15 ['$22binary_lshift.8', '$36binary_rshift.15', '$38binary_or.16']
    $40return_value.17 = cast(value=$38binary_or.16) ['$38binary_or.16', '$40return_value.17']
    return $40return_value.17                ['$40return_value.17']

07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE14AE4C70>
07/23/2024 06:57:03 PM - DEBUG - on stmt: x = arg(0, name=x)
07/23/2024 06:57:03 PM - DEBUG - on stmt: k = arg(1, name=k)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $2load_global.0 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: x.1 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $10load_global.3 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: k.1 = call $10load_global.3(k, func=$10load_global.3, args=[Var(k, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $22binary_lshift.8 = x.1 << k.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $26load_global.10 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const28.11 = const(int, 64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $32binary_subtract.13 = $const28.11 - k.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $34call_function.14 = call $26load_global.10($32binary_subtract.13, func=$26load_global.10, args=[Var($32binary_subtract.13, random.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $36binary_rshift.15 = x.1 >> $34call_function.14
07/23/2024 06:57:03 PM - DEBUG - on stmt: $38binary_or.16 = $22binary_lshift.8 | $36binary_rshift.15
07/23/2024 06:57:03 PM - DEBUG - on stmt: $40return_value.17 = cast(value=$38binary_or.16)
07/23/2024 06:57:03 PM - DEBUG - on stmt: return $40return_value.17
07/23/2024 06:57:03 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_global.3': [(<numba.core.ir.Assign object at 0x000001EE14AE4A90>,
                                   0)],
             '$22binary_lshift.8': [(<numba.core.ir.Assign object at 0x000001EE14AC3EB0>,
                                     0)],
             '$26load_global.10': [(<numba.core.ir.Assign object at 0x000001EE14ACC610>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE14AE97F0>,
                                  0)],
             '$32binary_subtract.13': [(<numba.core.ir.Assign object at 0x000001EE14AE9A30>,
                                        0)],
             '$34call_function.14': [(<numba.core.ir.Assign object at 0x000001EE14AE94F0>,
                                      0)],
             '$36binary_rshift.15': [(<numba.core.ir.Assign object at 0x000001EE14AE93A0>,
                                      0)],
             '$38binary_or.16': [(<numba.core.ir.Assign object at 0x000001EE14AE9220>,
                                  0)],
             '$40return_value.17': [(<numba.core.ir.Assign object at 0x000001EE14AE9BB0>,
                                     0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001EE14ADC1C0>,
                              0)],
             'k': [(<numba.core.ir.Assign object at 0x000001EE14AE9070>, 0)],
             'k.1': [(<numba.core.ir.Assign object at 0x000001EE14AD0580>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000001EE14AE9190>, 0)],
             'x.1': [(<numba.core.ir.Assign object at 0x000001EE14AE4490>, 0)]})
07/23/2024 06:57:03 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE14AE4C70>
07/23/2024 06:57:03 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=102)
           2	LOAD_GLOBAL(arg=0, lineno=111)
           4	LOAD_FAST(arg=1, lineno=111)
           6	CALL_FUNCTION(arg=1, lineno=111)
           8	STORE_FAST(arg=1, lineno=111)
          10	LOAD_GLOBAL(arg=1, lineno=113)
          12	LOAD_CONST(arg=1, lineno=113)
          14	CALL_FUNCTION(arg=1, lineno=113)
          16	LOAD_GLOBAL(arg=1, lineno=113)
          18	LOAD_CONST(arg=2, lineno=113)
          20	CALL_FUNCTION(arg=1, lineno=113)
          22	BUILD_TUPLE(arg=2, lineno=113)
          24	STORE_FAST(arg=2, lineno=113)
          26	LOAD_GLOBAL(arg=1, lineno=115)
          28	LOAD_CONST(arg=3, lineno=115)
          30	CALL_FUNCTION(arg=1, lineno=115)
          32	STORE_FAST(arg=3, lineno=115)
          34	LOAD_GLOBAL(arg=1, lineno=116)
          36	LOAD_CONST(arg=3, lineno=116)
          38	CALL_FUNCTION(arg=1, lineno=116)
          40	STORE_FAST(arg=4, lineno=116)
          42	LOAD_GLOBAL(arg=2, lineno=118)
          44	LOAD_CONST(arg=4, lineno=118)
          46	CALL_FUNCTION(arg=1, lineno=118)
          48	GET_ITER(arg=None, lineno=118)
>         50	FOR_ITER(arg=84, lineno=118)
          52	STORE_FAST(arg=5, lineno=118)
          54	LOAD_GLOBAL(arg=2, lineno=119)
          56	LOAD_CONST(arg=5, lineno=119)
          58	CALL_FUNCTION(arg=1, lineno=119)
          60	GET_ITER(arg=None, lineno=119)
>         62	FOR_ITER(arg=70, lineno=119)
          64	STORE_FAST(arg=6, lineno=119)
          66	LOAD_FAST(arg=2, lineno=120)
          68	LOAD_FAST(arg=5, lineno=120)
          70	BINARY_SUBSCR(arg=None, lineno=120)
          72	LOAD_GLOBAL(arg=1, lineno=120)
          74	LOAD_CONST(arg=6, lineno=120)
          76	CALL_FUNCTION(arg=1, lineno=120)
          78	LOAD_GLOBAL(arg=3, lineno=120)
          80	LOAD_FAST(arg=6, lineno=120)
          82	CALL_FUNCTION(arg=1, lineno=120)
          84	BINARY_LSHIFT(arg=None, lineno=120)
          86	BINARY_AND(arg=None, lineno=120)
          88	POP_JUMP_IF_FALSE(arg=122, lineno=120)
          90	LOAD_FAST(arg=3, lineno=121)
          92	LOAD_FAST(arg=0, lineno=121)
          94	LOAD_FAST(arg=1, lineno=121)
          96	BINARY_SUBSCR(arg=None, lineno=121)
          98	LOAD_CONST(arg=7, lineno=121)
         100	BINARY_SUBSCR(arg=None, lineno=121)
         102	INPLACE_XOR(arg=None, lineno=121)
         104	STORE_FAST(arg=3, lineno=121)
         106	LOAD_FAST(arg=4, lineno=122)
         108	LOAD_FAST(arg=0, lineno=122)
         110	LOAD_FAST(arg=1, lineno=122)
         112	BINARY_SUBSCR(arg=None, lineno=122)
         114	LOAD_CONST(arg=8, lineno=122)
         116	BINARY_SUBSCR(arg=None, lineno=122)
         118	INPLACE_XOR(arg=None, lineno=122)
         120	STORE_FAST(arg=4, lineno=122)
>        122	LOAD_GLOBAL(arg=4, lineno=123)
         124	LOAD_FAST(arg=0, lineno=123)
         126	LOAD_FAST(arg=1, lineno=123)
         128	CALL_FUNCTION(arg=2, lineno=123)
         130	POP_TOP(arg=None, lineno=123)
         132	JUMP_ABSOLUTE(arg=62, lineno=123)
>        134	JUMP_ABSOLUTE(arg=50, lineno=123)
>        136	LOAD_FAST(arg=3, lineno=125)
         138	LOAD_FAST(arg=0, lineno=125)
         140	LOAD_FAST(arg=1, lineno=125)
         142	BINARY_SUBSCR(arg=None, lineno=125)
         144	LOAD_CONST(arg=7, lineno=125)
         146	STORE_SUBSCR(arg=None, lineno=125)
         148	LOAD_FAST(arg=4, lineno=126)
         150	LOAD_FAST(arg=0, lineno=126)
         152	LOAD_FAST(arg=1, lineno=126)
         154	BINARY_SUBSCR(arg=None, lineno=126)
         156	LOAD_CONST(arg=8, lineno=126)
         158	STORE_SUBSCR(arg=None, lineno=126)
         160	LOAD_CONST(arg=9, lineno=126)
         162	RETURN_VALUE(arg=None, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:03 PM - DEBUG - stack: []
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=102)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=111)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=111)
07/23/2024 06:57:03 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=111)
07/23/2024 06:57:03 PM - DEBUG - stack ['$2load_global.0', '$index4.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=111)
07/23/2024 06:57:03 PM - DEBUG - stack ['$6call_function.2']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack ['$10load_global.3']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack ['$10load_global.3', '$const12.4']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack ['$14call_function.5']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack ['$14call_function.5', '$16load_global.6']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack ['$14call_function.5', '$16load_global.6', '$const18.7']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=22, inst=BUILD_TUPLE(arg=2, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack ['$14call_function.5', '$20call_function.8']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=2, lineno=113)
07/23/2024 06:57:03 PM - DEBUG - stack ['$22build_tuple.9']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=115)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=115)
07/23/2024 06:57:03 PM - DEBUG - stack ['$26load_global.10']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=115)
07/23/2024 06:57:03 PM - DEBUG - stack ['$26load_global.10', '$const28.11']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=3, lineno=115)
07/23/2024 06:57:03 PM - DEBUG - stack ['$30call_function.12']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=34, inst=LOAD_GLOBAL(arg=1, lineno=116)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=116)
07/23/2024 06:57:03 PM - DEBUG - stack ['$34load_global.13']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=116)
07/23/2024 06:57:03 PM - DEBUG - stack ['$34load_global.13', '$const36.14']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=4, lineno=116)
07/23/2024 06:57:03 PM - DEBUG - stack ['$38call_function.15']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=42, inst=LOAD_GLOBAL(arg=2, lineno=118)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=118)
07/23/2024 06:57:03 PM - DEBUG - stack ['$42load_global.16']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=118)
07/23/2024 06:57:03 PM - DEBUG - stack ['$42load_global.16', '$const44.17']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=48, inst=GET_ITER(arg=None, lineno=118)
07/23/2024 06:57:03 PM - DEBUG - stack ['$46call_function.18']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=50, stack=('$48get_iter.19',), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=50 nstack_initial=1)])
07/23/2024 06:57:03 PM - DEBUG - stack: ['$phi50.0']
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=50 nstack_initial=1)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=50, inst=FOR_ITER(arg=84, lineno=118)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi50.0']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=('$phi50.0', '$50for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=52 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - stack: []
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=136 nstack_initial=0)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=136, inst=LOAD_FAST(arg=3, lineno=125)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=125)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s0136.0']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=1, lineno=125)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s0136.0', '$states138.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=142, inst=BINARY_SUBSCR(arg=None, lineno=125)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s0136.0', '$states138.1', '$index140.2']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=144, inst=LOAD_CONST(arg=7, lineno=125)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s0136.0', '$142binary_subscr.3']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=125)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s0136.0', '$142binary_subscr.3', '$const144.4']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=150, inst=LOAD_FAST(arg=0, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s1148.5']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s1148.5', '$states150.6']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=154, inst=BINARY_SUBSCR(arg=None, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s1148.5', '$states150.6', '$index152.7']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=156, inst=LOAD_CONST(arg=8, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s1148.5', '$154binary_subscr.8']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=158, inst=STORE_SUBSCR(arg=None, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack ['$s1148.5', '$154binary_subscr.8', '$const156.9']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=160, inst=LOAD_CONST(arg=9, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack []
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=162, inst=RETURN_VALUE(arg=None, lineno=126)
07/23/2024 06:57:03 PM - DEBUG - stack ['$const160.10']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - stack: ['$phi52.0', '$phi52.1']
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=2)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=52, inst=STORE_FAST(arg=5, lineno=118)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi52.0', '$phi52.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=119)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi52.0']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=5, lineno=119)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi52.0', '$54load_global.2']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=119)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi52.0', '$54load_global.2', '$const56.3']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=60, inst=GET_ITER(arg=None, lineno=119)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi52.0', '$58call_function.4']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=62, stack=('$phi52.0', '$60get_iter.5'), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - stack: ['$phi62.0', '$phi62.1']
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=2)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=62, inst=FOR_ITER(arg=70, lineno=119)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi62.0', '$phi62.1']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=134, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=64, stack=('$phi62.0', '$phi62.1', '$62for_iter.3'), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=1), State(pc_initial=64 nstack_initial=3)])
07/23/2024 06:57:03 PM - DEBUG - stack: ['$phi134.0']
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=134 nstack_initial=1)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=134, inst=JUMP_ABSOLUTE(arg=50, lineno=123)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi134.0']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=50, stack=('$phi134.0',), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=3), State(pc_initial=50 nstack_initial=1)])
07/23/2024 06:57:03 PM - DEBUG - stack: ['$phi64.0', '$phi64.1', '$phi64.2']
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=3)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=64, inst=STORE_FAST(arg=6, lineno=119)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$phi64.2']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$jump66.3']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$jump66.3', '$i68.4']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=1, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=6, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6', '$const74.7']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=78, inst=LOAD_GLOBAL(arg=3, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9', '$b80.10']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=84, inst=BINARY_LSHIFT(arg=None, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$82call_function.11']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=86, inst=BINARY_AND(arg=None, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$84binary_lshift.12']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=122, lineno=120)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi64.0', '$phi64.1', '$86binary_and.13']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=90, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0), Edge(pc=122, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - stack: ['$phi90.0', '$phi90.1']
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=2)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=0, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3', '$index94.4']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=7, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=100, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5', '$const98.6']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=102, inst=INPLACE_XOR(arg=None, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s090.2', '$100binary_subscr.7']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=104, inst=STORE_FAST(arg=3, lineno=121)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$102inplace_xor.8']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10', '$index110.11']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=114, inst=LOAD_CONST(arg=8, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=116, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12', '$const114.13']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=118, inst=INPLACE_XOR(arg=None, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$116binary_subscr.14']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=4, lineno=122)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi90.0', '$phi90.1', '$118inplace_xor.15']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=122, stack=('$phi90.0', '$phi90.1'), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - stack: ['$phi122.0', '$phi122.1']
07/23/2024 06:57:03 PM - DEBUG - state.pc_initial: State(pc_initial=122 nstack_initial=2)
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=4, lineno=123)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi122.0', '$phi122.1']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=123)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$122load_global.2']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=1, lineno=123)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=128, inst=CALL_FUNCTION(arg=2, lineno=123)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3', '$index126.4']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=130, inst=POP_TOP(arg=None, lineno=123)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi122.0', '$phi122.1', '$128call_function.5']
07/23/2024 06:57:03 PM - DEBUG - dispatch pc=132, inst=JUMP_ABSOLUTE(arg=62, lineno=123)
07/23/2024 06:57:03 PM - DEBUG - stack ['$phi122.0', '$phi122.1']
07/23/2024 06:57:03 PM - DEBUG - end state. edges=[Edge(pc=62, stack=('$phi122.0', '$phi122.1'), blockstack=(), npush=0)]
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=62 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/23/2024 06:57:03 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:03 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=1): {'$phi50.0'},
             State(pc_initial=52 nstack_initial=2): {'$phi52.1'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=64 nstack_initial=3): {'$phi64.2'},
             State(pc_initial=90 nstack_initial=2): set(),
             State(pc_initial=122 nstack_initial=2): set(),
             State(pc_initial=134 nstack_initial=1): set(),
             State(pc_initial=136 nstack_initial=0): set()})
07/23/2024 06:57:03 PM - DEBUG - defmap: {'$phi50.0': State(pc_initial=0 nstack_initial=0),
 '$phi52.1': State(pc_initial=50 nstack_initial=1),
 '$phi62.1': State(pc_initial=52 nstack_initial=2),
 '$phi64.2': State(pc_initial=62 nstack_initial=2)}
07/23/2024 06:57:03 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=2))},
             '$phi122.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.1', State(pc_initial=90 nstack_initial=2))},
             '$phi134.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi134.0',
                           State(pc_initial=134 nstack_initial=1))},
             '$phi52.0': {('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi122.1',
                           State(pc_initial=122 nstack_initial=2))},
             '$phi64.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi64.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3))},
             '$phi90.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3))}})
07/23/2024 06:57:03 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi122.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi134.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/23/2024 06:57:03 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/23/2024 06:57:03 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/23/2024 06:57:03 PM - DEBUG - keep phismap: {'$phi50.0': {('$48get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi52.1': {('$50for_iter.2', State(pc_initial=50 nstack_initial=1))},
 '$phi62.1': {('$60get_iter.5', State(pc_initial=52 nstack_initial=2))},
 '$phi64.2': {('$62for_iter.3', State(pc_initial=62 nstack_initial=2))}}
07/23/2024 06:57:03 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi50.0': '$48get_iter.19'},
             State(pc_initial=50 nstack_initial=1): {'$phi52.1': '$50for_iter.2'},
             State(pc_initial=52 nstack_initial=2): {'$phi62.1': '$60get_iter.5'},
             State(pc_initial=62 nstack_initial=2): {'$phi64.2': '$62for_iter.3'}})
07/23/2024 06:57:03 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$const12.4'}), (14, {'func': '$10load_global.3', 'args': ['$const12.4'], 'res': '$14call_function.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$16load_global.6', 'args': ['$const18.7'], 'res': '$20call_function.8'}), (22, {'items': ['$14call_function.5', '$20call_function.8'], 'res': '$22build_tuple.9'}), (24, {'value': '$22build_tuple.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$const28.11'}), (30, {'func': '$26load_global.10', 'args': ['$const28.11'], 'res': '$30call_function.12'}), (32, {'value': '$30call_function.12'}), (34, {'res': '$34load_global.13'}), (36, {'res': '$const36.14'}), (38, {'func': '$34load_global.13', 'args': ['$const36.14'], 'res': '$38call_function.15'}), (40, {'value': '$38call_function.15'}), (42, {'res': '$42load_global.16'}), (44, {'res': '$const44.17'}), (46, {'func': '$42load_global.16', 'args': ['$const44.17'], 'res': '$46call_function.18'}), (48, {'value': '$46call_function.18', 'res': '$48get_iter.19'})), outgoing_phis={'$phi50.0': '$48get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$48get_iter.19',)})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'iterator': '$phi50.0', 'pair': '$50for_iter.1', 'indval': '$50for_iter.2', 'pred': '$50for_iter.3'}),), outgoing_phis={'$phi52.1': '$50for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: (), 52: ('$phi50.0', '$50for_iter.2')})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=52 nstack_initial=2):
AdaptBlockInfo(insts=((52, {'value': '$phi52.1'}), (54, {'res': '$54load_global.2'}), (56, {'res': '$const56.3'}), (58, {'func': '$54load_global.2', 'args': ['$const56.3'], 'res': '$58call_function.4'}), (60, {'value': '$58call_function.4', 'res': '$60get_iter.5'})), outgoing_phis={'$phi62.1': '$60get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi52.0', '$60get_iter.5')})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'iterator': '$phi62.1', 'pair': '$62for_iter.2', 'indval': '$62for_iter.3', 'pred': '$62for_iter.4'}),), outgoing_phis={'$phi64.2': '$62for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ('$phi62.0',), 64: ('$phi62.0', '$phi62.1', '$62for_iter.3')})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=64 nstack_initial=3):
AdaptBlockInfo(insts=((64, {'value': '$phi64.2'}), (66, {'res': '$jump66.3'}), (68, {'res': '$i68.4'}), (70, {'index': '$i68.4', 'target': '$jump66.3', 'res': '$70binary_subscr.5'}), (72, {'res': '$72load_global.6'}), (74, {'res': '$const74.7'}), (76, {'func': '$72load_global.6', 'args': ['$const74.7'], 'res': '$76call_function.8'}), (78, {'res': '$78load_global.9'}), (80, {'res': '$b80.10'}), (82, {'func': '$78load_global.9', 'args': ['$b80.10'], 'res': '$82call_function.11'}), (84, {'lhs': '$76call_function.8', 'rhs': '$82call_function.11', 'res': '$84binary_lshift.12'}), (86, {'lhs': '$70binary_subscr.5', 'rhs': '$84binary_lshift.12', 'res': '$86binary_and.13'}), (88, {'pred': '$86binary_and.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi64.0', '$phi64.1'), 122: ('$phi64.0', '$phi64.1')})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=90 nstack_initial=2):
AdaptBlockInfo(insts=((90, {'res': '$s090.2'}), (92, {'res': '$states92.3'}), (94, {'res': '$index94.4'}), (96, {'index': '$index94.4', 'target': '$states92.3', 'res': '$96binary_subscr.5'}), (98, {'res': '$const98.6'}), (100, {'index': '$const98.6', 'target': '$96binary_subscr.5', 'res': '$100binary_subscr.7'}), (102, {'lhs': '$s090.2', 'rhs': '$100binary_subscr.7', 'res': '$102inplace_xor.8'}), (104, {'value': '$102inplace_xor.8'}), (106, {'res': '$s1106.9'}), (108, {'res': '$states108.10'}), (110, {'res': '$index110.11'}), (112, {'index': '$index110.11', 'target': '$states108.10', 'res': '$112binary_subscr.12'}), (114, {'res': '$const114.13'}), (116, {'index': '$const114.13', 'target': '$112binary_subscr.12', 'res': '$116binary_subscr.14'}), (118, {'lhs': '$s1106.9', 'rhs': '$116binary_subscr.14', 'res': '$118inplace_xor.15'}), (120, {'value': '$118inplace_xor.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: ('$phi90.0', '$phi90.1')})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'res': '$122load_global.2'}), (124, {'res': '$states124.3'}), (126, {'res': '$index126.4'}), (128, {'func': '$122load_global.2', 'args': ['$states124.3', '$index126.4'], 'res': '$128call_function.5'}), (132, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi122.0', '$phi122.1')})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=134 nstack_initial=1):
AdaptBlockInfo(insts=((134, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi134.0',)})
07/23/2024 06:57:03 PM - DEBUG - block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$s0136.0'}), (138, {'res': '$states138.1'}), (140, {'res': '$index140.2'}), (142, {'index': '$index140.2', 'target': '$states138.1', 'res': '$142binary_subscr.3'}), (144, {'res': '$const144.4'}), (146, {'target': '$142binary_subscr.3', 'index': '$const144.4', 'value': '$s0136.0'}), (148, {'res': '$s1148.5'}), (150, {'res': '$states150.6'}), (152, {'res': '$index152.7'}), (154, {'index': '$index152.7', 'target': '$states150.6', 'res': '$154binary_subscr.8'}), (156, {'res': '$const156.9'}), (158, {'target': '$154binary_subscr.8', 'index': '$const156.9', 'value': '$s1148.5'}), (160, {'res': '$const160.10'}), (162, {'retval': '$const160.10', 'castval': '$162return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:03 PM - DEBUG - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $10load_global.3 = global(uint64: uint64) ['$10load_global.3']
    $const12.4 = const(int, 13739361407582206667) ['$const12.4']
    $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', '$const12.4']
    $16load_global.6 = global(uint64: uint64) ['$16load_global.6']
    $const18.7 = const(int, 15594563132006766882) ['$const18.7']
    $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.6', '$20call_function.8', '$const18.7']
    jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)]) ['$14call_function.5', '$20call_function.8', 'jump']
    $26load_global.10 = global(uint64: uint64) ['$26load_global.10']
    $const28.11 = const(int, 0)              ['$const28.11']
    s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.10', '$const28.11', 's0']
    $34load_global.13 = global(uint64: uint64) ['$34load_global.13']
    $const36.14 = const(int, 0)              ['$const36.14']
    s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.13', '$const36.14', 's1']
    $42load_global.16 = global(range: <class 'range'>) ['$42load_global.16']
    $const44.17 = const(int, 2)              ['$const44.17']
    $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.16', '$46call_function.18', '$const44.17']
    $48get_iter.19 = getiter(value=$46call_function.18) ['$46call_function.18', '$48get_iter.19']
    $phi50.0 = $48get_iter.19                ['$48get_iter.19', '$phi50.0']
    jump 50                                  []
label 50:
    $50for_iter.1 = iternext(value=$phi50.0) ['$50for_iter.1', '$phi50.0']
    $50for_iter.2 = pair_first(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.2']
    $50for_iter.3 = pair_second(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.3']
    $phi52.1 = $50for_iter.2                 ['$50for_iter.2', '$phi52.1']
    branch $50for_iter.3, 52, 136            ['$50for_iter.3']
label 52:
    i = $phi52.1                             ['$phi52.1', 'i']
    $54load_global.2 = global(range: <class 'range'>) ['$54load_global.2']
    $const56.3 = const(int, 64)              ['$const56.3']
    $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$54load_global.2', '$58call_function.4', '$const56.3']
    $60get_iter.5 = getiter(value=$58call_function.4) ['$58call_function.4', '$60get_iter.5']
    $phi62.1 = $60get_iter.5                 ['$60get_iter.5', '$phi62.1']
    jump 62                                  []
label 62:
    $62for_iter.2 = iternext(value=$phi62.1) ['$62for_iter.2', '$phi62.1']
    $62for_iter.3 = pair_first(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.3']
    $62for_iter.4 = pair_second(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.4']
    $phi64.2 = $62for_iter.3                 ['$62for_iter.3', '$phi64.2']
    branch $62for_iter.4, 64, 134            ['$62for_iter.4']
label 64:
    b = $phi64.2                             ['$phi64.2', 'b']
    $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>) ['$70binary_subscr.5', 'i', 'jump']
    $72load_global.6 = global(uint64: uint64) ['$72load_global.6']
    $const74.7 = const(int, 1)               ['$const74.7']
    $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.6', '$76call_function.8', '$const74.7']
    $78load_global.9 = global(uint32: uint32) ['$78load_global.9']
    $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$78load_global.9', '$82call_function.11', 'b']
    $84binary_lshift.12 = $76call_function.8 << $82call_function.11 ['$76call_function.8', '$82call_function.11', '$84binary_lshift.12']
    $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12 ['$70binary_subscr.5', '$84binary_lshift.12', '$86binary_and.13']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None) ['$86binary_and.13', '$88pred', 'bool88']
    branch $88pred, 90, 122                  ['$88pred']
label 90:
    $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$96binary_subscr.5', 'index.1', 'states']
    $const98.6 = const(str, s0)              ['$const98.6']
    $100binary_subscr.7 = getitem(value=$96binary_subscr.5, index=$const98.6, fn=<built-in function getitem>) ['$100binary_subscr.7', '$96binary_subscr.5', '$const98.6']
    $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined) ['$100binary_subscr.7', '$102inplace_xor.8', 's0']
    s0 = $102inplace_xor.8                   ['$102inplace_xor.8', 's0']
    $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.12', 'index.1', 'states']
    $const114.13 = const(str, s1)            ['$const114.13']
    $116binary_subscr.14 = getitem(value=$112binary_subscr.12, index=$const114.13, fn=<built-in function getitem>) ['$112binary_subscr.12', '$116binary_subscr.14', '$const114.13']
    $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined) ['$116binary_subscr.14', '$118inplace_xor.15', 's1']
    s1 = $118inplace_xor.15                  ['$118inplace_xor.15', 's1']
    jump 122                                 []
label 122:
    $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>)) ['$122load_global.2']
    $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.2', '$128call_function.5', 'index.1', 'states']
    jump 62                                  []
label 134:
    jump 50                                  []
label 136:
    $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$142binary_subscr.3', 'index.1', 'states']
    $const144.4 = const(str, s0)             ['$const144.4']
    $142binary_subscr.3[$const144.4] = s0    ['$142binary_subscr.3', '$const144.4', 's0']
    $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$154binary_subscr.8', 'index.1', 'states']
    $const156.9 = const(str, s1)             ['$const156.9']
    $154binary_subscr.8[$const156.9] = s1    ['$154binary_subscr.8', '$const156.9', 's1']
    $const160.10 = const(NoneType, None)     ['$const160.10']
    $162return_value.11 = cast(value=$const160.10) ['$162return_value.11', '$const160.10']
    return $162return_value.11               ['$162return_value.11']

07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 50
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 52
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 62
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 64
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:03 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:03 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 90
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = $102inplace_xor.8
07/23/2024 06:57:03 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 122
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:03 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 134
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block analysis pass on 136
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:03 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:03 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$100binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001EE14B0B610>,
                                      90)],
             '$102inplace_xor.8': [(<numba.core.ir.Assign object at 0x000001EE14B40520>,
                                    90)],
             '$10load_global.3': [(<numba.core.ir.Assign object at 0x000001EE14B04D60>,
                                   0)],
             '$112binary_subscr.12': [(<numba.core.ir.Assign object at 0x000001EE14B2CC10>,
                                       90)],
             '$116binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001EE14B0B9A0>,
                                       90)],
             '$118inplace_xor.15': [(<numba.core.ir.Assign object at 0x000001EE14B2C250>,
                                     90)],
             '$122load_global.2': [(<numba.core.ir.Assign object at 0x000001EE14B2EB50>,
                                    122)],
             '$128call_function.5': [(<numba.core.ir.Assign object at 0x000001EE14B2C9D0>,
                                      122)],
             '$142binary_subscr.3': [(<numba.core.ir.Assign object at 0x000001EE14B239A0>,
                                      136)],
             '$14call_function.5': [(<numba.core.ir.Assign object at 0x000001EE14B04400>,
                                     0)],
             '$154binary_subscr.8': [(<numba.core.ir.Assign object at 0x000001EE14B235B0>,
                                      136)],
             '$162return_value.11': [(<numba.core.ir.Assign object at 0x000001EE14B0BCA0>,
                                      136)],
             '$16load_global.6': [(<numba.core.ir.Assign object at 0x000001EE14B04790>,
                                   0)],
             '$20call_function.8': [(<numba.core.ir.Assign object at 0x000001EE14B04A30>,
                                     0)],
             '$26load_global.10': [(<numba.core.ir.Assign object at 0x000001EE14A508B0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE14B04430>,
                                  0)],
             '$34load_global.13': [(<numba.core.ir.Assign object at 0x000001EE14A50BB0>,
                                    0)],
             '$42load_global.16': [(<numba.core.ir.Assign object at 0x000001EE14A50B50>,
                                    0)],
             '$46call_function.18': [(<numba.core.ir.Assign object at 0x000001EE14AED8E0>,
                                      0)],
             '$48get_iter.19': [(<numba.core.ir.Assign object at 0x000001EE14AED610>,
                                 0)],
             '$50for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE14AED670>,
                                50)],
             '$50for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14AEDBE0>,
                                50)],
             '$50for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14AED370>,
                                50)],
             '$54load_global.2': [(<numba.core.ir.Assign object at 0x000001EE14AED5E0>,
                                   52)],
             '$58call_function.4': [(<numba.core.ir.Assign object at 0x000001EE14ACC670>,
                                     52)],
             '$60get_iter.5': [(<numba.core.ir.Assign object at 0x000001EE14B2E730>,
                                52)],
             '$62for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14B2EF70>,
                                62)],
             '$62for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14B2E3A0>,
                                62)],
             '$62for_iter.4': [(<numba.core.ir.Assign object at 0x000001EE14B2EAC0>,
                                62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001EE14B2EDF0>,
                                     64)],
             '$72load_global.6': [(<numba.core.ir.Assign object at 0x000001EE14B39430>,
                                   64)],
             '$76call_function.8': [(<numba.core.ir.Assign object at 0x000001EE14B39A60>,
                                     64)],
             '$78load_global.9': [(<numba.core.ir.Assign object at 0x000001EE14B39130>,
                                   64)],
             '$82call_function.11': [(<numba.core.ir.Assign object at 0x000001EE14B39FA0>,
                                      64)],
             '$84binary_lshift.12': [(<numba.core.ir.Assign object at 0x000001EE14B397F0>,
                                      64)],
             '$86binary_and.13': [(<numba.core.ir.Assign object at 0x000001EE14B392B0>,
                                   64)],
             '$88pred': [(<numba.core.ir.Assign object at 0x000001EE14B402B0>,
                          64)],
             '$96binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001EE14B40C70>,
                                     90)],
             '$const114.13': [(<numba.core.ir.Assign object at 0x000001EE14B2C3D0>,
                               90)],
             '$const12.4': [(<numba.core.ir.Assign object at 0x000001EE14B04F40>,
                             0)],
             '$const144.4': [(<numba.core.ir.Assign object at 0x000001EE14B23730>,
                              136)],
             '$const156.9': [(<numba.core.ir.Assign object at 0x000001EE14B234F0>,
                              136)],
             '$const160.10': [(<numba.core.ir.Assign object at 0x000001EE14B0BF40>,
                               136)],
             '$const18.7': [(<numba.core.ir.Assign object at 0x000001EE14B04850>,
                             0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001EE14A50E50>,
                              0)],
             '$const36.14': [(<numba.core.ir.Assign object at 0x000001EE14A505B0>,
                              0)],
             '$const44.17': [(<numba.core.ir.Assign object at 0x000001EE14A50550>,
                              0)],
             '$const56.3': [(<numba.core.ir.Assign object at 0x000001EE14AED6D0>,
                             52)],
             '$const74.7': [(<numba.core.ir.Assign object at 0x000001EE14B39AF0>,
                             64)],
             '$const98.6': [(<numba.core.ir.Assign object at 0x000001EE14B40D30>,
                             90)],
             '$phi50.0': [(<numba.core.ir.Assign object at 0x000001EE14B042B0>,
                           0)],
             '$phi52.1': [(<numba.core.ir.Assign object at 0x000001EE14AEDEE0>,
                           50)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x000001EE14B2EA30>,
                           52)],
             '$phi64.2': [(<numba.core.ir.Assign object at 0x000001EE14B2E490>,
                           62)],
             'b': [(<numba.core.ir.Assign object at 0x000001EE14B2EB20>, 64)],
             'bool88': [(<numba.core.ir.Assign object at 0x000001EE14B39D90>,
                         64)],
             'i': [(<numba.core.ir.Assign object at 0x000001EE14AEDA90>, 52)],
             'index': [(<numba.core.ir.Assign object at 0x000001EE14A3B490>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001EE14B04340>,
                          0)],
             'jump': [(<numba.core.ir.Assign object at 0x000001EE14B04100>, 0)],
             's0': [(<numba.core.ir.Assign object at 0x000001EE14A506D0>, 0),
                    (<numba.core.ir.Assign object at 0x000001EE14B40280>, 90)],
             's1': [(<numba.core.ir.Assign object at 0x000001EE14A50C40>, 0),
                    (<numba.core.ir.Assign object at 0x000001EE14B2C8B0>, 90)],
             'states': [(<numba.core.ir.Assign object at 0x000001EE14A3BE50>,
                         0)]})
07/23/2024 06:57:03 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE1497B100>
07/23/2024 06:57:03 PM - DEBUG - Fix SSA violator on var s0
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - first assign: s0
07/23/2024 06:57:03 PM - DEBUG - replaced with: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:03 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:03 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = $102inplace_xor.8
07/23/2024 06:57:03 PM - DEBUG - replaced with: s0.1 = $102inplace_xor.8
07/23/2024 06:57:03 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:03 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:03 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:03 PM - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EE14AE9EE0>],
             90: [<numba.core.ir.Assign object at 0x000001EE14B1E370>]})
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:03 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:03 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - find_def var='s0' stmt=$102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 90
07/23/2024 06:57:03 PM - DEBUG - idom 64 from label 90
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:03 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 62
07/23/2024 06:57:03 PM - DEBUG - insert phi node s0.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 122
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 122
07/23/2024 06:57:03 PM - DEBUG - insert phi node s0.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:03 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:03 PM - DEBUG - incoming_def s0.2 = phi(incoming_values=[], incoming_blocks=[])
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 90
07/23/2024 06:57:03 PM - DEBUG - incoming_def s0.1 = $102inplace_xor.8
07/23/2024 06:57:03 PM - DEBUG - incoming_def s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 52
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 52
07/23/2024 06:57:03 PM - DEBUG - idom 50 from label 52
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 50
07/23/2024 06:57:03 PM - DEBUG - insert phi node s0.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 0
07/23/2024 06:57:03 PM - DEBUG - incoming_def s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 134
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 134
07/23/2024 06:57:03 PM - DEBUG - idom 62 from label 134
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:03 PM - DEBUG - incoming_def s0.2 = phi(incoming_values=[Var(s0.3, random.py:121)], incoming_blocks=[122])
07/23/2024 06:57:03 PM - DEBUG - incoming_def s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:03 PM - DEBUG - replaced with: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.1 = $102inplace_xor.8
07/23/2024 06:57:03 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:03 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0
07/23/2024 06:57:03 PM - DEBUG - find_def var='s0' stmt=$142binary_subscr.3['s0'] = s0
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 136
07/23/2024 06:57:03 PM - DEBUG - idom 50 from label 136
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:03 PM - DEBUG - replaced with: $142binary_subscr.3['s0'] = s0.4
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:03 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:03 PM - DEBUG - Fix SSA violator on var s1
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - first assign: s1
07/23/2024 06:57:03 PM - DEBUG - replaced with: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:03 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:03 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.1 = $102inplace_xor.8
07/23/2024 06:57:03 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = $118inplace_xor.15
07/23/2024 06:57:03 PM - DEBUG - replaced with: s1.1 = $118inplace_xor.15
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:03 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE14AE9CA0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0.4
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:03 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:03 PM - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EE14B1E910>],
             90: [<numba.core.ir.Assign object at 0x000001EE14B1E1C0>]})
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: states = arg(0, name=states)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index = arg(1, name=index)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $2load_global.0 = global(int64: int64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $10load_global.3 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const12.4 = const(int, 13739361407582206667)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $16load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const18.7 = const(int, 15594563132006766882)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $26load_global.10 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const28.11 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $34load_global.13 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const36.14 = const(int, 0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const44.17 = const(int, 2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi50.0 = $48get_iter.19
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 50
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi52.1 = $50for_iter.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $50for_iter.3, 52, 136
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 52
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: i = $phi52.1
07/23/2024 06:57:03 PM - DEBUG - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const56.3 = const(int, 64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi62.1 = $60get_iter.5
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 62
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $phi64.2 = $62for_iter.3
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $62for_iter.4, 64, 134
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 64
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: b = $phi64.2
07/23/2024 06:57:03 PM - DEBUG - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $72load_global.6 = global(uint64: uint64)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const74.7 = const(int, 1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $78load_global.9 = global(uint32: uint32)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/23/2024 06:57:03 PM - DEBUG - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/23/2024 06:57:03 PM - DEBUG - on stmt: bool88 = global(bool: <class 'bool'>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: branch $88pred, 90, 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 90
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const98.6 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.1 = $102inplace_xor.8
07/23/2024 06:57:03 PM - DEBUG - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const114.13 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - find_def var='s1' stmt=$118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 90
07/23/2024 06:57:03 PM - DEBUG - idom 64 from label 90
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:03 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 62
07/23/2024 06:57:03 PM - DEBUG - insert phi node s1.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 122
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 122
07/23/2024 06:57:03 PM - DEBUG - insert phi node s1.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 64
07/23/2024 06:57:03 PM - DEBUG - idom 62 from label 64
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:03 PM - DEBUG - incoming_def s1.2 = phi(incoming_values=[], incoming_blocks=[])
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 90
07/23/2024 06:57:03 PM - DEBUG - incoming_def s1.1 = $118inplace_xor.15
07/23/2024 06:57:03 PM - DEBUG - incoming_def s1.3 = phi(incoming_values=[Var(s1.2, random.py:121), Var(s1.1, random.py:122)], incoming_blocks=[64, 90])
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 52
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 52
07/23/2024 06:57:03 PM - DEBUG - idom 50 from label 52
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 50
07/23/2024 06:57:03 PM - DEBUG - insert phi node s1.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 0
07/23/2024 06:57:03 PM - DEBUG - incoming_def s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 134
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 134
07/23/2024 06:57:03 PM - DEBUG - idom 62 from label 134
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 62
07/23/2024 06:57:03 PM - DEBUG - incoming_def s1.2 = phi(incoming_values=[Var(s1.3, random.py:121)], incoming_blocks=[122])
07/23/2024 06:57:03 PM - DEBUG - incoming_def s1.4 = phi(incoming_values=[Var(s1, random.py:116), Var(s1.2, random.py:121)], incoming_blocks=[0, 134])
07/23/2024 06:57:03 PM - DEBUG - replaced with: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1.2, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:03 PM - DEBUG - on stmt: s1.1 = $118inplace_xor.15
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 122
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 122
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/23/2024 06:57:03 PM - DEBUG - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001EDAC503AF0>))
07/23/2024 06:57:03 PM - DEBUG - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 62
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 134
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: jump 50
07/23/2024 06:57:03 PM - DEBUG - ==== SSA block rewrite pass on 136
07/23/2024 06:57:03 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE14AFA0A0>
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const144.4 = const(str, s0)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $142binary_subscr.3['s0'] = s0.4
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const156.9 = const(str, s1)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $154binary_subscr.8['s1'] = s1
07/23/2024 06:57:03 PM - DEBUG - find_def var='s1' stmt=$154binary_subscr.8['s1'] = s1
07/23/2024 06:57:03 PM - DEBUG - find_def_from_top label 136
07/23/2024 06:57:03 PM - DEBUG - idom 50 from label 136
07/23/2024 06:57:03 PM - DEBUG - find_def_from_bottom label 50
07/23/2024 06:57:03 PM - DEBUG - replaced with: $154binary_subscr.8['s1'] = s1.4
07/23/2024 06:57:03 PM - DEBUG - on stmt: $const160.10 = const(NoneType, None)
07/23/2024 06:57:03 PM - DEBUG - on stmt: $162return_value.11 = cast(value=$const160.10)
07/23/2024 06:57:03 PM - DEBUG - on stmt: return $162return_value.11
07/23/2024 06:57:04 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=69)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_GLOBAL(arg=1, lineno=86)
           6	LOAD_ATTR(arg=2, lineno=86)
           8	LOAD_ATTR(arg=3, lineno=86)
          10	CALL_FUNCTION(arg=1, lineno=86)
          12	STORE_FAST(arg=13, lineno=86)
          14	LOAD_GLOBAL(arg=4, lineno=87)
          16	LOAD_GLOBAL(arg=1, lineno=87)
          18	LOAD_ATTR(arg=5, lineno=87)
          20	LOAD_ATTR(arg=3, lineno=87)
          22	CALL_FUNCTION(arg=1, lineno=87)
          24	STORE_FAST(arg=14, lineno=87)
          26	LOAD_GLOBAL(arg=4, lineno=88)
          28	LOAD_FAST(arg=0, lineno=88)
          30	LOAD_FAST(arg=14, lineno=88)
          32	BINARY_MULTIPLY(arg=None, lineno=88)
          34	LOAD_FAST(arg=13, lineno=88)
          36	BINARY_ADD(arg=None, lineno=88)
          38	CALL_FUNCTION(arg=1, lineno=88)
          40	STORE_FAST(arg=15, lineno=88)
          42	LOAD_FAST(arg=15, lineno=92)
          44	LOAD_GLOBAL(arg=6, lineno=92)
          46	LOAD_FAST(arg=2, lineno=92)
          48	CALL_FUNCTION(arg=1, lineno=92)
          50	COMPARE_OP(arg=5, lineno=92)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=92)
          54	LOAD_CONST(arg=0, lineno=93)
          56	RETURN_VALUE(arg=None, lineno=93)
>         58	LOAD_DEREF(arg=2, lineno=95)
          60	LOAD_FAST(arg=6, lineno=95)
          62	CALL_FUNCTION(arg=1, lineno=95)
          64	STORE_FAST(arg=16, lineno=95)
          66	LOAD_GLOBAL(arg=4, lineno=96)
          68	LOAD_GLOBAL(arg=7, lineno=96)
          70	LOAD_CONST(arg=1, lineno=96)
          72	LOAD_FAST(arg=8, lineno=96)
          74	LOAD_FAST(arg=16, lineno=96)
          76	BINARY_MULTIPLY(arg=None, lineno=96)
          78	BINARY_TRUE_DIVIDE(arg=None, lineno=96)
          80	CALL_FUNCTION(arg=1, lineno=96)
          82	CALL_FUNCTION(arg=1, lineno=96)
          84	STORE_FAST(arg=17, lineno=96)
          86	LOAD_GLOBAL(arg=4, lineno=97)
          88	LOAD_GLOBAL(arg=7, lineno=97)
          90	LOAD_FAST(arg=7, lineno=97)
          92	LOAD_FAST(arg=16, lineno=97)
          94	BINARY_TRUE_DIVIDE(arg=None, lineno=97)
          96	LOAD_FAST(arg=17, lineno=97)
          98	BINARY_TRUE_DIVIDE(arg=None, lineno=97)
         100	CALL_FUNCTION(arg=1, lineno=97)
         102	CALL_FUNCTION(arg=1, lineno=97)
         104	STORE_FAST(arg=18, lineno=97)
         106	LOAD_GLOBAL(arg=4, lineno=98)
         108	LOAD_FAST(arg=12, lineno=98)
         110	LOAD_FAST(arg=8, lineno=98)
         112	BINARY_MULTIPLY(arg=None, lineno=98)
         114	CALL_FUNCTION(arg=1, lineno=98)
         116	STORE_FAST(arg=19, lineno=98)
         118	LOAD_GLOBAL(arg=8, lineno=100)
         120	LOAD_GLOBAL(arg=9, lineno=100)
         122	CALL_FUNCTION(arg=1, lineno=100)
         124	STORE_FAST(arg=20, lineno=100)
         126	LOAD_GLOBAL(arg=8, lineno=101)
         128	LOAD_GLOBAL(arg=10, lineno=101)
         130	CALL_FUNCTION(arg=1, lineno=101)
         132	STORE_FAST(arg=21, lineno=101)
         134	LOAD_GLOBAL(arg=8, lineno=102)
         136	LOAD_GLOBAL(arg=11, lineno=102)
         138	CALL_FUNCTION(arg=1, lineno=102)
         140	STORE_FAST(arg=22, lineno=102)
         142	LOAD_GLOBAL(arg=1, lineno=105)
         144	LOAD_ATTR(arg=12, lineno=105)
         146	LOAD_ATTR(arg=13, lineno=105)
         148	LOAD_FAST(arg=20, lineno=105)
         150	LOAD_DEREF(arg=2, lineno=105)
         152	LOAD_CONST(arg=2, lineno=105)
         154	CALL_FUNCTION_KW(arg=2, lineno=105)
         156	STORE_FAST(arg=23, lineno=105)
         158	LOAD_FAST(arg=23, lineno=106)
         160	LOAD_CONST(arg=0, lineno=106)
         162	LOAD_FAST(arg=0, lineno=106)
         164	LOAD_GLOBAL(arg=10, lineno=106)
         166	BINARY_MULTIPLY(arg=None, lineno=106)
         168	BUILD_SLICE(arg=2, lineno=106)
         170	BINARY_SUBSCR(arg=None, lineno=106)
         172	STORE_FAST(arg=24, lineno=106)
         174	LOAD_FAST(arg=23, lineno=107)
         176	LOAD_FAST(arg=0, lineno=107)
         178	LOAD_GLOBAL(arg=10, lineno=107)
         180	BINARY_MULTIPLY(arg=None, lineno=107)
         182	LOAD_CONST(arg=3, lineno=107)
         184	LOAD_FAST(arg=0, lineno=107)
         186	BINARY_MULTIPLY(arg=None, lineno=107)
         188	LOAD_GLOBAL(arg=10, lineno=107)
         190	BINARY_MULTIPLY(arg=None, lineno=107)
         192	BUILD_SLICE(arg=2, lineno=107)
         194	BINARY_SUBSCR(arg=None, lineno=107)
         196	STORE_FAST(arg=25, lineno=107)
         198	LOAD_GLOBAL(arg=1, lineno=110)
         200	LOAD_ATTR(arg=14, lineno=110)
         202	LOAD_ATTR(arg=13, lineno=110)
         204	LOAD_FAST(arg=21, lineno=111)
         206	LOAD_DEREF(arg=2, lineno=112)
         208	LOAD_CONST(arg=4, lineno=110)
         210	CALL_FUNCTION_KW(arg=2, lineno=110)
         212	STORE_FAST(arg=26, lineno=110)
         214	LOAD_GLOBAL(arg=1, lineno=114)
         216	LOAD_ATTR(arg=14, lineno=114)
         218	LOAD_ATTR(arg=13, lineno=114)
         220	LOAD_FAST(arg=21, lineno=115)
         222	LOAD_DEREF(arg=2, lineno=116)
         224	LOAD_CONST(arg=4, lineno=114)
         226	CALL_FUNCTION_KW(arg=2, lineno=114)
         228	STORE_FAST(arg=27, lineno=114)
         230	LOAD_GLOBAL(arg=1, lineno=118)
         232	LOAD_ATTR(arg=14, lineno=118)
         234	LOAD_ATTR(arg=13, lineno=118)
         236	LOAD_FAST(arg=22, lineno=119)
         238	LOAD_DEREF(arg=2, lineno=120)
         240	LOAD_CONST(arg=4, lineno=118)
         242	CALL_FUNCTION_KW(arg=2, lineno=118)
         244	STORE_FAST(arg=28, lineno=118)
         246	LOAD_GLOBAL(arg=1, lineno=122)
         248	LOAD_ATTR(arg=15, lineno=122)
         250	LOAD_METHOD(arg=16, lineno=122)
         252	LOAD_FAST(arg=11, lineno=122)
         254	CALL_METHOD(arg=1, lineno=122)
         256	STORE_FAST(arg=29, lineno=122)
         258	LOAD_GLOBAL(arg=1, lineno=123)
         260	LOAD_ATTR(arg=15, lineno=123)
         262	LOAD_METHOD(arg=16, lineno=123)
         264	LOAD_FAST(arg=10, lineno=123)
         266	CALL_METHOD(arg=1, lineno=123)
         268	STORE_FAST(arg=30, lineno=123)
         270	LOAD_GLOBAL(arg=1, lineno=124)
         272	LOAD_ATTR(arg=15, lineno=124)
         274	LOAD_METHOD(arg=16, lineno=124)
         276	LOAD_FAST(arg=9, lineno=124)
         278	CALL_METHOD(arg=1, lineno=124)
         280	STORE_FAST(arg=31, lineno=124)
         282	LOAD_GLOBAL(arg=17, lineno=125)
         284	LOAD_GLOBAL(arg=6, lineno=125)
         286	LOAD_FAST(arg=4, lineno=125)
         288	CALL_FUNCTION(arg=1, lineno=125)
         290	CALL_FUNCTION(arg=1, lineno=125)
         292	GET_ITER(arg=None, lineno=125)
>        294	FOR_ITER(arg=18, lineno=125)
         296	STORE_FAST(arg=32, lineno=125)
         298	LOAD_FAST(arg=4, lineno=126)
         300	LOAD_FAST(arg=32, lineno=126)
         302	BINARY_SUBSCR(arg=None, lineno=126)
         304	LOAD_FAST(arg=28, lineno=126)
         306	LOAD_FAST(arg=32, lineno=126)
         308	STORE_SUBSCR(arg=None, lineno=126)
         310	NOP(arg=1, lineno=126)
         312	JUMP_ABSOLUTE(arg=294, lineno=126)
>        314	LOAD_GLOBAL(arg=18, lineno=128)
         316	LOAD_FAST(arg=3, lineno=128)
         318	CALL_FUNCTION(arg=1, lineno=128)
         320	GET_ITER(arg=None, lineno=128)
>        322	FOR_ITER(arg=26, lineno=128)
         324	UNPACK_SEQUENCE(arg=2, lineno=128)
         326	STORE_FAST(arg=32, lineno=128)
         328	STORE_FAST(arg=33, lineno=128)
         330	LOAD_FAST(arg=2, lineno=129)
         332	LOAD_FAST(arg=15, lineno=129)
         334	LOAD_FAST(arg=32, lineno=129)
         336	BUILD_TUPLE(arg=2, lineno=129)
         338	BINARY_SUBSCR(arg=None, lineno=129)
         340	LOAD_FAST(arg=28, lineno=129)
         342	LOAD_FAST(arg=33, lineno=129)
         344	STORE_SUBSCR(arg=None, lineno=129)
         346	NOP(arg=1, lineno=129)
         348	JUMP_ABSOLUTE(arg=322, lineno=129)
>        350	LOAD_GLOBAL(arg=17, lineno=132)
         352	LOAD_GLOBAL(arg=10, lineno=132)
         354	CALL_FUNCTION(arg=1, lineno=132)
         356	GET_ITER(arg=None, lineno=132)
>        358	FOR_ITER(arg=46, lineno=132)
         360	STORE_FAST(arg=32, lineno=132)
         362	LOAD_FAST(arg=5, lineno=133)
         364	LOAD_FAST(arg=32, lineno=133)
         366	BINARY_SUBSCR(arg=None, lineno=133)
         368	LOAD_FAST(arg=25, lineno=133)
         370	LOAD_FAST(arg=13, lineno=133)
         372	LOAD_GLOBAL(arg=10, lineno=133)
         374	BINARY_MULTIPLY(arg=None, lineno=133)
         376	LOAD_FAST(arg=32, lineno=133)
         378	BINARY_ADD(arg=None, lineno=133)
         380	STORE_SUBSCR(arg=None, lineno=133)
         382	LOAD_DEREF(arg=2, lineno=134)
         384	LOAD_CONST(arg=5, lineno=134)
         386	CALL_FUNCTION(arg=1, lineno=134)
         388	LOAD_FAST(arg=24, lineno=134)
         390	LOAD_FAST(arg=13, lineno=134)
         392	LOAD_GLOBAL(arg=10, lineno=134)
         394	BINARY_MULTIPLY(arg=None, lineno=134)
         396	LOAD_FAST(arg=32, lineno=134)
         398	BINARY_ADD(arg=None, lineno=134)
         400	STORE_SUBSCR(arg=None, lineno=134)
         402	NOP(arg=1, lineno=134)
         404	JUMP_ABSOLUTE(arg=358, lineno=134)
>        406	LOAD_DEREF(arg=2, lineno=136)
         408	LOAD_CONST(arg=5, lineno=136)
         410	CALL_FUNCTION(arg=1, lineno=136)
         412	LOAD_FAST(arg=26, lineno=136)
         414	LOAD_CONST(arg=0, lineno=136)
         416	LOAD_CONST(arg=0, lineno=136)
         418	BUILD_SLICE(arg=2, lineno=136)
         420	STORE_SUBSCR(arg=None, lineno=136)
         422	LOAD_DEREF(arg=2, lineno=137)
         424	LOAD_CONST(arg=5, lineno=137)
         426	CALL_FUNCTION(arg=1, lineno=137)
         428	STORE_FAST(arg=34, lineno=137)
         430	LOAD_GLOBAL(arg=17, lineno=140)
         432	LOAD_FAST(arg=18, lineno=140)
         434	LOAD_FAST(arg=19, lineno=140)
         436	BINARY_ADD(arg=None, lineno=140)
         438	CALL_FUNCTION(arg=1, lineno=140)
         440	GET_ITER(arg=None, lineno=140)
>        442	NOP(arg=1, lineno=140)
         444	FOR_ITER(arg=374, lineno=140)
         446	STORE_FAST(arg=32, lineno=140)
         448	LOAD_GLOBAL(arg=17, lineno=143)
         450	LOAD_FAST(arg=17, lineno=143)
         452	CALL_FUNCTION(arg=1, lineno=143)
         454	GET_ITER(arg=None, lineno=143)
>        456	FOR_ITER(arg=166, lineno=143)
         458	STORE_FAST(arg=35, lineno=143)
         460	LOAD_FAST(arg=34, lineno=144)
         462	LOAD_FAST(arg=16, lineno=144)
         464	INPLACE_ADD(arg=None, lineno=144)
         466	STORE_FAST(arg=34, lineno=144)
         468	LOAD_DEREF(arg=1, lineno=147)
         470	LOAD_FAST(arg=27, lineno=147)
         472	LOAD_FAST(arg=29, lineno=148)
         474	LOAD_FAST(arg=15, lineno=149)
         476	LOAD_FAST(arg=30, lineno=150)
         478	CALL_FUNCTION(arg=4, lineno=147)
         480	POP_TOP(arg=None, lineno=147)
         482	LOAD_FAST(arg=31, lineno=153)
         484	LOAD_FAST(arg=35, lineno=153)
         486	BINARY_SUBSCR(arg=None, lineno=153)
         488	STORE_FAST(arg=36, lineno=153)
         490	LOAD_DEREF(arg=0, lineno=156)
         492	LOAD_FAST(arg=26, lineno=156)
         494	LOAD_FAST(arg=25, lineno=157)
         496	LOAD_FAST(arg=13, lineno=157)
         498	LOAD_FAST(arg=21, lineno=157)
         500	BINARY_MULTIPLY(arg=None, lineno=157)
         502	LOAD_FAST(arg=13, lineno=157)
         504	LOAD_FAST(arg=21, lineno=157)
         506	BINARY_MULTIPLY(arg=None, lineno=157)
         508	LOAD_CONST(arg=6, lineno=157)
         510	BINARY_ADD(arg=None, lineno=157)
         512	BUILD_SLICE(arg=2, lineno=157)
         514	BINARY_SUBSCR(arg=None, lineno=157)
         516	LOAD_FAST(arg=28, lineno=158)
         518	LOAD_FAST(arg=34, lineno=159)
         520	CALL_FUNCTION(arg=4, lineno=156)
         522	POP_TOP(arg=None, lineno=156)
         524	LOAD_GLOBAL(arg=17, lineno=163)
         526	LOAD_FAST(arg=21, lineno=163)
         528	CALL_FUNCTION(arg=1, lineno=163)
         530	GET_ITER(arg=None, lineno=163)
>        532	FOR_ITER(arg=86, lineno=163)
         534	STORE_FAST(arg=37, lineno=163)
         536	LOAD_FAST(arg=25, lineno=164)
         538	LOAD_FAST(arg=13, lineno=164)
         540	LOAD_FAST(arg=21, lineno=164)
         542	BINARY_MULTIPLY(arg=None, lineno=164)
         544	LOAD_FAST(arg=37, lineno=164)
         546	BINARY_ADD(arg=None, lineno=164)
         548	DUP_TOP_TWO(arg=None, lineno=164)
         550	BINARY_SUBSCR(arg=None, lineno=164)
         552	LOAD_FAST(arg=26, lineno=164)
         554	LOAD_FAST(arg=37, lineno=164)
         556	BINARY_SUBSCR(arg=None, lineno=164)
         558	LOAD_FAST(arg=16, lineno=164)
         560	BINARY_MULTIPLY(arg=None, lineno=164)
         562	LOAD_FAST(arg=27, lineno=164)
         564	LOAD_FAST(arg=37, lineno=164)
         566	BINARY_SUBSCR(arg=None, lineno=164)
         568	BINARY_ADD(arg=None, lineno=164)
         570	INPLACE_ADD(arg=None, lineno=164)
         572	ROT_THREE(arg=None, lineno=164)
         574	STORE_SUBSCR(arg=None, lineno=164)
         576	LOAD_FAST(arg=24, lineno=165)
         578	LOAD_FAST(arg=13, lineno=165)
         580	LOAD_FAST(arg=21, lineno=165)
         582	BINARY_MULTIPLY(arg=None, lineno=165)
         584	LOAD_FAST(arg=37, lineno=165)
         586	BINARY_ADD(arg=None, lineno=165)
         588	DUP_TOP_TWO(arg=None, lineno=165)
         590	BINARY_SUBSCR(arg=None, lineno=165)
         592	LOAD_FAST(arg=25, lineno=165)
         594	LOAD_FAST(arg=13, lineno=165)
         596	LOAD_FAST(arg=21, lineno=165)
         598	BINARY_MULTIPLY(arg=None, lineno=165)
         600	LOAD_FAST(arg=37, lineno=165)
         602	BINARY_ADD(arg=None, lineno=165)
         604	BINARY_SUBSCR(arg=None, lineno=165)
         606	LOAD_FAST(arg=36, lineno=165)
         608	BINARY_MULTIPLY(arg=None, lineno=165)
         610	INPLACE_ADD(arg=None, lineno=165)
         612	ROT_THREE(arg=None, lineno=165)
         614	STORE_SUBSCR(arg=None, lineno=165)
         616	NOP(arg=2, lineno=165)
         618	JUMP_ABSOLUTE(arg=532, lineno=165)
>        620	NOP(arg=1, lineno=165)
         622	JUMP_ABSOLUTE(arg=456, lineno=165)
>        624	LOAD_FAST(arg=32, lineno=168)
         626	LOAD_FAST(arg=19, lineno=168)
         628	LOAD_CONST(arg=1, lineno=168)
         630	BINARY_SUBTRACT(arg=None, lineno=168)
         632	COMPARE_OP(arg=4, lineno=168)
         634	NOP(arg=3, lineno=168)
         636	POP_JUMP_IF_FALSE(arg=788, lineno=168)
         638	LOAD_FAST(arg=24, lineno=171)
         640	LOAD_FAST(arg=13, lineno=171)
         642	LOAD_FAST(arg=21, lineno=171)
         644	BINARY_MULTIPLY(arg=None, lineno=171)
         646	LOAD_CONST(arg=7, lineno=171)
         648	BINARY_ADD(arg=None, lineno=171)
         650	BINARY_SUBSCR(arg=None, lineno=171)
         652	LOAD_FAST(arg=1, lineno=171)
         654	LOAD_FAST(arg=32, lineno=171)
         656	LOAD_FAST(arg=19, lineno=171)
         658	BINARY_SUBTRACT(arg=None, lineno=171)
         660	LOAD_FAST(arg=15, lineno=171)
         662	LOAD_CONST(arg=7, lineno=171)
         664	BUILD_TUPLE(arg=3, lineno=171)
         666	STORE_SUBSCR(arg=None, lineno=171)
         668	LOAD_FAST(arg=24, lineno=172)
         670	LOAD_FAST(arg=13, lineno=172)
         672	LOAD_FAST(arg=21, lineno=172)
         674	BINARY_MULTIPLY(arg=None, lineno=172)
         676	LOAD_CONST(arg=1, lineno=172)
         678	BINARY_ADD(arg=None, lineno=172)
         680	BINARY_SUBSCR(arg=None, lineno=172)
         682	LOAD_FAST(arg=1, lineno=172)
         684	LOAD_FAST(arg=32, lineno=172)
         686	LOAD_FAST(arg=19, lineno=172)
         688	BINARY_SUBTRACT(arg=None, lineno=172)
         690	LOAD_FAST(arg=15, lineno=172)
         692	LOAD_CONST(arg=1, lineno=172)
         694	BUILD_TUPLE(arg=3, lineno=172)
         696	STORE_SUBSCR(arg=None, lineno=172)
         698	LOAD_FAST(arg=24, lineno=173)
         700	LOAD_FAST(arg=13, lineno=173)
         702	LOAD_FAST(arg=21, lineno=173)
         704	BINARY_MULTIPLY(arg=None, lineno=173)
         706	LOAD_CONST(arg=3, lineno=173)
         708	BINARY_ADD(arg=None, lineno=173)
         710	BINARY_SUBSCR(arg=None, lineno=173)
         712	LOAD_FAST(arg=1, lineno=173)
         714	LOAD_FAST(arg=32, lineno=173)
         716	LOAD_FAST(arg=19, lineno=173)
         718	BINARY_SUBTRACT(arg=None, lineno=173)
         720	LOAD_FAST(arg=15, lineno=173)
         722	LOAD_CONST(arg=3, lineno=173)
         724	BUILD_TUPLE(arg=3, lineno=173)
         726	STORE_SUBSCR(arg=None, lineno=173)
         728	LOAD_FAST(arg=24, lineno=174)
         730	LOAD_FAST(arg=13, lineno=174)
         732	LOAD_FAST(arg=21, lineno=174)
         734	BINARY_MULTIPLY(arg=None, lineno=174)
         736	LOAD_CONST(arg=8, lineno=174)
         738	BINARY_ADD(arg=None, lineno=174)
         740	BINARY_SUBSCR(arg=None, lineno=174)
         742	LOAD_FAST(arg=1, lineno=174)
         744	LOAD_FAST(arg=32, lineno=174)
         746	LOAD_FAST(arg=19, lineno=174)
         748	BINARY_SUBTRACT(arg=None, lineno=174)
         750	LOAD_FAST(arg=15, lineno=174)
         752	LOAD_CONST(arg=8, lineno=174)
         754	BUILD_TUPLE(arg=3, lineno=174)
         756	STORE_SUBSCR(arg=None, lineno=174)
         758	LOAD_FAST(arg=24, lineno=175)
         760	LOAD_FAST(arg=13, lineno=175)
         762	LOAD_FAST(arg=21, lineno=175)
         764	BINARY_MULTIPLY(arg=None, lineno=175)
         766	LOAD_CONST(arg=9, lineno=175)
         768	BINARY_ADD(arg=None, lineno=175)
         770	BINARY_SUBSCR(arg=None, lineno=175)
         772	LOAD_FAST(arg=1, lineno=175)
         774	LOAD_FAST(arg=32, lineno=175)
         776	LOAD_FAST(arg=19, lineno=175)
         778	BINARY_SUBTRACT(arg=None, lineno=175)
         780	LOAD_FAST(arg=15, lineno=175)
         782	LOAD_CONST(arg=9, lineno=175)
         784	BUILD_TUPLE(arg=3, lineno=175)
         786	STORE_SUBSCR(arg=None, lineno=175)
>        788	LOAD_DEREF(arg=2, lineno=178)
         790	LOAD_CONST(arg=7, lineno=178)
         792	CALL_FUNCTION(arg=1, lineno=178)
         794	LOAD_FAST(arg=24, lineno=178)
         796	LOAD_FAST(arg=13, lineno=178)
         798	LOAD_FAST(arg=21, lineno=178)
         800	BINARY_MULTIPLY(arg=None, lineno=178)
         802	LOAD_FAST(arg=13, lineno=178)
         804	LOAD_FAST(arg=21, lineno=178)
         806	BINARY_MULTIPLY(arg=None, lineno=178)
         808	LOAD_CONST(arg=6, lineno=178)
         810	BINARY_ADD(arg=None, lineno=178)
         812	BUILD_SLICE(arg=2, lineno=178)
         814	STORE_SUBSCR(arg=None, lineno=178)
         816	NOP(arg=1, lineno=178)
         818	JUMP_ABSOLUTE(arg=442, lineno=178)
>        820	LOAD_CONST(arg=0, lineno=178)
         822	RETURN_VALUE(arg=None, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:04 PM - DEBUG - stack: []
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=69)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=86)
07/23/2024 06:57:04 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=2, lineno=86)
07/23/2024 06:57:04 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=8, inst=LOAD_ATTR(arg=3, lineno=86)
07/23/2024 06:57:04 PM - DEBUG - stack ['$2load_global.0', '$6load_attr.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=86)
07/23/2024 06:57:04 PM - DEBUG - stack ['$2load_global.0', '$8load_attr.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=13, lineno=86)
07/23/2024 06:57:04 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=4, lineno=87)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=87)
07/23/2024 06:57:04 PM - DEBUG - stack ['$14load_global.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=18, inst=LOAD_ATTR(arg=5, lineno=87)
07/23/2024 06:57:04 PM - DEBUG - stack ['$14load_global.5', '$16load_global.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=20, inst=LOAD_ATTR(arg=3, lineno=87)
07/23/2024 06:57:04 PM - DEBUG - stack ['$14load_global.5', '$18load_attr.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=87)
07/23/2024 06:57:04 PM - DEBUG - stack ['$14load_global.5', '$20load_attr.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=14, lineno=87)
07/23/2024 06:57:04 PM - DEBUG - stack ['$22call_function.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=4, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack ['$26load_global.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=14, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack ['$26load_global.10', '$xblocksize28.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack ['$26load_global.10', '$xblocksize28.11', '$block_index30.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=13, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack ['$26load_global.10', '$32binary_multiply.13']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack ['$26load_global.10', '$32binary_multiply.13', '$tx34.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack ['$26load_global.10', '$36binary_add.15']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=15, lineno=88)
07/23/2024 06:57:04 PM - DEBUG - stack ['$38call_function.16']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=15, lineno=92)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=44, inst=LOAD_GLOBAL(arg=6, lineno=92)
07/23/2024 06:57:04 PM - DEBUG - stack ['$l_param_set42.17']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=92)
07/23/2024 06:57:04 PM - DEBUG - stack ['$l_param_set42.17', '$44load_global.18']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=92)
07/23/2024 06:57:04 PM - DEBUG - stack ['$l_param_set42.17', '$44load_global.18', '$grid_values46.19']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=50, inst=COMPARE_OP(arg=5, lineno=92)
07/23/2024 06:57:04 PM - DEBUG - stack ['$l_param_set42.17', '$48call_function.20']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=92)
07/23/2024 06:57:04 PM - DEBUG - stack ['$50compare_op.21']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
07/23/2024 06:57:04 PM - DEBUG - stack: []
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=93)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=93)
07/23/2024 06:57:04 PM - DEBUG - stack ['$const54.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=0)])
07/23/2024 06:57:04 PM - DEBUG - stack: []
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=0)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=58, inst=LOAD_DEREF(arg=2, lineno=95)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=95)
07/23/2024 06:57:04 PM - DEBUG - stack ['$58load_deref.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=95)
07/23/2024 06:57:04 PM - DEBUG - stack ['$58load_deref.0', '$step_size60.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=64, inst=STORE_FAST(arg=16, lineno=95)
07/23/2024 06:57:04 PM - DEBUG - stack ['$62call_function.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=4, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=68, inst=LOAD_GLOBAL(arg=7, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=1, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3', '$68load_global.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3', '$68load_global.4', '$const70.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=16, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3', '$68load_global.4', '$const70.5', '$output_fs72.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=76, inst=BINARY_MULTIPLY(arg=None, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3', '$68load_global.4', '$const70.5', '$output_fs72.6', '$l_step_size74.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=78, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3', '$68load_global.4', '$const70.5', '$76binary_multiply.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=80, inst=CALL_FUNCTION(arg=1, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3', '$68load_global.4', '$78binary_true_divide.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$66load_global.3', '$80call_function.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=17, lineno=96)
07/23/2024 06:57:04 PM - DEBUG - stack ['$82call_function.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=86, inst=LOAD_GLOBAL(arg=4, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=88, inst=LOAD_GLOBAL(arg=7, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12', '$88load_global.13']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=16, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12', '$88load_global.13', '$duration90.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=94, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12', '$88load_global.13', '$duration90.14', '$l_step_size92.15']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=17, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12', '$88load_global.13', '$94binary_true_divide.16']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=98, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12', '$88load_global.13', '$94binary_true_divide.16', '$l_ds_rate96.17']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=100, inst=CALL_FUNCTION(arg=1, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12', '$88load_global.13', '$98binary_true_divide.18']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=102, inst=CALL_FUNCTION(arg=1, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$86load_global.12', '$100call_function.19']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=104, inst=STORE_FAST(arg=18, lineno=97)
07/23/2024 06:57:04 PM - DEBUG - stack ['$102call_function.20']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=106, inst=LOAD_GLOBAL(arg=4, lineno=98)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=108, inst=LOAD_FAST(arg=12, lineno=98)
07/23/2024 06:57:04 PM - DEBUG - stack ['$106load_global.21']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=8, lineno=98)
07/23/2024 06:57:04 PM - DEBUG - stack ['$106load_global.21', '$warmup_time108.22']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=112, inst=BINARY_MULTIPLY(arg=None, lineno=98)
07/23/2024 06:57:04 PM - DEBUG - stack ['$106load_global.21', '$warmup_time108.22', '$output_fs110.23']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=114, inst=CALL_FUNCTION(arg=1, lineno=98)
07/23/2024 06:57:04 PM - DEBUG - stack ['$106load_global.21', '$112binary_multiply.24']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=116, inst=STORE_FAST(arg=19, lineno=98)
07/23/2024 06:57:04 PM - DEBUG - stack ['$114call_function.25']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=118, inst=LOAD_GLOBAL(arg=8, lineno=100)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=120, inst=LOAD_GLOBAL(arg=9, lineno=100)
07/23/2024 06:57:04 PM - DEBUG - stack ['$118load_global.26']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=122, inst=CALL_FUNCTION(arg=1, lineno=100)
07/23/2024 06:57:04 PM - DEBUG - stack ['$118load_global.26', '$120load_global.27']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=124, inst=STORE_FAST(arg=20, lineno=100)
07/23/2024 06:57:04 PM - DEBUG - stack ['$122call_function.28']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=126, inst=LOAD_GLOBAL(arg=8, lineno=101)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=128, inst=LOAD_GLOBAL(arg=10, lineno=101)
07/23/2024 06:57:04 PM - DEBUG - stack ['$126load_global.29']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=130, inst=CALL_FUNCTION(arg=1, lineno=101)
07/23/2024 06:57:04 PM - DEBUG - stack ['$126load_global.29', '$128load_global.30']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=132, inst=STORE_FAST(arg=21, lineno=101)
07/23/2024 06:57:04 PM - DEBUG - stack ['$130call_function.31']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=134, inst=LOAD_GLOBAL(arg=8, lineno=102)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=136, inst=LOAD_GLOBAL(arg=11, lineno=102)
07/23/2024 06:57:04 PM - DEBUG - stack ['$134load_global.32']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=138, inst=CALL_FUNCTION(arg=1, lineno=102)
07/23/2024 06:57:04 PM - DEBUG - stack ['$134load_global.32', '$136load_global.33']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=140, inst=STORE_FAST(arg=22, lineno=102)
07/23/2024 06:57:04 PM - DEBUG - stack ['$138call_function.34']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=144, inst=LOAD_ATTR(arg=12, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack ['$142load_global.35']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=146, inst=LOAD_ATTR(arg=13, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack ['$144load_attr.36']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=20, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack ['$146load_attr.37']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=150, inst=LOAD_DEREF(arg=2, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack ['$146load_attr.37', '$litzero148.38']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=152, inst=LOAD_CONST(arg=2, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack ['$146load_attr.37', '$litzero148.38', '$150load_deref.39']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=154, inst=CALL_FUNCTION_KW(arg=2, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack ['$146load_attr.37', '$litzero148.38', '$150load_deref.39', '$const152.40']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=156, inst=STORE_FAST(arg=23, lineno=105)
07/23/2024 06:57:04 PM - DEBUG - stack ['$154call_function_kw.41']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=158, inst=LOAD_FAST(arg=23, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=160, inst=LOAD_CONST(arg=0, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem158.42']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem158.42', '$const160.43']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=164, inst=LOAD_GLOBAL(arg=10, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem158.42', '$const160.43', '$xblocksize162.44']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=166, inst=BINARY_MULTIPLY(arg=None, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem158.42', '$const160.43', '$xblocksize162.44', '$164load_global.45']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=168, inst=BUILD_SLICE(arg=2, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem158.42', '$const160.43', '$166binary_multiply.46']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem158.42', '$168build_slice.48']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=172, inst=STORE_FAST(arg=24, lineno=106)
07/23/2024 06:57:04 PM - DEBUG - stack ['$170binary_subscr.49']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=23, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=0, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=178, inst=LOAD_GLOBAL(arg=10, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$xblocksize176.51']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$xblocksize176.51', '$178load_global.52']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=182, inst=LOAD_CONST(arg=3, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$180binary_multiply.53']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$180binary_multiply.53', '$const182.54']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=186, inst=BINARY_MULTIPLY(arg=None, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$180binary_multiply.53', '$const182.54', '$xblocksize184.55']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=188, inst=LOAD_GLOBAL(arg=10, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$180binary_multiply.53', '$186binary_multiply.56']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=190, inst=BINARY_MULTIPLY(arg=None, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$180binary_multiply.53', '$186binary_multiply.56', '$188load_global.57']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=192, inst=BUILD_SLICE(arg=2, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$180binary_multiply.53', '$190binary_multiply.58']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$dynamic_mem174.50', '$192build_slice.60']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=196, inst=STORE_FAST(arg=25, lineno=107)
07/23/2024 06:57:04 PM - DEBUG - stack ['$194binary_subscr.61']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=198, inst=LOAD_GLOBAL(arg=1, lineno=110)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=200, inst=LOAD_ATTR(arg=14, lineno=110)
07/23/2024 06:57:04 PM - DEBUG - stack ['$198load_global.62']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=202, inst=LOAD_ATTR(arg=13, lineno=110)
07/23/2024 06:57:04 PM - DEBUG - stack ['$200load_attr.63']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=204, inst=LOAD_FAST(arg=21, lineno=111)
07/23/2024 06:57:04 PM - DEBUG - stack ['$202load_attr.64']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=206, inst=LOAD_DEREF(arg=2, lineno=112)
07/23/2024 06:57:04 PM - DEBUG - stack ['$202load_attr.64', '$litstates204.65']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=4, lineno=110)
07/23/2024 06:57:04 PM - DEBUG - stack ['$202load_attr.64', '$litstates204.65', '$206load_deref.66']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=210, inst=CALL_FUNCTION_KW(arg=2, lineno=110)
07/23/2024 06:57:04 PM - DEBUG - stack ['$202load_attr.64', '$litstates204.65', '$206load_deref.66', '$const208.67']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=212, inst=STORE_FAST(arg=26, lineno=110)
07/23/2024 06:57:04 PM - DEBUG - stack ['$210call_function_kw.68']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=214, inst=LOAD_GLOBAL(arg=1, lineno=114)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=216, inst=LOAD_ATTR(arg=14, lineno=114)
07/23/2024 06:57:04 PM - DEBUG - stack ['$214load_global.69']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=218, inst=LOAD_ATTR(arg=13, lineno=114)
07/23/2024 06:57:04 PM - DEBUG - stack ['$216load_attr.70']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=21, lineno=115)
07/23/2024 06:57:04 PM - DEBUG - stack ['$218load_attr.71']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=222, inst=LOAD_DEREF(arg=2, lineno=116)
07/23/2024 06:57:04 PM - DEBUG - stack ['$218load_attr.71', '$litstates220.72']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=224, inst=LOAD_CONST(arg=4, lineno=114)
07/23/2024 06:57:04 PM - DEBUG - stack ['$218load_attr.71', '$litstates220.72', '$222load_deref.73']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=226, inst=CALL_FUNCTION_KW(arg=2, lineno=114)
07/23/2024 06:57:04 PM - DEBUG - stack ['$218load_attr.71', '$litstates220.72', '$222load_deref.73', '$const224.74']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=228, inst=STORE_FAST(arg=27, lineno=114)
07/23/2024 06:57:04 PM - DEBUG - stack ['$226call_function_kw.75']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=230, inst=LOAD_GLOBAL(arg=1, lineno=118)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=232, inst=LOAD_ATTR(arg=14, lineno=118)
07/23/2024 06:57:04 PM - DEBUG - stack ['$230load_global.76']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=234, inst=LOAD_ATTR(arg=13, lineno=118)
07/23/2024 06:57:04 PM - DEBUG - stack ['$232load_attr.77']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=236, inst=LOAD_FAST(arg=22, lineno=119)
07/23/2024 06:57:04 PM - DEBUG - stack ['$234load_attr.78']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=238, inst=LOAD_DEREF(arg=2, lineno=120)
07/23/2024 06:57:04 PM - DEBUG - stack ['$234load_attr.78', '$litconstantslength236.79']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=240, inst=LOAD_CONST(arg=4, lineno=118)
07/23/2024 06:57:04 PM - DEBUG - stack ['$234load_attr.78', '$litconstantslength236.79', '$238load_deref.80']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=242, inst=CALL_FUNCTION_KW(arg=2, lineno=118)
07/23/2024 06:57:04 PM - DEBUG - stack ['$234load_attr.78', '$litconstantslength236.79', '$238load_deref.80', '$const240.81']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=28, lineno=118)
07/23/2024 06:57:04 PM - DEBUG - stack ['$242call_function_kw.82']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=246, inst=LOAD_GLOBAL(arg=1, lineno=122)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=248, inst=LOAD_ATTR(arg=15, lineno=122)
07/23/2024 06:57:04 PM - DEBUG - stack ['$246load_global.83']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=250, inst=LOAD_METHOD(arg=16, lineno=122)
07/23/2024 06:57:04 PM - DEBUG - stack ['$248load_attr.84']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=252, inst=LOAD_FAST(arg=11, lineno=122)
07/23/2024 06:57:04 PM - DEBUG - stack ['$250load_method.85']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=254, inst=CALL_METHOD(arg=1, lineno=122)
07/23/2024 06:57:04 PM - DEBUG - stack ['$250load_method.85', '$noise_sigmas252.86']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=256, inst=STORE_FAST(arg=29, lineno=122)
07/23/2024 06:57:04 PM - DEBUG - stack ['$254call_method.87']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=258, inst=LOAD_GLOBAL(arg=1, lineno=123)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=260, inst=LOAD_ATTR(arg=15, lineno=123)
07/23/2024 06:57:04 PM - DEBUG - stack ['$258load_global.88']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=262, inst=LOAD_METHOD(arg=16, lineno=123)
07/23/2024 06:57:04 PM - DEBUG - stack ['$260load_attr.89']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=10, lineno=123)
07/23/2024 06:57:04 PM - DEBUG - stack ['$262load_method.90']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=266, inst=CALL_METHOD(arg=1, lineno=123)
07/23/2024 06:57:04 PM - DEBUG - stack ['$262load_method.90', '$RNG264.91']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=30, lineno=123)
07/23/2024 06:57:04 PM - DEBUG - stack ['$266call_method.92']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=1, lineno=124)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=272, inst=LOAD_ATTR(arg=15, lineno=124)
07/23/2024 06:57:04 PM - DEBUG - stack ['$270load_global.93']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=274, inst=LOAD_METHOD(arg=16, lineno=124)
07/23/2024 06:57:04 PM - DEBUG - stack ['$272load_attr.94']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=276, inst=LOAD_FAST(arg=9, lineno=124)
07/23/2024 06:57:04 PM - DEBUG - stack ['$274load_method.95']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=278, inst=CALL_METHOD(arg=1, lineno=124)
07/23/2024 06:57:04 PM - DEBUG - stack ['$274load_method.95', '$filtercoeffs276.96']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=280, inst=STORE_FAST(arg=31, lineno=124)
07/23/2024 06:57:04 PM - DEBUG - stack ['$278call_method.97']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=282, inst=LOAD_GLOBAL(arg=17, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=284, inst=LOAD_GLOBAL(arg=6, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack ['$282load_global.98']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=286, inst=LOAD_FAST(arg=4, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack ['$282load_global.98', '$284load_global.99']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=288, inst=CALL_FUNCTION(arg=1, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack ['$282load_global.98', '$284load_global.99', '$constants286.100']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=290, inst=CALL_FUNCTION(arg=1, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack ['$282load_global.98', '$288call_function.101']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=292, inst=GET_ITER(arg=None, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack ['$290call_function.102']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=294, stack=('$292get_iter.103',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=294 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi294.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=294 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=294, inst=FOR_ITER(arg=18, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi294.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=314, stack=(), blockstack=(), npush=0), Edge(pc=296, stack=('$phi294.0', '$294for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=314 nstack_initial=0), State(pc_initial=296 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - stack: []
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=314 nstack_initial=0)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=314, inst=LOAD_GLOBAL(arg=18, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=316, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack ['$314load_global.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=318, inst=CALL_FUNCTION(arg=1, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack ['$314load_global.0', '$grid_indices316.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=320, inst=GET_ITER(arg=None, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack ['$318call_function.2']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=322, stack=('$320get_iter.3',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=296 nstack_initial=2), State(pc_initial=322 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi296.0', '$phi296.1']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=296 nstack_initial=2)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=296, inst=STORE_FAST(arg=32, lineno=125)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0', '$phi296.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=4, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=300, inst=LOAD_FAST(arg=32, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0', '$constants298.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=302, inst=BINARY_SUBSCR(arg=None, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0', '$constants298.2', '$i300.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=304, inst=LOAD_FAST(arg=28, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0', '$302binary_subscr.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=306, inst=LOAD_FAST(arg=32, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0', '$302binary_subscr.4', '$l_constants304.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=308, inst=STORE_SUBSCR(arg=None, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0', '$302binary_subscr.4', '$l_constants304.5', '$i306.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=310, inst=NOP(arg=1, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=312, inst=JUMP_ABSOLUTE(arg=294, lineno=126)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi296.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=294, stack=('$phi296.0',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=322 nstack_initial=1), State(pc_initial=294 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi322.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=322 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=322, inst=FOR_ITER(arg=26, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi322.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=350, stack=(), blockstack=(), npush=0), Edge(pc=324, stack=('$phi322.0', '$322for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=294 nstack_initial=1), State(pc_initial=350 nstack_initial=0), State(pc_initial=324 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=350 nstack_initial=0), State(pc_initial=324 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - stack: []
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=350 nstack_initial=0)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=350, inst=LOAD_GLOBAL(arg=17, lineno=132)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=352, inst=LOAD_GLOBAL(arg=10, lineno=132)
07/23/2024 06:57:04 PM - DEBUG - stack ['$350load_global.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=354, inst=CALL_FUNCTION(arg=1, lineno=132)
07/23/2024 06:57:04 PM - DEBUG - stack ['$350load_global.0', '$352load_global.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=356, inst=GET_ITER(arg=None, lineno=132)
07/23/2024 06:57:04 PM - DEBUG - stack ['$354call_function.2']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=358, stack=('$356get_iter.3',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=324 nstack_initial=2), State(pc_initial=358 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi324.0', '$phi324.1']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=324 nstack_initial=2)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=324, inst=UNPACK_SEQUENCE(arg=2, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$phi324.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=326, inst=STORE_FAST(arg=32, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$324unpack_sequence.3', '$324unpack_sequence.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=328, inst=STORE_FAST(arg=33, lineno=128)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$324unpack_sequence.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=2, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=332, inst=LOAD_FAST(arg=15, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$grid_values330.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=334, inst=LOAD_FAST(arg=32, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$grid_values330.5', '$l_param_set332.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=336, inst=BUILD_TUPLE(arg=2, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$grid_values330.5', '$l_param_set332.6', '$i334.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=338, inst=BINARY_SUBSCR(arg=None, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$grid_values330.5', '$336build_tuple.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=340, inst=LOAD_FAST(arg=28, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$338binary_subscr.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=342, inst=LOAD_FAST(arg=33, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$338binary_subscr.9', '$l_constants340.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=344, inst=STORE_SUBSCR(arg=None, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0', '$338binary_subscr.9', '$l_constants340.10', '$index342.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=346, inst=NOP(arg=1, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=348, inst=JUMP_ABSOLUTE(arg=322, lineno=129)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi324.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=322, stack=('$phi324.0',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=358 nstack_initial=1), State(pc_initial=322 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi358.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=358 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=358, inst=FOR_ITER(arg=46, lineno=132)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi358.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=406, stack=(), blockstack=(), npush=0), Edge(pc=360, stack=('$phi358.0', '$358for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=322 nstack_initial=1), State(pc_initial=406 nstack_initial=0), State(pc_initial=360 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=406 nstack_initial=0), State(pc_initial=360 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - stack: []
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=406 nstack_initial=0)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=406, inst=LOAD_DEREF(arg=2, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=408, inst=LOAD_CONST(arg=5, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack ['$406load_deref.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=410, inst=CALL_FUNCTION(arg=1, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack ['$406load_deref.0', '$const408.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=412, inst=LOAD_FAST(arg=26, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack ['$410call_function.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=414, inst=LOAD_CONST(arg=0, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack ['$410call_function.2', '$l_dxdt412.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=416, inst=LOAD_CONST(arg=0, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack ['$410call_function.2', '$l_dxdt412.3', '$const414.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=418, inst=BUILD_SLICE(arg=2, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack ['$410call_function.2', '$l_dxdt412.3', '$const414.4', '$const416.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=420, inst=STORE_SUBSCR(arg=None, lineno=136)
07/23/2024 06:57:04 PM - DEBUG - stack ['$410call_function.2', '$l_dxdt412.3', '$418build_slice.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=422, inst=LOAD_DEREF(arg=2, lineno=137)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=424, inst=LOAD_CONST(arg=5, lineno=137)
07/23/2024 06:57:04 PM - DEBUG - stack ['$422load_deref.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=426, inst=CALL_FUNCTION(arg=1, lineno=137)
07/23/2024 06:57:04 PM - DEBUG - stack ['$422load_deref.8', '$const424.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=428, inst=STORE_FAST(arg=34, lineno=137)
07/23/2024 06:57:04 PM - DEBUG - stack ['$426call_function.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=430, inst=LOAD_GLOBAL(arg=17, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=432, inst=LOAD_FAST(arg=18, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$430load_global.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=434, inst=LOAD_FAST(arg=19, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$430load_global.11', '$l_n_outer432.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=436, inst=BINARY_ADD(arg=None, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$430load_global.11', '$l_n_outer432.12', '$l_warmup434.13']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=438, inst=CALL_FUNCTION(arg=1, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$430load_global.11', '$436binary_add.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=440, inst=GET_ITER(arg=None, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$438call_function.15']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=442, stack=('$440get_iter.16',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=360 nstack_initial=2), State(pc_initial=442 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi360.0', '$phi360.1']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=360 nstack_initial=2)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=360, inst=STORE_FAST(arg=32, lineno=132)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$phi360.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=362, inst=LOAD_FAST(arg=5, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=364, inst=LOAD_FAST(arg=32, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$inits362.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$inits362.2', '$i364.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=368, inst=LOAD_FAST(arg=25, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$366binary_subscr.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=370, inst=LOAD_FAST(arg=13, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$366binary_subscr.4', '$s_state368.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=372, inst=LOAD_GLOBAL(arg=10, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$366binary_subscr.4', '$s_state368.5', '$tx370.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=374, inst=BINARY_MULTIPLY(arg=None, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$366binary_subscr.4', '$s_state368.5', '$tx370.6', '$372load_global.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=376, inst=LOAD_FAST(arg=32, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$366binary_subscr.4', '$s_state368.5', '$374binary_multiply.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=378, inst=BINARY_ADD(arg=None, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$366binary_subscr.4', '$s_state368.5', '$374binary_multiply.8', '$i376.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=380, inst=STORE_SUBSCR(arg=None, lineno=133)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$366binary_subscr.4', '$s_state368.5', '$378binary_add.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=382, inst=LOAD_DEREF(arg=2, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=384, inst=LOAD_CONST(arg=5, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$382load_deref.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=386, inst=CALL_FUNCTION(arg=1, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$382load_deref.11', '$const384.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=388, inst=LOAD_FAST(arg=24, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$386call_function.13']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=390, inst=LOAD_FAST(arg=13, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$386call_function.13', '$s_sums388.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=392, inst=LOAD_GLOBAL(arg=10, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$386call_function.13', '$s_sums388.14', '$tx390.15']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=394, inst=BINARY_MULTIPLY(arg=None, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$386call_function.13', '$s_sums388.14', '$tx390.15', '$392load_global.16']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=396, inst=LOAD_FAST(arg=32, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$386call_function.13', '$s_sums388.14', '$394binary_multiply.17']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=398, inst=BINARY_ADD(arg=None, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$386call_function.13', '$s_sums388.14', '$394binary_multiply.17', '$i396.18']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=400, inst=STORE_SUBSCR(arg=None, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0', '$386call_function.13', '$s_sums388.14', '$398binary_add.19']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=402, inst=NOP(arg=1, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=404, inst=JUMP_ABSOLUTE(arg=358, lineno=134)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi360.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=358, stack=('$phi360.0',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=442 nstack_initial=1), State(pc_initial=358 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi442.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=442 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=442, inst=NOP(arg=1, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi442.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=444, stack=('$phi442.0',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=358 nstack_initial=1), State(pc_initial=444 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=444 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi444.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=444 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=444, inst=FOR_ITER(arg=374, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi444.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=820, stack=(), blockstack=(), npush=0), Edge(pc=446, stack=('$phi444.0', '$444for_iter.2'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=820 nstack_initial=0), State(pc_initial=446 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - stack: []
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=820 nstack_initial=0)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=820, inst=LOAD_CONST(arg=0, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack []
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=822, inst=RETURN_VALUE(arg=None, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$const820.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=446 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi446.0', '$phi446.1']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=446 nstack_initial=2)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=446, inst=STORE_FAST(arg=32, lineno=140)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi446.0', '$phi446.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=448, inst=LOAD_GLOBAL(arg=17, lineno=143)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi446.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=450, inst=LOAD_FAST(arg=17, lineno=143)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi446.0', '$448load_global.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=452, inst=CALL_FUNCTION(arg=1, lineno=143)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi446.0', '$448load_global.2', '$l_ds_rate450.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=454, inst=GET_ITER(arg=None, lineno=143)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi446.0', '$452call_function.4']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=456, stack=('$phi446.0', '$454get_iter.5'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=456 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi456.0', '$phi456.1']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=456 nstack_initial=2)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=456, inst=FOR_ITER(arg=166, lineno=143)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi456.0', '$phi456.1']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=624, stack=('$phi456.0',), blockstack=(), npush=0), Edge(pc=458, stack=('$phi456.0', '$phi456.1', '$456for_iter.3'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=624 nstack_initial=1), State(pc_initial=458 nstack_initial=3)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi624.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=624 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=624, inst=LOAD_FAST(arg=32, lineno=168)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi624.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=626, inst=LOAD_FAST(arg=19, lineno=168)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi624.0', '$i624.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=628, inst=LOAD_CONST(arg=1, lineno=168)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi624.0', '$i624.1', '$l_warmup626.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=630, inst=BINARY_SUBTRACT(arg=None, lineno=168)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi624.0', '$i624.1', '$l_warmup626.2', '$const628.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=632, inst=COMPARE_OP(arg=4, lineno=168)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi624.0', '$i624.1', '$630binary_subtract.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=634, inst=NOP(arg=3, lineno=168)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi624.0', '$632compare_op.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=636, inst=POP_JUMP_IF_FALSE(arg=788, lineno=168)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi624.0', '$632compare_op.5']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=638, stack=('$phi624.0',), blockstack=(), npush=0), Edge(pc=788, stack=('$phi624.0',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=458 nstack_initial=3), State(pc_initial=638 nstack_initial=1), State(pc_initial=788 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi458.0', '$phi458.1', '$phi458.2']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=458 nstack_initial=3)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=458, inst=STORE_FAST(arg=35, lineno=143)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$phi458.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=460, inst=LOAD_FAST(arg=34, lineno=144)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=462, inst=LOAD_FAST(arg=16, lineno=144)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$l_t460.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=464, inst=INPLACE_ADD(arg=None, lineno=144)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$l_t460.3', '$l_step_size462.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=466, inst=STORE_FAST(arg=34, lineno=144)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$464inplace_add.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=468, inst=LOAD_DEREF(arg=1, lineno=147)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=470, inst=LOAD_FAST(arg=27, lineno=147)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$468load_deref.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=472, inst=LOAD_FAST(arg=29, lineno=148)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$468load_deref.6', '$l_noise470.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=474, inst=LOAD_FAST(arg=15, lineno=149)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$468load_deref.6', '$l_noise470.7', '$c_sigmas472.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=476, inst=LOAD_FAST(arg=30, lineno=150)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$468load_deref.6', '$l_noise470.7', '$c_sigmas472.8', '$l_param_set474.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=478, inst=CALL_FUNCTION(arg=4, lineno=147)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$468load_deref.6', '$l_noise470.7', '$c_sigmas472.8', '$l_param_set474.9', '$c_RNG476.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=480, inst=POP_TOP(arg=None, lineno=147)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$478call_function.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=482, inst=LOAD_FAST(arg=31, lineno=153)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=484, inst=LOAD_FAST(arg=35, lineno=153)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$c_filtercoefficients482.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=486, inst=BINARY_SUBSCR(arg=None, lineno=153)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$c_filtercoefficients482.12', '$j484.13']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=488, inst=STORE_FAST(arg=36, lineno=153)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$486binary_subscr.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=490, inst=LOAD_DEREF(arg=0, lineno=156)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=492, inst=LOAD_FAST(arg=26, lineno=156)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=494, inst=LOAD_FAST(arg=25, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=496, inst=LOAD_FAST(arg=13, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=498, inst=LOAD_FAST(arg=21, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$tx496.18']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=500, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$tx496.18', '$litstates498.19']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=502, inst=LOAD_FAST(arg=13, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$500binary_multiply.20']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=504, inst=LOAD_FAST(arg=21, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$500binary_multiply.20', '$tx502.21']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=506, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$500binary_multiply.20', '$tx502.21', '$litstates504.22']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=508, inst=LOAD_CONST(arg=6, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$500binary_multiply.20', '$506binary_multiply.23']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=510, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$500binary_multiply.20', '$506binary_multiply.23', '$const508.24']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=512, inst=BUILD_SLICE(arg=2, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$500binary_multiply.20', '$510binary_add.25']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=514, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$s_state494.17', '$512build_slice.27']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=516, inst=LOAD_FAST(arg=28, lineno=158)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$514binary_subscr.28']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=518, inst=LOAD_FAST(arg=34, lineno=159)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$514binary_subscr.28', '$l_constants516.29']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=520, inst=CALL_FUNCTION(arg=4, lineno=156)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$490load_deref.15', '$l_dxdt492.16', '$514binary_subscr.28', '$l_constants516.29', '$l_t518.30']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=522, inst=POP_TOP(arg=None, lineno=156)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$520call_function.31']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=524, inst=LOAD_GLOBAL(arg=17, lineno=163)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=526, inst=LOAD_FAST(arg=21, lineno=163)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$524load_global.32']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=528, inst=CALL_FUNCTION(arg=1, lineno=163)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$524load_global.32', '$litstates526.33']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=530, inst=GET_ITER(arg=None, lineno=163)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi458.0', '$phi458.1', '$528call_function.34']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=532, stack=('$phi458.0', '$phi458.1', '$530get_iter.35'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=638 nstack_initial=1), State(pc_initial=788 nstack_initial=1), State(pc_initial=532 nstack_initial=3)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi638.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=638 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=638, inst=LOAD_FAST(arg=24, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=640, inst=LOAD_FAST(arg=13, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums638.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=642, inst=LOAD_FAST(arg=21, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums638.1', '$tx640.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=644, inst=BINARY_MULTIPLY(arg=None, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums638.1', '$tx640.2', '$litstates642.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=646, inst=LOAD_CONST(arg=7, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums638.1', '$644binary_multiply.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=648, inst=BINARY_ADD(arg=None, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums638.1', '$644binary_multiply.4', '$const646.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=650, inst=BINARY_SUBSCR(arg=None, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums638.1', '$648binary_add.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=652, inst=LOAD_FAST(arg=1, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=654, inst=LOAD_FAST(arg=32, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7', '$output652.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=656, inst=LOAD_FAST(arg=19, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7', '$output652.8', '$i654.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=658, inst=BINARY_SUBTRACT(arg=None, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7', '$output652.8', '$i654.9', '$l_warmup656.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=660, inst=LOAD_FAST(arg=15, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7', '$output652.8', '$658binary_subtract.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=662, inst=LOAD_CONST(arg=7, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7', '$output652.8', '$658binary_subtract.11', '$l_param_set660.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=664, inst=BUILD_TUPLE(arg=3, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7', '$output652.8', '$658binary_subtract.11', '$l_param_set660.12', '$const662.13']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=666, inst=STORE_SUBSCR(arg=None, lineno=171)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$650binary_subscr.7', '$output652.8', '$664build_tuple.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=668, inst=LOAD_FAST(arg=24, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=670, inst=LOAD_FAST(arg=13, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums668.15']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=672, inst=LOAD_FAST(arg=21, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums668.15', '$tx670.16']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=674, inst=BINARY_MULTIPLY(arg=None, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums668.15', '$tx670.16', '$litstates672.17']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=676, inst=LOAD_CONST(arg=1, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums668.15', '$674binary_multiply.18']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=678, inst=BINARY_ADD(arg=None, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums668.15', '$674binary_multiply.18', '$const676.19']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=680, inst=BINARY_SUBSCR(arg=None, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums668.15', '$678binary_add.20']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=682, inst=LOAD_FAST(arg=1, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=684, inst=LOAD_FAST(arg=32, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21', '$output682.22']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=686, inst=LOAD_FAST(arg=19, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21', '$output682.22', '$i684.23']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=688, inst=BINARY_SUBTRACT(arg=None, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21', '$output682.22', '$i684.23', '$l_warmup686.24']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=690, inst=LOAD_FAST(arg=15, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21', '$output682.22', '$688binary_subtract.25']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=692, inst=LOAD_CONST(arg=1, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21', '$output682.22', '$688binary_subtract.25', '$l_param_set690.26']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=694, inst=BUILD_TUPLE(arg=3, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21', '$output682.22', '$688binary_subtract.25', '$l_param_set690.26', '$const692.27']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=696, inst=STORE_SUBSCR(arg=None, lineno=172)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$680binary_subscr.21', '$output682.22', '$694build_tuple.28']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=698, inst=LOAD_FAST(arg=24, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=700, inst=LOAD_FAST(arg=13, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums698.29']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=702, inst=LOAD_FAST(arg=21, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums698.29', '$tx700.30']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=704, inst=BINARY_MULTIPLY(arg=None, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums698.29', '$tx700.30', '$litstates702.31']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=706, inst=LOAD_CONST(arg=3, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums698.29', '$704binary_multiply.32']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=708, inst=BINARY_ADD(arg=None, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums698.29', '$704binary_multiply.32', '$const706.33']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=710, inst=BINARY_SUBSCR(arg=None, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums698.29', '$708binary_add.34']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=712, inst=LOAD_FAST(arg=1, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=714, inst=LOAD_FAST(arg=32, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35', '$output712.36']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=716, inst=LOAD_FAST(arg=19, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35', '$output712.36', '$i714.37']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=718, inst=BINARY_SUBTRACT(arg=None, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35', '$output712.36', '$i714.37', '$l_warmup716.38']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=720, inst=LOAD_FAST(arg=15, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35', '$output712.36', '$718binary_subtract.39']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=722, inst=LOAD_CONST(arg=3, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35', '$output712.36', '$718binary_subtract.39', '$l_param_set720.40']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=724, inst=BUILD_TUPLE(arg=3, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35', '$output712.36', '$718binary_subtract.39', '$l_param_set720.40', '$const722.41']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=726, inst=STORE_SUBSCR(arg=None, lineno=173)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$710binary_subscr.35', '$output712.36', '$724build_tuple.42']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=728, inst=LOAD_FAST(arg=24, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=730, inst=LOAD_FAST(arg=13, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums728.43']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=732, inst=LOAD_FAST(arg=21, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums728.43', '$tx730.44']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=734, inst=BINARY_MULTIPLY(arg=None, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums728.43', '$tx730.44', '$litstates732.45']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=736, inst=LOAD_CONST(arg=8, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums728.43', '$734binary_multiply.46']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=738, inst=BINARY_ADD(arg=None, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums728.43', '$734binary_multiply.46', '$const736.47']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=740, inst=BINARY_SUBSCR(arg=None, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums728.43', '$738binary_add.48']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=742, inst=LOAD_FAST(arg=1, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=744, inst=LOAD_FAST(arg=32, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49', '$output742.50']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=746, inst=LOAD_FAST(arg=19, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49', '$output742.50', '$i744.51']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=748, inst=BINARY_SUBTRACT(arg=None, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49', '$output742.50', '$i744.51', '$l_warmup746.52']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=750, inst=LOAD_FAST(arg=15, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49', '$output742.50', '$748binary_subtract.53']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=752, inst=LOAD_CONST(arg=8, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49', '$output742.50', '$748binary_subtract.53', '$l_param_set750.54']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=754, inst=BUILD_TUPLE(arg=3, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49', '$output742.50', '$748binary_subtract.53', '$l_param_set750.54', '$const752.55']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=756, inst=STORE_SUBSCR(arg=None, lineno=174)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$740binary_subscr.49', '$output742.50', '$754build_tuple.56']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=758, inst=LOAD_FAST(arg=24, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=760, inst=LOAD_FAST(arg=13, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums758.57']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=762, inst=LOAD_FAST(arg=21, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums758.57', '$tx760.58']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=764, inst=BINARY_MULTIPLY(arg=None, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums758.57', '$tx760.58', '$litstates762.59']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=766, inst=LOAD_CONST(arg=9, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums758.57', '$764binary_multiply.60']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=768, inst=BINARY_ADD(arg=None, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums758.57', '$764binary_multiply.60', '$const766.61']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=770, inst=BINARY_SUBSCR(arg=None, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$s_sums758.57', '$768binary_add.62']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=772, inst=LOAD_FAST(arg=1, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=774, inst=LOAD_FAST(arg=32, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63', '$output772.64']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=776, inst=LOAD_FAST(arg=19, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63', '$output772.64', '$i774.65']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=778, inst=BINARY_SUBTRACT(arg=None, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63', '$output772.64', '$i774.65', '$l_warmup776.66']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=780, inst=LOAD_FAST(arg=15, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63', '$output772.64', '$778binary_subtract.67']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=782, inst=LOAD_CONST(arg=9, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63', '$output772.64', '$778binary_subtract.67', '$l_param_set780.68']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=784, inst=BUILD_TUPLE(arg=3, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63', '$output772.64', '$778binary_subtract.67', '$l_param_set780.68', '$const782.69']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=786, inst=STORE_SUBSCR(arg=None, lineno=175)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi638.0', '$770binary_subscr.63', '$output772.64', '$784build_tuple.70']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=788, stack=('$phi638.0',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=788 nstack_initial=1), State(pc_initial=532 nstack_initial=3), State(pc_initial=788 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi788.0']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=788 nstack_initial=1)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=788, inst=LOAD_DEREF(arg=2, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=790, inst=LOAD_CONST(arg=7, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$788load_deref.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=792, inst=CALL_FUNCTION(arg=1, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$788load_deref.1', '$const790.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=794, inst=LOAD_FAST(arg=24, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=796, inst=LOAD_FAST(arg=13, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=798, inst=LOAD_FAST(arg=21, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$tx796.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=800, inst=BINARY_MULTIPLY(arg=None, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$tx796.5', '$litstates798.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=802, inst=LOAD_FAST(arg=13, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$800binary_multiply.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=804, inst=LOAD_FAST(arg=21, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$800binary_multiply.7', '$tx802.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=806, inst=BINARY_MULTIPLY(arg=None, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$800binary_multiply.7', '$tx802.8', '$litstates804.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=808, inst=LOAD_CONST(arg=6, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$800binary_multiply.7', '$806binary_multiply.10']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=810, inst=BINARY_ADD(arg=None, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$800binary_multiply.7', '$806binary_multiply.10', '$const808.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=812, inst=BUILD_SLICE(arg=2, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$800binary_multiply.7', '$810binary_add.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=814, inst=STORE_SUBSCR(arg=None, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0', '$792call_function.3', '$s_sums794.4', '$812build_slice.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=816, inst=NOP(arg=1, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=818, inst=JUMP_ABSOLUTE(arg=442, lineno=178)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi788.0']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=442, stack=('$phi788.0',), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=532 nstack_initial=3), State(pc_initial=788 nstack_initial=1), State(pc_initial=442 nstack_initial=1)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi532.0', '$phi532.1', '$phi532.2']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=532 nstack_initial=3)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=532, inst=FOR_ITER(arg=86, lineno=163)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi532.0', '$phi532.1', '$phi532.2']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=620, stack=('$phi532.0', '$phi532.1'), blockstack=(), npush=0), Edge(pc=534, stack=('$phi532.0', '$phi532.1', '$phi532.2', '$532for_iter.4'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=788 nstack_initial=1), State(pc_initial=442 nstack_initial=1), State(pc_initial=620 nstack_initial=2), State(pc_initial=534 nstack_initial=4)])
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=442 nstack_initial=1), State(pc_initial=620 nstack_initial=2), State(pc_initial=534 nstack_initial=4)])
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=620 nstack_initial=2), State(pc_initial=534 nstack_initial=4)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi620.0', '$phi620.1']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=620 nstack_initial=2)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=620, inst=NOP(arg=1, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi620.0', '$phi620.1']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=622, inst=JUMP_ABSOLUTE(arg=456, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi620.0', '$phi620.1']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=456, stack=('$phi620.0', '$phi620.1'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=534 nstack_initial=4), State(pc_initial=456 nstack_initial=2)])
07/23/2024 06:57:04 PM - DEBUG - stack: ['$phi534.0', '$phi534.1', '$phi534.2', '$phi534.3']
07/23/2024 06:57:04 PM - DEBUG - state.pc_initial: State(pc_initial=534 nstack_initial=4)
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=534, inst=STORE_FAST(arg=37, lineno=163)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$phi534.3']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=536, inst=LOAD_FAST(arg=25, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=538, inst=LOAD_FAST(arg=13, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=540, inst=LOAD_FAST(arg=21, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$tx538.5']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=542, inst=BINARY_MULTIPLY(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$tx538.5', '$litstates540.6']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=544, inst=LOAD_FAST(arg=37, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$542binary_multiply.7']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=546, inst=BINARY_ADD(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$542binary_multiply.7', '$k544.8']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=548, inst=DUP_TOP_TWO(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=550, inst=BINARY_SUBSCR(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$548dup_top_two.10', '$548dup_top_two.11']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=552, inst=LOAD_FAST(arg=26, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=554, inst=LOAD_FAST(arg=37, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$l_dxdt552.13']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=556, inst=BINARY_SUBSCR(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$l_dxdt552.13', '$k554.14']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=558, inst=LOAD_FAST(arg=16, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$556binary_subscr.15']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=560, inst=BINARY_MULTIPLY(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$556binary_subscr.15', '$l_step_size558.16']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=562, inst=LOAD_FAST(arg=27, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$560binary_multiply.17']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=564, inst=LOAD_FAST(arg=37, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$560binary_multiply.17', '$l_noise562.18']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=566, inst=BINARY_SUBSCR(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$560binary_multiply.17', '$l_noise562.18', '$k564.19']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=568, inst=BINARY_ADD(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$560binary_multiply.17', '$566binary_subscr.20']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=570, inst=INPLACE_ADD(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$550binary_subscr.12', '$568binary_add.21']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=572, inst=ROT_THREE(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_state536.4', '$546binary_add.9', '$570inplace_add.22']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=574, inst=STORE_SUBSCR(arg=None, lineno=164)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$570inplace_add.22', '$s_state536.4', '$546binary_add.9']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=576, inst=LOAD_FAST(arg=24, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=578, inst=LOAD_FAST(arg=13, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=580, inst=LOAD_FAST(arg=21, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$tx578.24']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=582, inst=BINARY_MULTIPLY(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$tx578.24', '$litstates580.25']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=584, inst=LOAD_FAST(arg=37, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$582binary_multiply.26']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=586, inst=BINARY_ADD(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$582binary_multiply.26', '$k584.27']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=588, inst=DUP_TOP_TWO(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=590, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$588dup_top_two.29', '$588dup_top_two.30']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=592, inst=LOAD_FAST(arg=25, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=594, inst=LOAD_FAST(arg=13, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$s_state592.32']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=596, inst=LOAD_FAST(arg=21, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$s_state592.32', '$tx594.33']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=598, inst=BINARY_MULTIPLY(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$s_state592.32', '$tx594.33', '$litstates596.34']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=600, inst=LOAD_FAST(arg=37, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$s_state592.32', '$598binary_multiply.35']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=602, inst=BINARY_ADD(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$s_state592.32', '$598binary_multiply.35', '$k600.36']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=604, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$s_state592.32', '$602binary_add.37']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=606, inst=LOAD_FAST(arg=36, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$604binary_subscr.38']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=608, inst=BINARY_MULTIPLY(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$604binary_subscr.38', '$filtercoeff606.39']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=610, inst=INPLACE_ADD(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$590binary_subscr.31', '$608binary_multiply.40']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=612, inst=ROT_THREE(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$s_sums576.23', '$586binary_add.28', '$610inplace_add.41']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=614, inst=STORE_SUBSCR(arg=None, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2', '$610inplace_add.41', '$s_sums576.23', '$586binary_add.28']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=616, inst=NOP(arg=2, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2']
07/23/2024 06:57:04 PM - DEBUG - dispatch pc=618, inst=JUMP_ABSOLUTE(arg=532, lineno=165)
07/23/2024 06:57:04 PM - DEBUG - stack ['$phi534.0', '$phi534.1', '$phi534.2']
07/23/2024 06:57:04 PM - DEBUG - end state. edges=[Edge(pc=532, stack=('$phi534.0', '$phi534.1', '$phi534.2'), blockstack=(), npush=0)]
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=456 nstack_initial=2), State(pc_initial=532 nstack_initial=3)])
07/23/2024 06:57:04 PM - DEBUG - pending: deque([State(pc_initial=532 nstack_initial=3)])
07/23/2024 06:57:04 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:04 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=294 nstack_initial=1): {'$phi294.0'},
             State(pc_initial=296 nstack_initial=2): {'$phi296.1'},
             State(pc_initial=314 nstack_initial=0): set(),
             State(pc_initial=322 nstack_initial=1): {'$phi322.0'},
             State(pc_initial=324 nstack_initial=2): {'$phi324.1'},
             State(pc_initial=350 nstack_initial=0): set(),
             State(pc_initial=358 nstack_initial=1): {'$phi358.0'},
             State(pc_initial=360 nstack_initial=2): {'$phi360.1'},
             State(pc_initial=406 nstack_initial=0): set(),
             State(pc_initial=442 nstack_initial=1): set(),
             State(pc_initial=444 nstack_initial=1): {'$phi444.0'},
             State(pc_initial=446 nstack_initial=2): {'$phi446.1'},
             State(pc_initial=456 nstack_initial=2): {'$phi456.1'},
             State(pc_initial=458 nstack_initial=3): {'$phi458.2'},
             State(pc_initial=532 nstack_initial=3): {'$phi532.2'},
             State(pc_initial=534 nstack_initial=4): {'$phi534.3'},
             State(pc_initial=620 nstack_initial=2): set(),
             State(pc_initial=624 nstack_initial=1): set(),
             State(pc_initial=638 nstack_initial=1): set(),
             State(pc_initial=788 nstack_initial=1): set(),
             State(pc_initial=820 nstack_initial=0): set()})
07/23/2024 06:57:04 PM - DEBUG - defmap: {'$phi294.0': State(pc_initial=58 nstack_initial=0),
 '$phi296.1': State(pc_initial=294 nstack_initial=1),
 '$phi322.0': State(pc_initial=314 nstack_initial=0),
 '$phi324.1': State(pc_initial=322 nstack_initial=1),
 '$phi358.0': State(pc_initial=350 nstack_initial=0),
 '$phi360.1': State(pc_initial=358 nstack_initial=1),
 '$phi442.0': State(pc_initial=406 nstack_initial=0),
 '$phi446.1': State(pc_initial=444 nstack_initial=1),
 '$phi456.1': State(pc_initial=446 nstack_initial=2),
 '$phi458.2': State(pc_initial=456 nstack_initial=2),
 '$phi532.2': State(pc_initial=458 nstack_initial=3),
 '$phi534.3': State(pc_initial=532 nstack_initial=3)}
07/23/2024 06:57:04 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi294.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0)),
                           ('$phi296.0',
                            State(pc_initial=296 nstack_initial=2))},
             '$phi296.0': {('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi296.1': {('$294for_iter.2',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi322.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0)),
                           ('$phi324.0',
                            State(pc_initial=324 nstack_initial=2))},
             '$phi324.0': {('$phi322.0',
                            State(pc_initial=322 nstack_initial=1))},
             '$phi324.1': {('$322for_iter.2',
                            State(pc_initial=322 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0)),
                           ('$phi360.0',
                            State(pc_initial=360 nstack_initial=2))},
             '$phi360.0': {('$phi358.0',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi360.1': {('$358for_iter.2',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi442.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=1))},
             '$phi444.0': {('$phi442.0',
                            State(pc_initial=442 nstack_initial=1))},
             '$phi446.0': {('$phi444.0',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi446.1': {('$444for_iter.2',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi456.0': {('$phi446.0',
                            State(pc_initial=446 nstack_initial=2)),
                           ('$phi620.0',
                            State(pc_initial=620 nstack_initial=2))},
             '$phi456.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2)),
                           ('$phi620.1',
                            State(pc_initial=620 nstack_initial=2))},
             '$phi458.0': {('$phi456.0',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi458.1': {('$phi456.1',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi458.2': {('$456for_iter.3',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi532.0': {('$phi458.0',
                            State(pc_initial=458 nstack_initial=3)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=4))},
             '$phi532.1': {('$phi458.1',
                            State(pc_initial=458 nstack_initial=3)),
                           ('$phi534.1',
                            State(pc_initial=534 nstack_initial=4))},
             '$phi532.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3)),
                           ('$phi534.2',
                            State(pc_initial=534 nstack_initial=4))},
             '$phi534.0': {('$phi532.0',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi534.1': {('$phi532.1',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi534.2': {('$phi532.2',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi534.3': {('$532for_iter.4',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi620.0': {('$phi532.0',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi620.1': {('$phi532.1',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi624.0': {('$phi456.0',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi638.0': {('$phi624.0',
                            State(pc_initial=624 nstack_initial=1))},
             '$phi788.0': {('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))}})
07/23/2024 06:57:04 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi294.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0)),
                           ('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi296.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi296.1': {('$294for_iter.2',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi322.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0)),
                           ('$phi322.0',
                            State(pc_initial=322 nstack_initial=1))},
             '$phi324.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0))},
             '$phi324.1': {('$322for_iter.2',
                            State(pc_initial=322 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0)),
                           ('$phi358.0',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi360.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0))},
             '$phi360.1': {('$358for_iter.2',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi442.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi444.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi446.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi446.1': {('$444for_iter.2',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi456.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi456.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2)),
                           ('$phi532.1',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi458.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi458.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2)),
                           ('$phi532.1',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi458.2': {('$456for_iter.3',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi532.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi532.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2)),
                           ('$phi532.1',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi532.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3)),
                           ('$phi532.2',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi534.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi534.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi534.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3))},
             '$phi534.3': {('$532for_iter.4',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi620.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi620.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi624.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3)),
                           ('$phi624.0',
                            State(pc_initial=624 nstack_initial=1)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi638.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3)),
                           ('$phi638.0',
                            State(pc_initial=638 nstack_initial=1))},
             '$phi788.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3))}})
07/23/2024 06:57:04 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi294.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi296.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi296.1': {('$294for_iter.2',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi322.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0))},
             '$phi324.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0))},
             '$phi324.1': {('$322for_iter.2',
                            State(pc_initial=322 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0))},
             '$phi360.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0))},
             '$phi360.1': {('$358for_iter.2',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi442.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi444.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi446.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0)),
                           ('$phi532.0',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi446.1': {('$444for_iter.2',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi456.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi456.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi458.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi458.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi458.2': {('$456for_iter.3',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi532.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi532.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi532.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3))},
             '$phi534.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi534.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi534.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3))},
             '$phi534.3': {('$532for_iter.4',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi620.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi620.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi624.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi638.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi788.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))}})
07/23/2024 06:57:04 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi294.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi296.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi296.1': {('$294for_iter.2',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi322.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0))},
             '$phi324.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0))},
             '$phi324.1': {('$322for_iter.2',
                            State(pc_initial=322 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0))},
             '$phi360.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0))},
             '$phi360.1': {('$358for_iter.2',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi442.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi444.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi446.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi446.1': {('$444for_iter.2',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi456.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi456.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi458.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi458.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi458.2': {('$456for_iter.3',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi532.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi532.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi532.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3))},
             '$phi534.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi534.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi534.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3))},
             '$phi534.3': {('$532for_iter.4',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi620.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi620.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi624.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi638.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi788.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))}})
07/23/2024 06:57:04 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi294.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi296.0': {('$292get_iter.103',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi296.1': {('$294for_iter.2',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi322.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0))},
             '$phi324.0': {('$320get_iter.3',
                            State(pc_initial=314 nstack_initial=0))},
             '$phi324.1': {('$322for_iter.2',
                            State(pc_initial=322 nstack_initial=1))},
             '$phi358.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0))},
             '$phi360.0': {('$356get_iter.3',
                            State(pc_initial=350 nstack_initial=0))},
             '$phi360.1': {('$358for_iter.2',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi442.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi444.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi446.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi446.1': {('$444for_iter.2',
                            State(pc_initial=444 nstack_initial=1))},
             '$phi456.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi456.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi458.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi458.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi458.2': {('$456for_iter.3',
                            State(pc_initial=456 nstack_initial=2))},
             '$phi532.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi532.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi532.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3))},
             '$phi534.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi534.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi534.2': {('$530get_iter.35',
                            State(pc_initial=458 nstack_initial=3))},
             '$phi534.3': {('$532for_iter.4',
                            State(pc_initial=532 nstack_initial=3))},
             '$phi620.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi620.1': {('$454get_iter.5',
                            State(pc_initial=446 nstack_initial=2))},
             '$phi624.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi638.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))},
             '$phi788.0': {('$440get_iter.16',
                            State(pc_initial=406 nstack_initial=0))}})
07/23/2024 06:57:04 PM - DEBUG - keep phismap: {'$phi294.0': {('$292get_iter.103', State(pc_initial=58 nstack_initial=0))},
 '$phi296.1': {('$294for_iter.2', State(pc_initial=294 nstack_initial=1))},
 '$phi322.0': {('$320get_iter.3', State(pc_initial=314 nstack_initial=0))},
 '$phi324.1': {('$322for_iter.2', State(pc_initial=322 nstack_initial=1))},
 '$phi358.0': {('$356get_iter.3', State(pc_initial=350 nstack_initial=0))},
 '$phi360.1': {('$358for_iter.2', State(pc_initial=358 nstack_initial=1))},
 '$phi444.0': {('$440get_iter.16', State(pc_initial=406 nstack_initial=0))},
 '$phi446.1': {('$444for_iter.2', State(pc_initial=444 nstack_initial=1))},
 '$phi456.1': {('$454get_iter.5', State(pc_initial=446 nstack_initial=2))},
 '$phi458.2': {('$456for_iter.3', State(pc_initial=456 nstack_initial=2))},
 '$phi532.2': {('$530get_iter.35', State(pc_initial=458 nstack_initial=3))},
 '$phi534.3': {('$532for_iter.4', State(pc_initial=532 nstack_initial=3))}}
07/23/2024 06:57:04 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=58 nstack_initial=0): {'$phi294.0': '$292get_iter.103'},
             State(pc_initial=294 nstack_initial=1): {'$phi296.1': '$294for_iter.2'},
             State(pc_initial=314 nstack_initial=0): {'$phi322.0': '$320get_iter.3'},
             State(pc_initial=322 nstack_initial=1): {'$phi324.1': '$322for_iter.2'},
             State(pc_initial=350 nstack_initial=0): {'$phi358.0': '$356get_iter.3'},
             State(pc_initial=358 nstack_initial=1): {'$phi360.1': '$358for_iter.2'},
             State(pc_initial=406 nstack_initial=0): {'$phi444.0': '$440get_iter.16'},
             State(pc_initial=444 nstack_initial=1): {'$phi446.1': '$444for_iter.2'},
             State(pc_initial=446 nstack_initial=2): {'$phi456.1': '$454get_iter.5'},
             State(pc_initial=456 nstack_initial=2): {'$phi458.2': '$456for_iter.3'},
             State(pc_initial=458 nstack_initial=3): {'$phi532.2': '$530get_iter.35'},
             State(pc_initial=532 nstack_initial=3): {'$phi534.3': '$532for_iter.4'}})
07/23/2024 06:57:04 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_attr.3'}), (10, {'func': '$2load_global.0', 'args': ['$8load_attr.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$14load_global.5'}), (16, {'res': '$16load_global.6'}), (18, {'item': '$16load_global.6', 'res': '$18load_attr.7'}), (20, {'item': '$18load_attr.7', 'res': '$20load_attr.8'}), (22, {'func': '$14load_global.5', 'args': ['$20load_attr.8'], 'res': '$22call_function.9'}), (24, {'value': '$22call_function.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$xblocksize28.11'}), (30, {'res': '$block_index30.12'}), (32, {'lhs': '$xblocksize28.11', 'rhs': '$block_index30.12', 'res': '$32binary_multiply.13'}), (34, {'res': '$tx34.14'}), (36, {'lhs': '$32binary_multiply.13', 'rhs': '$tx34.14', 'res': '$36binary_add.15'}), (38, {'func': '$26load_global.10', 'args': ['$36binary_add.15'], 'res': '$38call_function.16'}), (40, {'value': '$38call_function.16'}), (42, {'res': '$l_param_set42.17'}), (44, {'res': '$44load_global.18'}), (46, {'res': '$grid_values46.19'}), (48, {'func': '$44load_global.18', 'args': ['$grid_values46.19'], 'res': '$48call_function.20'}), (50, {'lhs': '$l_param_set42.17', 'rhs': '$48call_function.20', 'res': '$50compare_op.21'}), (52, {'pred': '$50compare_op.21'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$58load_deref.0'}), (60, {'res': '$step_size60.1'}), (62, {'func': '$58load_deref.0', 'args': ['$step_size60.1'], 'res': '$62call_function.2'}), (64, {'value': '$62call_function.2'}), (66, {'res': '$66load_global.3'}), (68, {'res': '$68load_global.4'}), (70, {'res': '$const70.5'}), (72, {'res': '$output_fs72.6'}), (74, {'res': '$l_step_size74.7'}), (76, {'lhs': '$output_fs72.6', 'rhs': '$l_step_size74.7', 'res': '$76binary_multiply.8'}), (78, {'lhs': '$const70.5', 'rhs': '$76binary_multiply.8', 'res': '$78binary_true_divide.9'}), (80, {'func': '$68load_global.4', 'args': ['$78binary_true_divide.9'], 'res': '$80call_function.10'}), (82, {'func': '$66load_global.3', 'args': ['$80call_function.10'], 'res': '$82call_function.11'}), (84, {'value': '$82call_function.11'}), (86, {'res': '$86load_global.12'}), (88, {'res': '$88load_global.13'}), (90, {'res': '$duration90.14'}), (92, {'res': '$l_step_size92.15'}), (94, {'lhs': '$duration90.14', 'rhs': '$l_step_size92.15', 'res': '$94binary_true_divide.16'}), (96, {'res': '$l_ds_rate96.17'}), (98, {'lhs': '$94binary_true_divide.16', 'rhs': '$l_ds_rate96.17', 'res': '$98binary_true_divide.18'}), (100, {'func': '$88load_global.13', 'args': ['$98binary_true_divide.18'], 'res': '$100call_function.19'}), (102, {'func': '$86load_global.12', 'args': ['$100call_function.19'], 'res': '$102call_function.20'}), (104, {'value': '$102call_function.20'}), (106, {'res': '$106load_global.21'}), (108, {'res': '$warmup_time108.22'}), (110, {'res': '$output_fs110.23'}), (112, {'lhs': '$warmup_time108.22', 'rhs': '$output_fs110.23', 'res': '$112binary_multiply.24'}), (114, {'func': '$106load_global.21', 'args': ['$112binary_multiply.24'], 'res': '$114call_function.25'}), (116, {'value': '$114call_function.25'}), (118, {'res': '$118load_global.26'}), (120, {'res': '$120load_global.27'}), (122, {'func': '$118load_global.26', 'args': ['$120load_global.27'], 'res': '$122call_function.28'}), (124, {'value': '$122call_function.28'}), (126, {'res': '$126load_global.29'}), (128, {'res': '$128load_global.30'}), (130, {'func': '$126load_global.29', 'args': ['$128load_global.30'], 'res': '$130call_function.31'}), (132, {'value': '$130call_function.31'}), (134, {'res': '$134load_global.32'}), (136, {'res': '$136load_global.33'}), (138, {'func': '$134load_global.32', 'args': ['$136load_global.33'], 'res': '$138call_function.34'}), (140, {'value': '$138call_function.34'}), (142, {'res': '$142load_global.35'}), (144, {'item': '$142load_global.35', 'res': '$144load_attr.36'}), (146, {'item': '$144load_attr.36', 'res': '$146load_attr.37'}), (148, {'res': '$litzero148.38'}), (150, {'res': '$150load_deref.39'}), (152, {'res': '$const152.40'}), (154, {'func': '$146load_attr.37', 'args': ['$litzero148.38', '$150load_deref.39'], 'names': '$const152.40', 'res': '$154call_function_kw.41'}), (156, {'value': '$154call_function_kw.41'}), (158, {'res': '$dynamic_mem158.42'}), (160, {'res': '$const160.43'}), (162, {'res': '$xblocksize162.44'}), (164, {'res': '$164load_global.45'}), (166, {'lhs': '$xblocksize162.44', 'rhs': '$164load_global.45', 'res': '$166binary_multiply.46'}), (168, {'start': '$const160.43', 'stop': '$166binary_multiply.46', 'step': None, 'res': '$168build_slice.48', 'slicevar': '$168build_slice.47'}), (170, {'index': '$168build_slice.48', 'target': '$dynamic_mem158.42', 'res': '$170binary_subscr.49'}), (172, {'value': '$170binary_subscr.49'}), (174, {'res': '$dynamic_mem174.50'}), (176, {'res': '$xblocksize176.51'}), (178, {'res': '$178load_global.52'}), (180, {'lhs': '$xblocksize176.51', 'rhs': '$178load_global.52', 'res': '$180binary_multiply.53'}), (182, {'res': '$const182.54'}), (184, {'res': '$xblocksize184.55'}), (186, {'lhs': '$const182.54', 'rhs': '$xblocksize184.55', 'res': '$186binary_multiply.56'}), (188, {'res': '$188load_global.57'}), (190, {'lhs': '$186binary_multiply.56', 'rhs': '$188load_global.57', 'res': '$190binary_multiply.58'}), (192, {'start': '$180binary_multiply.53', 'stop': '$190binary_multiply.58', 'step': None, 'res': '$192build_slice.60', 'slicevar': '$192build_slice.59'}), (194, {'index': '$192build_slice.60', 'target': '$dynamic_mem174.50', 'res': '$194binary_subscr.61'}), (196, {'value': '$194binary_subscr.61'}), (198, {'res': '$198load_global.62'}), (200, {'item': '$198load_global.62', 'res': '$200load_attr.63'}), (202, {'item': '$200load_attr.63', 'res': '$202load_attr.64'}), (204, {'res': '$litstates204.65'}), (206, {'res': '$206load_deref.66'}), (208, {'res': '$const208.67'}), (210, {'func': '$202load_attr.64', 'args': ['$litstates204.65', '$206load_deref.66'], 'names': '$const208.67', 'res': '$210call_function_kw.68'}), (212, {'value': '$210call_function_kw.68'}), (214, {'res': '$214load_global.69'}), (216, {'item': '$214load_global.69', 'res': '$216load_attr.70'}), (218, {'item': '$216load_attr.70', 'res': '$218load_attr.71'}), (220, {'res': '$litstates220.72'}), (222, {'res': '$222load_deref.73'}), (224, {'res': '$const224.74'}), (226, {'func': '$218load_attr.71', 'args': ['$litstates220.72', '$222load_deref.73'], 'names': '$const224.74', 'res': '$226call_function_kw.75'}), (228, {'value': '$226call_function_kw.75'}), (230, {'res': '$230load_global.76'}), (232, {'item': '$230load_global.76', 'res': '$232load_attr.77'}), (234, {'item': '$232load_attr.77', 'res': '$234load_attr.78'}), (236, {'res': '$litconstantslength236.79'}), (238, {'res': '$238load_deref.80'}), (240, {'res': '$const240.81'}), (242, {'func': '$234load_attr.78', 'args': ['$litconstantslength236.79', '$238load_deref.80'], 'names': '$const240.81', 'res': '$242call_function_kw.82'}), (244, {'value': '$242call_function_kw.82'}), (246, {'res': '$246load_global.83'}), (248, {'item': '$246load_global.83', 'res': '$248load_attr.84'}), (250, {'item': '$248load_attr.84', 'res': '$250load_method.85'}), (252, {'res': '$noise_sigmas252.86'}), (254, {'func': '$250load_method.85', 'args': ['$noise_sigmas252.86'], 'res': '$254call_method.87'}), (256, {'value': '$254call_method.87'}), (258, {'res': '$258load_global.88'}), (260, {'item': '$258load_global.88', 'res': '$260load_attr.89'}), (262, {'item': '$260load_attr.89', 'res': '$262load_method.90'}), (264, {'res': '$RNG264.91'}), (266, {'func': '$262load_method.90', 'args': ['$RNG264.91'], 'res': '$266call_method.92'}), (268, {'value': '$266call_method.92'}), (270, {'res': '$270load_global.93'}), (272, {'item': '$270load_global.93', 'res': '$272load_attr.94'}), (274, {'item': '$272load_attr.94', 'res': '$274load_method.95'}), (276, {'res': '$filtercoeffs276.96'}), (278, {'func': '$274load_method.95', 'args': ['$filtercoeffs276.96'], 'res': '$278call_method.97'}), (280, {'value': '$278call_method.97'}), (282, {'res': '$282load_global.98'}), (284, {'res': '$284load_global.99'}), (286, {'res': '$constants286.100'}), (288, {'func': '$284load_global.99', 'args': ['$constants286.100'], 'res': '$288call_function.101'}), (290, {'func': '$282load_global.98', 'args': ['$288call_function.101'], 'res': '$290call_function.102'}), (292, {'value': '$290call_function.102', 'res': '$292get_iter.103'})), outgoing_phis={'$phi294.0': '$292get_iter.103'}, blockstack=(), active_try_block=None, outgoing_edgepushed={294: ('$292get_iter.103',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=294 nstack_initial=1):
AdaptBlockInfo(insts=((294, {'iterator': '$phi294.0', 'pair': '$294for_iter.1', 'indval': '$294for_iter.2', 'pred': '$294for_iter.3'}),), outgoing_phis={'$phi296.1': '$294for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={314: (), 296: ('$phi294.0', '$294for_iter.2')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=296 nstack_initial=2):
AdaptBlockInfo(insts=((296, {'value': '$phi296.1'}), (298, {'res': '$constants298.2'}), (300, {'res': '$i300.3'}), (302, {'index': '$i300.3', 'target': '$constants298.2', 'res': '$302binary_subscr.4'}), (304, {'res': '$l_constants304.5'}), (306, {'res': '$i306.6'}), (308, {'target': '$l_constants304.5', 'index': '$i306.6', 'value': '$302binary_subscr.4'}), (310, {}), (312, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={294: ('$phi296.0',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=314 nstack_initial=0):
AdaptBlockInfo(insts=((314, {'res': '$314load_global.0'}), (316, {'res': '$grid_indices316.1'}), (318, {'func': '$314load_global.0', 'args': ['$grid_indices316.1'], 'res': '$318call_function.2'}), (320, {'value': '$318call_function.2', 'res': '$320get_iter.3'})), outgoing_phis={'$phi322.0': '$320get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={322: ('$320get_iter.3',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=322 nstack_initial=1):
AdaptBlockInfo(insts=((322, {'iterator': '$phi322.0', 'pair': '$322for_iter.1', 'indval': '$322for_iter.2', 'pred': '$322for_iter.3'}),), outgoing_phis={'$phi324.1': '$322for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: (), 324: ('$phi322.0', '$322for_iter.2')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=324 nstack_initial=2):
AdaptBlockInfo(insts=((324, {'iterable': '$phi324.1', 'stores': ['$324unpack_sequence.2', '$324unpack_sequence.3'], 'tupleobj': '$324unpack_sequence.4'}), (326, {'value': '$324unpack_sequence.2'}), (328, {'value': '$324unpack_sequence.3'}), (330, {'res': '$grid_values330.5'}), (332, {'res': '$l_param_set332.6'}), (334, {'res': '$i334.7'}), (336, {'items': ['$l_param_set332.6', '$i334.7'], 'res': '$336build_tuple.8'}), (338, {'index': '$336build_tuple.8', 'target': '$grid_values330.5', 'res': '$338binary_subscr.9'}), (340, {'res': '$l_constants340.10'}), (342, {'res': '$index342.11'}), (344, {'target': '$l_constants340.10', 'index': '$index342.11', 'value': '$338binary_subscr.9'}), (346, {}), (348, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={322: ('$phi324.0',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=350 nstack_initial=0):
AdaptBlockInfo(insts=((350, {'res': '$350load_global.0'}), (352, {'res': '$352load_global.1'}), (354, {'func': '$350load_global.0', 'args': ['$352load_global.1'], 'res': '$354call_function.2'}), (356, {'value': '$354call_function.2', 'res': '$356get_iter.3'})), outgoing_phis={'$phi358.0': '$356get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={358: ('$356get_iter.3',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=358 nstack_initial=1):
AdaptBlockInfo(insts=((358, {'iterator': '$phi358.0', 'pair': '$358for_iter.1', 'indval': '$358for_iter.2', 'pred': '$358for_iter.3'}),), outgoing_phis={'$phi360.1': '$358for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={406: (), 360: ('$phi358.0', '$358for_iter.2')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=360 nstack_initial=2):
AdaptBlockInfo(insts=((360, {'value': '$phi360.1'}), (362, {'res': '$inits362.2'}), (364, {'res': '$i364.3'}), (366, {'index': '$i364.3', 'target': '$inits362.2', 'res': '$366binary_subscr.4'}), (368, {'res': '$s_state368.5'}), (370, {'res': '$tx370.6'}), (372, {'res': '$372load_global.7'}), (374, {'lhs': '$tx370.6', 'rhs': '$372load_global.7', 'res': '$374binary_multiply.8'}), (376, {'res': '$i376.9'}), (378, {'lhs': '$374binary_multiply.8', 'rhs': '$i376.9', 'res': '$378binary_add.10'}), (380, {'target': '$s_state368.5', 'index': '$378binary_add.10', 'value': '$366binary_subscr.4'}), (382, {'res': '$382load_deref.11'}), (384, {'res': '$const384.12'}), (386, {'func': '$382load_deref.11', 'args': ['$const384.12'], 'res': '$386call_function.13'}), (388, {'res': '$s_sums388.14'}), (390, {'res': '$tx390.15'}), (392, {'res': '$392load_global.16'}), (394, {'lhs': '$tx390.15', 'rhs': '$392load_global.16', 'res': '$394binary_multiply.17'}), (396, {'res': '$i396.18'}), (398, {'lhs': '$394binary_multiply.17', 'rhs': '$i396.18', 'res': '$398binary_add.19'}), (400, {'target': '$s_sums388.14', 'index': '$398binary_add.19', 'value': '$386call_function.13'}), (402, {}), (404, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={358: ('$phi360.0',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=406 nstack_initial=0):
AdaptBlockInfo(insts=((406, {'res': '$406load_deref.0'}), (408, {'res': '$const408.1'}), (410, {'func': '$406load_deref.0', 'args': ['$const408.1'], 'res': '$410call_function.2'}), (412, {'res': '$l_dxdt412.3'}), (414, {'res': '$const414.4'}), (416, {'res': '$const416.5'}), (418, {'start': '$const414.4', 'stop': '$const416.5', 'step': None, 'res': '$418build_slice.7', 'slicevar': '$418build_slice.6'}), (420, {'target': '$l_dxdt412.3', 'index': '$418build_slice.7', 'value': '$410call_function.2'}), (422, {'res': '$422load_deref.8'}), (424, {'res': '$const424.9'}), (426, {'func': '$422load_deref.8', 'args': ['$const424.9'], 'res': '$426call_function.10'}), (428, {'value': '$426call_function.10'}), (430, {'res': '$430load_global.11'}), (432, {'res': '$l_n_outer432.12'}), (434, {'res': '$l_warmup434.13'}), (436, {'lhs': '$l_n_outer432.12', 'rhs': '$l_warmup434.13', 'res': '$436binary_add.14'}), (438, {'func': '$430load_global.11', 'args': ['$436binary_add.14'], 'res': '$438call_function.15'}), (440, {'value': '$438call_function.15', 'res': '$440get_iter.16'})), outgoing_phis={'$phi444.0': '$440get_iter.16'}, blockstack=(), active_try_block=None, outgoing_edgepushed={442: ('$440get_iter.16',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=442 nstack_initial=1):
AdaptBlockInfo(insts=((442, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={444: ('$phi442.0',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=444 nstack_initial=1):
AdaptBlockInfo(insts=((444, {'iterator': '$phi444.0', 'pair': '$444for_iter.1', 'indval': '$444for_iter.2', 'pred': '$444for_iter.3'}),), outgoing_phis={'$phi446.1': '$444for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={820: (), 446: ('$phi444.0', '$444for_iter.2')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=446 nstack_initial=2):
AdaptBlockInfo(insts=((446, {'value': '$phi446.1'}), (448, {'res': '$448load_global.2'}), (450, {'res': '$l_ds_rate450.3'}), (452, {'func': '$448load_global.2', 'args': ['$l_ds_rate450.3'], 'res': '$452call_function.4'}), (454, {'value': '$452call_function.4', 'res': '$454get_iter.5'})), outgoing_phis={'$phi456.1': '$454get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ('$phi446.0', '$454get_iter.5')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=456 nstack_initial=2):
AdaptBlockInfo(insts=((456, {'iterator': '$phi456.1', 'pair': '$456for_iter.2', 'indval': '$456for_iter.3', 'pred': '$456for_iter.4'}),), outgoing_phis={'$phi458.2': '$456for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={624: ('$phi456.0',), 458: ('$phi456.0', '$phi456.1', '$456for_iter.3')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=458 nstack_initial=3):
AdaptBlockInfo(insts=((458, {'value': '$phi458.2'}), (460, {'res': '$l_t460.3'}), (462, {'res': '$l_step_size462.4'}), (464, {'lhs': '$l_t460.3', 'rhs': '$l_step_size462.4', 'res': '$464inplace_add.5'}), (466, {'value': '$464inplace_add.5'}), (468, {'res': '$468load_deref.6'}), (470, {'res': '$l_noise470.7'}), (472, {'res': '$c_sigmas472.8'}), (474, {'res': '$l_param_set474.9'}), (476, {'res': '$c_RNG476.10'}), (478, {'func': '$468load_deref.6', 'args': ['$l_noise470.7', '$c_sigmas472.8', '$l_param_set474.9', '$c_RNG476.10'], 'res': '$478call_function.11'}), (482, {'res': '$c_filtercoefficients482.12'}), (484, {'res': '$j484.13'}), (486, {'index': '$j484.13', 'target': '$c_filtercoefficients482.12', 'res': '$486binary_subscr.14'}), (488, {'value': '$486binary_subscr.14'}), (490, {'res': '$490load_deref.15'}), (492, {'res': '$l_dxdt492.16'}), (494, {'res': '$s_state494.17'}), (496, {'res': '$tx496.18'}), (498, {'res': '$litstates498.19'}), (500, {'lhs': '$tx496.18', 'rhs': '$litstates498.19', 'res': '$500binary_multiply.20'}), (502, {'res': '$tx502.21'}), (504, {'res': '$litstates504.22'}), (506, {'lhs': '$tx502.21', 'rhs': '$litstates504.22', 'res': '$506binary_multiply.23'}), (508, {'res': '$const508.24'}), (510, {'lhs': '$506binary_multiply.23', 'rhs': '$const508.24', 'res': '$510binary_add.25'}), (512, {'start': '$500binary_multiply.20', 'stop': '$510binary_add.25', 'step': None, 'res': '$512build_slice.27', 'slicevar': '$512build_slice.26'}), (514, {'index': '$512build_slice.27', 'target': '$s_state494.17', 'res': '$514binary_subscr.28'}), (516, {'res': '$l_constants516.29'}), (518, {'res': '$l_t518.30'}), (520, {'func': '$490load_deref.15', 'args': ['$l_dxdt492.16', '$514binary_subscr.28', '$l_constants516.29', '$l_t518.30'], 'res': '$520call_function.31'}), (524, {'res': '$524load_global.32'}), (526, {'res': '$litstates526.33'}), (528, {'func': '$524load_global.32', 'args': ['$litstates526.33'], 'res': '$528call_function.34'}), (530, {'value': '$528call_function.34', 'res': '$530get_iter.35'})), outgoing_phis={'$phi532.2': '$530get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={532: ('$phi458.0', '$phi458.1', '$530get_iter.35')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=532 nstack_initial=3):
AdaptBlockInfo(insts=((532, {'iterator': '$phi532.2', 'pair': '$532for_iter.3', 'indval': '$532for_iter.4', 'pred': '$532for_iter.5'}),), outgoing_phis={'$phi534.3': '$532for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={620: ('$phi532.0', '$phi532.1'), 534: ('$phi532.0', '$phi532.1', '$phi532.2', '$532for_iter.4')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=534 nstack_initial=4):
AdaptBlockInfo(insts=((534, {'value': '$phi534.3'}), (536, {'res': '$s_state536.4'}), (538, {'res': '$tx538.5'}), (540, {'res': '$litstates540.6'}), (542, {'lhs': '$tx538.5', 'rhs': '$litstates540.6', 'res': '$542binary_multiply.7'}), (544, {'res': '$k544.8'}), (546, {'lhs': '$542binary_multiply.7', 'rhs': '$k544.8', 'res': '$546binary_add.9'}), (548, {'orig': ['$s_state536.4', '$546binary_add.9'], 'duped': ['$548dup_top_two.10', '$548dup_top_two.11']}), (550, {'index': '$548dup_top_two.11', 'target': '$548dup_top_two.10', 'res': '$550binary_subscr.12'}), (552, {'res': '$l_dxdt552.13'}), (554, {'res': '$k554.14'}), (556, {'index': '$k554.14', 'target': '$l_dxdt552.13', 'res': '$556binary_subscr.15'}), (558, {'res': '$l_step_size558.16'}), (560, {'lhs': '$556binary_subscr.15', 'rhs': '$l_step_size558.16', 'res': '$560binary_multiply.17'}), (562, {'res': '$l_noise562.18'}), (564, {'res': '$k564.19'}), (566, {'index': '$k564.19', 'target': '$l_noise562.18', 'res': '$566binary_subscr.20'}), (568, {'lhs': '$560binary_multiply.17', 'rhs': '$566binary_subscr.20', 'res': '$568binary_add.21'}), (570, {'lhs': '$550binary_subscr.12', 'rhs': '$568binary_add.21', 'res': '$570inplace_add.22'}), (574, {'target': '$s_state536.4', 'index': '$546binary_add.9', 'value': '$570inplace_add.22'}), (576, {'res': '$s_sums576.23'}), (578, {'res': '$tx578.24'}), (580, {'res': '$litstates580.25'}), (582, {'lhs': '$tx578.24', 'rhs': '$litstates580.25', 'res': '$582binary_multiply.26'}), (584, {'res': '$k584.27'}), (586, {'lhs': '$582binary_multiply.26', 'rhs': '$k584.27', 'res': '$586binary_add.28'}), (588, {'orig': ['$s_sums576.23', '$586binary_add.28'], 'duped': ['$588dup_top_two.29', '$588dup_top_two.30']}), (590, {'index': '$588dup_top_two.30', 'target': '$588dup_top_two.29', 'res': '$590binary_subscr.31'}), (592, {'res': '$s_state592.32'}), (594, {'res': '$tx594.33'}), (596, {'res': '$litstates596.34'}), (598, {'lhs': '$tx594.33', 'rhs': '$litstates596.34', 'res': '$598binary_multiply.35'}), (600, {'res': '$k600.36'}), (602, {'lhs': '$598binary_multiply.35', 'rhs': '$k600.36', 'res': '$602binary_add.37'}), (604, {'index': '$602binary_add.37', 'target': '$s_state592.32', 'res': '$604binary_subscr.38'}), (606, {'res': '$filtercoeff606.39'}), (608, {'lhs': '$604binary_subscr.38', 'rhs': '$filtercoeff606.39', 'res': '$608binary_multiply.40'}), (610, {'lhs': '$590binary_subscr.31', 'rhs': '$608binary_multiply.40', 'res': '$610inplace_add.41'}), (614, {'target': '$s_sums576.23', 'index': '$586binary_add.28', 'value': '$610inplace_add.41'}), (616, {}), (618, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={532: ('$phi534.0', '$phi534.1', '$phi534.2')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=620 nstack_initial=2):
AdaptBlockInfo(insts=((620, {}), (622, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ('$phi620.0', '$phi620.1')})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=624 nstack_initial=1):
AdaptBlockInfo(insts=((624, {'res': '$i624.1'}), (626, {'res': '$l_warmup626.2'}), (628, {'res': '$const628.3'}), (630, {'lhs': '$l_warmup626.2', 'rhs': '$const628.3', 'res': '$630binary_subtract.4'}), (632, {'lhs': '$i624.1', 'rhs': '$630binary_subtract.4', 'res': '$632compare_op.5'}), (634, {}), (636, {'pred': '$632compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={638: ('$phi624.0',), 788: ('$phi624.0',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=638 nstack_initial=1):
AdaptBlockInfo(insts=((638, {'res': '$s_sums638.1'}), (640, {'res': '$tx640.2'}), (642, {'res': '$litstates642.3'}), (644, {'lhs': '$tx640.2', 'rhs': '$litstates642.3', 'res': '$644binary_multiply.4'}), (646, {'res': '$const646.5'}), (648, {'lhs': '$644binary_multiply.4', 'rhs': '$const646.5', 'res': '$648binary_add.6'}), (650, {'index': '$648binary_add.6', 'target': '$s_sums638.1', 'res': '$650binary_subscr.7'}), (652, {'res': '$output652.8'}), (654, {'res': '$i654.9'}), (656, {'res': '$l_warmup656.10'}), (658, {'lhs': '$i654.9', 'rhs': '$l_warmup656.10', 'res': '$658binary_subtract.11'}), (660, {'res': '$l_param_set660.12'}), (662, {'res': '$const662.13'}), (664, {'items': ['$658binary_subtract.11', '$l_param_set660.12', '$const662.13'], 'res': '$664build_tuple.14'}), (666, {'target': '$output652.8', 'index': '$664build_tuple.14', 'value': '$650binary_subscr.7'}), (668, {'res': '$s_sums668.15'}), (670, {'res': '$tx670.16'}), (672, {'res': '$litstates672.17'}), (674, {'lhs': '$tx670.16', 'rhs': '$litstates672.17', 'res': '$674binary_multiply.18'}), (676, {'res': '$const676.19'}), (678, {'lhs': '$674binary_multiply.18', 'rhs': '$const676.19', 'res': '$678binary_add.20'}), (680, {'index': '$678binary_add.20', 'target': '$s_sums668.15', 'res': '$680binary_subscr.21'}), (682, {'res': '$output682.22'}), (684, {'res': '$i684.23'}), (686, {'res': '$l_warmup686.24'}), (688, {'lhs': '$i684.23', 'rhs': '$l_warmup686.24', 'res': '$688binary_subtract.25'}), (690, {'res': '$l_param_set690.26'}), (692, {'res': '$const692.27'}), (694, {'items': ['$688binary_subtract.25', '$l_param_set690.26', '$const692.27'], 'res': '$694build_tuple.28'}), (696, {'target': '$output682.22', 'index': '$694build_tuple.28', 'value': '$680binary_subscr.21'}), (698, {'res': '$s_sums698.29'}), (700, {'res': '$tx700.30'}), (702, {'res': '$litstates702.31'}), (704, {'lhs': '$tx700.30', 'rhs': '$litstates702.31', 'res': '$704binary_multiply.32'}), (706, {'res': '$const706.33'}), (708, {'lhs': '$704binary_multiply.32', 'rhs': '$const706.33', 'res': '$708binary_add.34'}), (710, {'index': '$708binary_add.34', 'target': '$s_sums698.29', 'res': '$710binary_subscr.35'}), (712, {'res': '$output712.36'}), (714, {'res': '$i714.37'}), (716, {'res': '$l_warmup716.38'}), (718, {'lhs': '$i714.37', 'rhs': '$l_warmup716.38', 'res': '$718binary_subtract.39'}), (720, {'res': '$l_param_set720.40'}), (722, {'res': '$const722.41'}), (724, {'items': ['$718binary_subtract.39', '$l_param_set720.40', '$const722.41'], 'res': '$724build_tuple.42'}), (726, {'target': '$output712.36', 'index': '$724build_tuple.42', 'value': '$710binary_subscr.35'}), (728, {'res': '$s_sums728.43'}), (730, {'res': '$tx730.44'}), (732, {'res': '$litstates732.45'}), (734, {'lhs': '$tx730.44', 'rhs': '$litstates732.45', 'res': '$734binary_multiply.46'}), (736, {'res': '$const736.47'}), (738, {'lhs': '$734binary_multiply.46', 'rhs': '$const736.47', 'res': '$738binary_add.48'}), (740, {'index': '$738binary_add.48', 'target': '$s_sums728.43', 'res': '$740binary_subscr.49'}), (742, {'res': '$output742.50'}), (744, {'res': '$i744.51'}), (746, {'res': '$l_warmup746.52'}), (748, {'lhs': '$i744.51', 'rhs': '$l_warmup746.52', 'res': '$748binary_subtract.53'}), (750, {'res': '$l_param_set750.54'}), (752, {'res': '$const752.55'}), (754, {'items': ['$748binary_subtract.53', '$l_param_set750.54', '$const752.55'], 'res': '$754build_tuple.56'}), (756, {'target': '$output742.50', 'index': '$754build_tuple.56', 'value': '$740binary_subscr.49'}), (758, {'res': '$s_sums758.57'}), (760, {'res': '$tx760.58'}), (762, {'res': '$litstates762.59'}), (764, {'lhs': '$tx760.58', 'rhs': '$litstates762.59', 'res': '$764binary_multiply.60'}), (766, {'res': '$const766.61'}), (768, {'lhs': '$764binary_multiply.60', 'rhs': '$const766.61', 'res': '$768binary_add.62'}), (770, {'index': '$768binary_add.62', 'target': '$s_sums758.57', 'res': '$770binary_subscr.63'}), (772, {'res': '$output772.64'}), (774, {'res': '$i774.65'}), (776, {'res': '$l_warmup776.66'}), (778, {'lhs': '$i774.65', 'rhs': '$l_warmup776.66', 'res': '$778binary_subtract.67'}), (780, {'res': '$l_param_set780.68'}), (782, {'res': '$const782.69'}), (784, {'items': ['$778binary_subtract.67', '$l_param_set780.68', '$const782.69'], 'res': '$784build_tuple.70'}), (786, {'target': '$output772.64', 'index': '$784build_tuple.70', 'value': '$770binary_subscr.63'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={788: ('$phi638.0',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=788 nstack_initial=1):
AdaptBlockInfo(insts=((788, {'res': '$788load_deref.1'}), (790, {'res': '$const790.2'}), (792, {'func': '$788load_deref.1', 'args': ['$const790.2'], 'res': '$792call_function.3'}), (794, {'res': '$s_sums794.4'}), (796, {'res': '$tx796.5'}), (798, {'res': '$litstates798.6'}), (800, {'lhs': '$tx796.5', 'rhs': '$litstates798.6', 'res': '$800binary_multiply.7'}), (802, {'res': '$tx802.8'}), (804, {'res': '$litstates804.9'}), (806, {'lhs': '$tx802.8', 'rhs': '$litstates804.9', 'res': '$806binary_multiply.10'}), (808, {'res': '$const808.11'}), (810, {'lhs': '$806binary_multiply.10', 'rhs': '$const808.11', 'res': '$810binary_add.12'}), (812, {'start': '$800binary_multiply.7', 'stop': '$810binary_add.12', 'step': None, 'res': '$812build_slice.14', 'slicevar': '$812build_slice.13'}), (814, {'target': '$s_sums794.4', 'index': '$812build_slice.14', 'value': '$792call_function.3'}), (816, {}), (818, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={442: ('$phi788.0',)})
07/23/2024 06:57:04 PM - DEBUG - block_infos State(pc_initial=820 nstack_initial=0):
AdaptBlockInfo(insts=((820, {'res': '$const820.0'}), (822, {'retval': '$const820.0', 'castval': '$822return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:04 PM - DEBUG - label 0:
    xblocksize = arg(0, name=xblocksize)     ['xblocksize']
    output = arg(1, name=output)             ['output']
    grid_values = arg(2, name=grid_values)   ['grid_values']
    grid_indices = arg(3, name=grid_indices) ['grid_indices']
    constants = arg(4, name=constants)       ['constants']
    inits = arg(5, name=inits)               ['inits']
    step_size = arg(6, name=step_size)       ['step_size']
    duration = arg(7, name=duration)         ['duration']
    output_fs = arg(8, name=output_fs)       ['output_fs']
    filtercoeffs = arg(9, name=filtercoeffs) ['filtercoeffs']
    RNG = arg(10, name=RNG)                  ['RNG']
    noise_sigmas = arg(11, name=noise_sigmas) ['noise_sigmas']
    warmup_time = arg(12, name=warmup_time)  ['warmup_time']
    $2load_global.0 = global(int16: int16)   ['$2load_global.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=threadIdx) ['$4load_global.1', '$6load_attr.2']
    $8load_attr.3 = getattr(value=$6load_attr.2, attr=x) ['$6load_attr.2', '$8load_attr.3']
    tx = call $2load_global.0($8load_attr.3, func=$2load_global.0, args=[Var($8load_attr.3, Euler_maruyama_solver.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8load_attr.3', 'tx']
    $14load_global.5 = global(int32: int32)  ['$14load_global.5']
    $16load_global.6 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$16load_global.6']
    $18load_attr.7 = getattr(value=$16load_global.6, attr=blockIdx) ['$16load_global.6', '$18load_attr.7']
    $20load_attr.8 = getattr(value=$18load_attr.7, attr=x) ['$18load_attr.7', '$20load_attr.8']
    block_index = call $14load_global.5($20load_attr.8, func=$14load_global.5, args=[Var($20load_attr.8, Euler_maruyama_solver.py:87)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_global.5', '$20load_attr.8', 'block_index']
    $26load_global.10 = global(int32: int32) ['$26load_global.10']
    $32binary_multiply.13 = xblocksize * block_index ['$32binary_multiply.13', 'block_index', 'xblocksize']
    $36binary_add.15 = $32binary_multiply.13 + tx ['$32binary_multiply.13', '$36binary_add.15', 'tx']
    l_param_set = call $26load_global.10($36binary_add.15, func=$26load_global.10, args=[Var($36binary_add.15, Euler_maruyama_solver.py:88)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.10', '$36binary_add.15', 'l_param_set']
    $44load_global.18 = global(len: <built-in function len>) ['$44load_global.18']
    $48call_function.20 = call $44load_global.18(grid_values, func=$44load_global.18, args=[Var(grid_values, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_global.18', '$48call_function.20', 'grid_values']
    $50compare_op.21 = l_param_set >= $48call_function.20 ['$48call_function.20', '$50compare_op.21', 'l_param_set']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.21, func=bool52, args=(Var($50compare_op.21, Euler_maruyama_solver.py:92),), kws=(), vararg=None, varkwarg=None, target=None) ['$50compare_op.21', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']
label 58:
    $58load_deref.0 = freevar(precision: float64) ['$58load_deref.0']
    l_step_size = call $58load_deref.0(step_size, func=$58load_deref.0, args=[Var(step_size, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_deref.0', 'l_step_size', 'step_size']
    $66load_global.3 = global(int32: int32)  ['$66load_global.3']
    $68load_global.4 = global(round: <built-in function round>) ['$68load_global.4']
    $const70.5 = const(int, 1)               ['$const70.5']
    $76binary_multiply.8 = output_fs * l_step_size ['$76binary_multiply.8', 'l_step_size', 'output_fs']
    $78binary_true_divide.9 = $const70.5 / $76binary_multiply.8 ['$76binary_multiply.8', '$78binary_true_divide.9', '$const70.5']
    $80call_function.10 = call $68load_global.4($78binary_true_divide.9, func=$68load_global.4, args=[Var($78binary_true_divide.9, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.4', '$78binary_true_divide.9', '$80call_function.10']
    l_ds_rate = call $66load_global.3($80call_function.10, func=$66load_global.3, args=[Var($80call_function.10, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.3', '$80call_function.10', 'l_ds_rate']
    $86load_global.12 = global(int32: int32) ['$86load_global.12']
    $88load_global.13 = global(round: <built-in function round>) ['$88load_global.13']
    $94binary_true_divide.16 = duration / l_step_size ['$94binary_true_divide.16', 'duration', 'l_step_size']
    $98binary_true_divide.18 = $94binary_true_divide.16 / l_ds_rate ['$94binary_true_divide.16', '$98binary_true_divide.18', 'l_ds_rate']
    $100call_function.19 = call $88load_global.13($98binary_true_divide.18, func=$88load_global.13, args=[Var($98binary_true_divide.18, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call_function.19', '$88load_global.13', '$98binary_true_divide.18']
    l_n_outer = call $86load_global.12($100call_function.19, func=$86load_global.12, args=[Var($100call_function.19, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call_function.19', '$86load_global.12', 'l_n_outer']
    $106load_global.21 = global(int32: int32) ['$106load_global.21']
    $112binary_multiply.24 = warmup_time * output_fs ['$112binary_multiply.24', 'output_fs', 'warmup_time']
    l_warmup = call $106load_global.21($112binary_multiply.24, func=$106load_global.21, args=[Var($112binary_multiply.24, Euler_maruyama_solver.py:98)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_global.21', '$112binary_multiply.24', 'l_warmup']
    $118load_global.26 = global(literally: <function literally at 0x000001EDFFCF38B0>) ['$118load_global.26']
    $120load_global.27 = global(zero: 0)     ['$120load_global.27']
    litzero = call $118load_global.26($120load_global.27, func=$118load_global.26, args=[Var($120load_global.27, Euler_maruyama_solver.py:100)], kws=(), vararg=None, varkwarg=None, target=None) ['$118load_global.26', '$120load_global.27', 'litzero']
    $126load_global.29 = global(literally: <function literally at 0x000001EDFFCF38B0>) ['$126load_global.29']
    $128load_global.30 = global(nstates: 5)  ['$128load_global.30']
    litstates = call $126load_global.29($128load_global.30, func=$126load_global.29, args=[Var($128load_global.30, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None) ['$126load_global.29', '$128load_global.30', 'litstates']
    $134load_global.32 = global(literally: <function literally at 0x000001EDFFCF38B0>) ['$134load_global.32']
    $136load_global.33 = global(constants_length: 14) ['$136load_global.33']
    litconstantslength = call $134load_global.32($136load_global.33, func=$134load_global.32, args=[Var($136load_global.33, Euler_maruyama_solver.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.32', '$136load_global.33', 'litconstantslength']
    $142load_global.35 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$142load_global.35']
    $144load_attr.36 = getattr(value=$142load_global.35, attr=shared) ['$142load_global.35', '$144load_attr.36']
    $146load_attr.37 = getattr(value=$144load_attr.36, attr=array) ['$144load_attr.36', '$146load_attr.37']
    $150load_deref.39 = freevar(precision: float64) ['$150load_deref.39']
    dynamic_mem = call $146load_attr.37(litzero, func=$146load_attr.37, args=[Var(litzero, Euler_maruyama_solver.py:100)], kws=[('dtype', Var($150load_deref.39, Euler_maruyama_solver.py:105))], vararg=None, varkwarg=None, target=None) ['$146load_attr.37', '$150load_deref.39', 'dynamic_mem', 'litzero']
    $const160.43 = const(NoneType, None)     ['$const160.43']
    $164load_global.45 = global(nstates: 5)  ['$164load_global.45']
    $166binary_multiply.46 = xblocksize * $164load_global.45 ['$164load_global.45', '$166binary_multiply.46', 'xblocksize']
    $168build_slice.47 = global(slice: <class 'slice'>) ['$168build_slice.47']
    $168build_slice.48 = call $168build_slice.47($const160.43, $166binary_multiply.46, func=$168build_slice.47, args=(Var($const160.43, Euler_maruyama_solver.py:106), Var($166binary_multiply.46, Euler_maruyama_solver.py:106)), kws=(), vararg=None, varkwarg=None, target=None) ['$166binary_multiply.46', '$168build_slice.47', '$168build_slice.48', '$const160.43']
    s_sums = getitem(value=dynamic_mem, index=$168build_slice.48, fn=<built-in function getitem>) ['$168build_slice.48', 'dynamic_mem', 's_sums']
    $178load_global.52 = global(nstates: 5)  ['$178load_global.52']
    $180binary_multiply.53 = xblocksize * $178load_global.52 ['$178load_global.52', '$180binary_multiply.53', 'xblocksize']
    $const182.54 = const(int, 2)             ['$const182.54']
    $186binary_multiply.56 = $const182.54 * xblocksize ['$186binary_multiply.56', '$const182.54', 'xblocksize']
    $188load_global.57 = global(nstates: 5)  ['$188load_global.57']
    $190binary_multiply.58 = $186binary_multiply.56 * $188load_global.57 ['$186binary_multiply.56', '$188load_global.57', '$190binary_multiply.58']
    $192build_slice.59 = global(slice: <class 'slice'>) ['$192build_slice.59']
    $192build_slice.60 = call $192build_slice.59($180binary_multiply.53, $190binary_multiply.58, func=$192build_slice.59, args=(Var($180binary_multiply.53, Euler_maruyama_solver.py:107), Var($190binary_multiply.58, Euler_maruyama_solver.py:107)), kws=(), vararg=None, varkwarg=None, target=None) ['$180binary_multiply.53', '$190binary_multiply.58', '$192build_slice.59', '$192build_slice.60']
    s_state = getitem(value=dynamic_mem, index=$192build_slice.60, fn=<built-in function getitem>) ['$192build_slice.60', 'dynamic_mem', 's_state']
    $198load_global.62 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$198load_global.62']
    $200load_attr.63 = getattr(value=$198load_global.62, attr=local) ['$198load_global.62', '$200load_attr.63']
    $202load_attr.64 = getattr(value=$200load_attr.63, attr=array) ['$200load_attr.63', '$202load_attr.64']
    $206load_deref.66 = freevar(precision: float64) ['$206load_deref.66']
    l_dxdt = call $202load_attr.64(func=$202load_attr.64, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($206load_deref.66, Euler_maruyama_solver.py:112))], vararg=None, varkwarg=None, target=None) ['$202load_attr.64', '$206load_deref.66', 'l_dxdt', 'litstates']
    $214load_global.69 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$214load_global.69']
    $216load_attr.70 = getattr(value=$214load_global.69, attr=local) ['$214load_global.69', '$216load_attr.70']
    $218load_attr.71 = getattr(value=$216load_attr.70, attr=array) ['$216load_attr.70', '$218load_attr.71']
    $222load_deref.73 = freevar(precision: float64) ['$222load_deref.73']
    l_noise = call $218load_attr.71(func=$218load_attr.71, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($222load_deref.73, Euler_maruyama_solver.py:116))], vararg=None, varkwarg=None, target=None) ['$218load_attr.71', '$222load_deref.73', 'l_noise', 'litstates']
    $230load_global.76 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$230load_global.76']
    $232load_attr.77 = getattr(value=$230load_global.76, attr=local) ['$230load_global.76', '$232load_attr.77']
    $234load_attr.78 = getattr(value=$232load_attr.77, attr=array) ['$232load_attr.77', '$234load_attr.78']
    $238load_deref.80 = freevar(precision: float64) ['$238load_deref.80']
    l_constants = call $234load_attr.78(func=$234load_attr.78, args=[], kws=[('shape', Var(litconstantslength, Euler_maruyama_solver.py:102)), ('dtype', Var($238load_deref.80, Euler_maruyama_solver.py:120))], vararg=None, varkwarg=None, target=None) ['$234load_attr.78', '$238load_deref.80', 'l_constants', 'litconstantslength']
    $246load_global.83 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$246load_global.83']
    $248load_attr.84 = getattr(value=$246load_global.83, attr=const) ['$246load_global.83', '$248load_attr.84']
    $250load_method.85 = getattr(value=$248load_attr.84, attr=array_like) ['$248load_attr.84', '$250load_method.85']
    c_sigmas = call $250load_method.85(noise_sigmas, func=$250load_method.85, args=[Var(noise_sigmas, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None) ['$250load_method.85', 'c_sigmas', 'noise_sigmas']
    $258load_global.88 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$258load_global.88']
    $260load_attr.89 = getattr(value=$258load_global.88, attr=const) ['$258load_global.88', '$260load_attr.89']
    $262load_method.90 = getattr(value=$260load_attr.89, attr=array_like) ['$260load_attr.89', '$262load_method.90']
    c_RNG = call $262load_method.90(RNG, func=$262load_method.90, args=[Var(RNG, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None) ['$262load_method.90', 'RNG', 'c_RNG']
    $270load_global.93 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$270load_global.93']
    $272load_attr.94 = getattr(value=$270load_global.93, attr=const) ['$270load_global.93', '$272load_attr.94']
    $274load_method.95 = getattr(value=$272load_attr.94, attr=array_like) ['$272load_attr.94', '$274load_method.95']
    c_filtercoefficients = call $274load_method.95(filtercoeffs, func=$274load_method.95, args=[Var(filtercoeffs, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None) ['$274load_method.95', 'c_filtercoefficients', 'filtercoeffs']
    $282load_global.98 = global(range: <class 'range'>) ['$282load_global.98']
    $284load_global.99 = global(len: <built-in function len>) ['$284load_global.99']
    $288call_function.101 = call $284load_global.99(constants, func=$284load_global.99, args=[Var(constants, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None) ['$284load_global.99', '$288call_function.101', 'constants']
    $290call_function.102 = call $282load_global.98($288call_function.101, func=$282load_global.98, args=[Var($288call_function.101, Euler_maruyama_solver.py:125)], kws=(), vararg=None, varkwarg=None, target=None) ['$282load_global.98', '$288call_function.101', '$290call_function.102']
    $292get_iter.103 = getiter(value=$290call_function.102) ['$290call_function.102', '$292get_iter.103']
    $phi294.0 = $292get_iter.103             ['$292get_iter.103', '$phi294.0']
    jump 294                                 []
label 294:
    $294for_iter.1 = iternext(value=$phi294.0) ['$294for_iter.1', '$phi294.0']
    $294for_iter.2 = pair_first(value=$294for_iter.1) ['$294for_iter.1', '$294for_iter.2']
    $294for_iter.3 = pair_second(value=$294for_iter.1) ['$294for_iter.1', '$294for_iter.3']
    $phi296.1 = $294for_iter.2               ['$294for_iter.2', '$phi296.1']
    branch $294for_iter.3, 296, 314          ['$294for_iter.3']
label 296:
    i = $phi296.1                            ['$phi296.1', 'i']
    $302binary_subscr.4 = getitem(value=constants, index=i, fn=<built-in function getitem>) ['$302binary_subscr.4', 'constants', 'i']
    l_constants[i] = $302binary_subscr.4     ['$302binary_subscr.4', 'i', 'l_constants']
    jump 294                                 []
label 314:
    $314load_global.0 = global(enumerate: <class 'enumerate'>) ['$314load_global.0']
    $318call_function.2 = call $314load_global.0(grid_indices, func=$314load_global.0, args=[Var(grid_indices, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None) ['$314load_global.0', '$318call_function.2', 'grid_indices']
    $320get_iter.3 = getiter(value=$318call_function.2) ['$318call_function.2', '$320get_iter.3']
    $phi322.0 = $320get_iter.3               ['$320get_iter.3', '$phi322.0']
    jump 322                                 []
label 322:
    $322for_iter.1 = iternext(value=$phi322.0) ['$322for_iter.1', '$phi322.0']
    $322for_iter.2 = pair_first(value=$322for_iter.1) ['$322for_iter.1', '$322for_iter.2']
    $322for_iter.3 = pair_second(value=$322for_iter.1) ['$322for_iter.1', '$322for_iter.3']
    $phi324.1 = $322for_iter.2               ['$322for_iter.2', '$phi324.1']
    branch $322for_iter.3, 324, 350          ['$322for_iter.3']
label 324:
    $324unpack_sequence.4 = exhaust_iter(value=$phi324.1, count=2) ['$324unpack_sequence.4', '$phi324.1']
    $324unpack_sequence.2 = static_getitem(value=$324unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$324unpack_sequence.2', '$324unpack_sequence.4']
    $324unpack_sequence.3 = static_getitem(value=$324unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$324unpack_sequence.3', '$324unpack_sequence.4']
    i = $324unpack_sequence.2                ['$324unpack_sequence.2', 'i']
    index = $324unpack_sequence.3            ['$324unpack_sequence.3', 'index']
    $336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i, Euler_maruyama_solver.py:125)]) ['$336build_tuple.8', 'i', 'l_param_set']
    $338binary_subscr.9 = getitem(value=grid_values, index=$336build_tuple.8, fn=<built-in function getitem>) ['$336build_tuple.8', '$338binary_subscr.9', 'grid_values']
    l_constants[index] = $338binary_subscr.9 ['$338binary_subscr.9', 'index', 'l_constants']
    jump 322                                 []
label 350:
    $350load_global.0 = global(range: <class 'range'>) ['$350load_global.0']
    $352load_global.1 = global(nstates: 5)   ['$352load_global.1']
    $354call_function.2 = call $350load_global.0($352load_global.1, func=$350load_global.0, args=[Var($352load_global.1, Euler_maruyama_solver.py:132)], kws=(), vararg=None, varkwarg=None, target=None) ['$350load_global.0', '$352load_global.1', '$354call_function.2']
    $356get_iter.3 = getiter(value=$354call_function.2) ['$354call_function.2', '$356get_iter.3']
    $phi358.0 = $356get_iter.3               ['$356get_iter.3', '$phi358.0']
    jump 358                                 []
label 358:
    $358for_iter.1 = iternext(value=$phi358.0) ['$358for_iter.1', '$phi358.0']
    $358for_iter.2 = pair_first(value=$358for_iter.1) ['$358for_iter.1', '$358for_iter.2']
    $358for_iter.3 = pair_second(value=$358for_iter.1) ['$358for_iter.1', '$358for_iter.3']
    $phi360.1 = $358for_iter.2               ['$358for_iter.2', '$phi360.1']
    branch $358for_iter.3, 360, 406          ['$358for_iter.3']
label 360:
    i = $phi360.1                            ['$phi360.1', 'i']
    $366binary_subscr.4 = getitem(value=inits, index=i, fn=<built-in function getitem>) ['$366binary_subscr.4', 'i', 'inits']
    $372load_global.7 = global(nstates: 5)   ['$372load_global.7']
    $374binary_multiply.8 = tx * $372load_global.7 ['$372load_global.7', '$374binary_multiply.8', 'tx']
    $378binary_add.10 = $374binary_multiply.8 + i ['$374binary_multiply.8', '$378binary_add.10', 'i']
    s_state[$378binary_add.10] = $366binary_subscr.4 ['$366binary_subscr.4', '$378binary_add.10', 's_state']
    $382load_deref.11 = freevar(precision: float64) ['$382load_deref.11']
    $const384.12 = const(float, 0.0)         ['$const384.12']
    $386call_function.13 = call $382load_deref.11($const384.12, func=$382load_deref.11, args=[Var($const384.12, Euler_maruyama_solver.py:134)], kws=(), vararg=None, varkwarg=None, target=None) ['$382load_deref.11', '$386call_function.13', '$const384.12']
    $392load_global.16 = global(nstates: 5)  ['$392load_global.16']
    $394binary_multiply.17 = tx * $392load_global.16 ['$392load_global.16', '$394binary_multiply.17', 'tx']
    $398binary_add.19 = $394binary_multiply.17 + i ['$394binary_multiply.17', '$398binary_add.19', 'i']
    s_sums[$398binary_add.19] = $386call_function.13 ['$386call_function.13', '$398binary_add.19', 's_sums']
    jump 358                                 []
label 406:
    $406load_deref.0 = freevar(precision: float64) ['$406load_deref.0']
    $const408.1 = const(float, 0.0)          ['$const408.1']
    $410call_function.2 = call $406load_deref.0($const408.1, func=$406load_deref.0, args=[Var($const408.1, Euler_maruyama_solver.py:136)], kws=(), vararg=None, varkwarg=None, target=None) ['$406load_deref.0', '$410call_function.2', '$const408.1']
    $const414.4 = const(NoneType, None)      ['$const414.4']
    $const416.5 = const(NoneType, None)      ['$const416.5']
    $418build_slice.6 = global(slice: <class 'slice'>) ['$418build_slice.6']
    $418build_slice.7 = call $418build_slice.6($const414.4, $const416.5, func=$418build_slice.6, args=(Var($const414.4, Euler_maruyama_solver.py:136), Var($const416.5, Euler_maruyama_solver.py:136)), kws=(), vararg=None, varkwarg=None, target=None) ['$418build_slice.6', '$418build_slice.7', '$const414.4', '$const416.5']
    l_dxdt[$418build_slice.7] = $410call_function.2 ['$410call_function.2', '$418build_slice.7', 'l_dxdt']
    $422load_deref.8 = freevar(precision: float64) ['$422load_deref.8']
    $const424.9 = const(float, 0.0)          ['$const424.9']
    l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None) ['$422load_deref.8', '$const424.9', 'l_t']
    $430load_global.11 = global(range: <class 'range'>) ['$430load_global.11']
    $436binary_add.14 = l_n_outer + l_warmup ['$436binary_add.14', 'l_n_outer', 'l_warmup']
    $438call_function.15 = call $430load_global.11($436binary_add.14, func=$430load_global.11, args=[Var($436binary_add.14, Euler_maruyama_solver.py:140)], kws=(), vararg=None, varkwarg=None, target=None) ['$430load_global.11', '$436binary_add.14', '$438call_function.15']
    $440get_iter.16 = getiter(value=$438call_function.15) ['$438call_function.15', '$440get_iter.16']
    $phi444.0 = $440get_iter.16              ['$440get_iter.16', '$phi444.0']
    jump 442                                 []
label 442:
    jump 444                                 []
label 444:
    $444for_iter.1 = iternext(value=$phi444.0) ['$444for_iter.1', '$phi444.0']
    $444for_iter.2 = pair_first(value=$444for_iter.1) ['$444for_iter.1', '$444for_iter.2']
    $444for_iter.3 = pair_second(value=$444for_iter.1) ['$444for_iter.1', '$444for_iter.3']
    $phi446.1 = $444for_iter.2               ['$444for_iter.2', '$phi446.1']
    branch $444for_iter.3, 446, 820          ['$444for_iter.3']
label 446:
    i = $phi446.1                            ['$phi446.1', 'i']
    $448load_global.2 = global(range: <class 'range'>) ['$448load_global.2']
    $452call_function.4 = call $448load_global.2(l_ds_rate, func=$448load_global.2, args=[Var(l_ds_rate, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$448load_global.2', '$452call_function.4', 'l_ds_rate']
    $454get_iter.5 = getiter(value=$452call_function.4) ['$452call_function.4', '$454get_iter.5']
    $phi456.1 = $454get_iter.5               ['$454get_iter.5', '$phi456.1']
    jump 456                                 []
label 456:
    $456for_iter.2 = iternext(value=$phi456.1) ['$456for_iter.2', '$phi456.1']
    $456for_iter.3 = pair_first(value=$456for_iter.2) ['$456for_iter.2', '$456for_iter.3']
    $456for_iter.4 = pair_second(value=$456for_iter.2) ['$456for_iter.2', '$456for_iter.4']
    $phi458.2 = $456for_iter.3               ['$456for_iter.3', '$phi458.2']
    branch $456for_iter.4, 458, 624          ['$456for_iter.4']
label 458:
    j = $phi458.2                            ['$phi458.2', 'j']
    $464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined) ['$464inplace_add.5', 'l_step_size', 'l_t']
    l_t = $464inplace_add.5                  ['$464inplace_add.5', 'l_t']
    $468load_deref.6 = freevar(get_noise: CUDADispatcher(<function get_noise_64 at 0x000001EE06FAE8B0>)) ['$468load_deref.6']
    $478call_function.11 = call $468load_deref.6(l_noise, c_sigmas, l_param_set, c_RNG, func=$468load_deref.6, args=[Var(l_noise, Euler_maruyama_solver.py:114), Var(c_sigmas, Euler_maruyama_solver.py:122), Var(l_param_set, Euler_maruyama_solver.py:88), Var(c_RNG, Euler_maruyama_solver.py:123)], kws=(), vararg=None, varkwarg=None, target=None) ['$468load_deref.6', '$478call_function.11', 'c_RNG', 'c_sigmas', 'l_noise', 'l_param_set']
    filtercoeff = getitem(value=c_filtercoefficients, index=j, fn=<built-in function getitem>) ['c_filtercoefficients', 'filtercoeff', 'j']
    $490load_deref.15 = freevar(dxdtfunc: CUDADispatcher(<function diffeq_system.__init__.<locals>.dxdtfunc at 0x000001EE089EE430>)) ['$490load_deref.15']
    $500binary_multiply.20 = tx * litstates  ['$500binary_multiply.20', 'litstates', 'tx']
    $506binary_multiply.23 = tx * litstates  ['$506binary_multiply.23', 'litstates', 'tx']
    $const508.24 = const(int, 5)             ['$const508.24']
    $510binary_add.25 = $506binary_multiply.23 + $const508.24 ['$506binary_multiply.23', '$510binary_add.25', '$const508.24']
    $512build_slice.26 = global(slice: <class 'slice'>) ['$512build_slice.26']
    $512build_slice.27 = call $512build_slice.26($500binary_multiply.20, $510binary_add.25, func=$512build_slice.26, args=(Var($500binary_multiply.20, Euler_maruyama_solver.py:157), Var($510binary_add.25, Euler_maruyama_solver.py:157)), kws=(), vararg=None, varkwarg=None, target=None) ['$500binary_multiply.20', '$510binary_add.25', '$512build_slice.26', '$512build_slice.27']
    $514binary_subscr.28 = getitem(value=s_state, index=$512build_slice.27, fn=<built-in function getitem>) ['$512build_slice.27', '$514binary_subscr.28', 's_state']
    $520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None) ['$490load_deref.15', '$514binary_subscr.28', '$520call_function.31', 'l_constants', 'l_dxdt', 'l_t']
    $524load_global.32 = global(range: <class 'range'>) ['$524load_global.32']
    $528call_function.34 = call $524load_global.32(litstates, func=$524load_global.32, args=[Var(litstates, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None) ['$524load_global.32', '$528call_function.34', 'litstates']
    $530get_iter.35 = getiter(value=$528call_function.34) ['$528call_function.34', '$530get_iter.35']
    $phi532.2 = $530get_iter.35              ['$530get_iter.35', '$phi532.2']
    jump 532                                 []
label 532:
    $532for_iter.3 = iternext(value=$phi532.2) ['$532for_iter.3', '$phi532.2']
    $532for_iter.4 = pair_first(value=$532for_iter.3) ['$532for_iter.3', '$532for_iter.4']
    $532for_iter.5 = pair_second(value=$532for_iter.3) ['$532for_iter.3', '$532for_iter.5']
    $phi534.3 = $532for_iter.4               ['$532for_iter.4', '$phi534.3']
    branch $532for_iter.5, 534, 620          ['$532for_iter.5']
label 534:
    k = $phi534.3                            ['$phi534.3', 'k']
    $542binary_multiply.7 = tx * litstates   ['$542binary_multiply.7', 'litstates', 'tx']
    $546binary_add.9 = $542binary_multiply.7 + k ['$542binary_multiply.7', '$546binary_add.9', 'k']
    $550binary_subscr.12 = getitem(value=s_state, index=$546binary_add.9, fn=<built-in function getitem>) ['$546binary_add.9', '$550binary_subscr.12', 's_state']
    $556binary_subscr.15 = getitem(value=l_dxdt, index=k, fn=<built-in function getitem>) ['$556binary_subscr.15', 'k', 'l_dxdt']
    $560binary_multiply.17 = $556binary_subscr.15 * l_step_size ['$556binary_subscr.15', '$560binary_multiply.17', 'l_step_size']
    $566binary_subscr.20 = getitem(value=l_noise, index=k, fn=<built-in function getitem>) ['$566binary_subscr.20', 'k', 'l_noise']
    $568binary_add.21 = $560binary_multiply.17 + $566binary_subscr.20 ['$560binary_multiply.17', '$566binary_subscr.20', '$568binary_add.21']
    $570inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$550binary_subscr.12, rhs=$568binary_add.21, static_lhs=Undefined, static_rhs=Undefined) ['$550binary_subscr.12', '$568binary_add.21', '$570inplace_add.22']
    s_state[$546binary_add.9] = $570inplace_add.22 ['$546binary_add.9', '$570inplace_add.22', 's_state']
    $582binary_multiply.26 = tx * litstates  ['$582binary_multiply.26', 'litstates', 'tx']
    $586binary_add.28 = $582binary_multiply.26 + k ['$582binary_multiply.26', '$586binary_add.28', 'k']
    $590binary_subscr.31 = getitem(value=s_sums, index=$586binary_add.28, fn=<built-in function getitem>) ['$586binary_add.28', '$590binary_subscr.31', 's_sums']
    $598binary_multiply.35 = tx * litstates  ['$598binary_multiply.35', 'litstates', 'tx']
    $602binary_add.37 = $598binary_multiply.35 + k ['$598binary_multiply.35', '$602binary_add.37', 'k']
    $604binary_subscr.38 = getitem(value=s_state, index=$602binary_add.37, fn=<built-in function getitem>) ['$602binary_add.37', '$604binary_subscr.38', 's_state']
    $608binary_multiply.40 = $604binary_subscr.38 * filtercoeff ['$604binary_subscr.38', '$608binary_multiply.40', 'filtercoeff']
    $610inplace_add.41 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$590binary_subscr.31, rhs=$608binary_multiply.40, static_lhs=Undefined, static_rhs=Undefined) ['$590binary_subscr.31', '$608binary_multiply.40', '$610inplace_add.41']
    s_sums[$586binary_add.28] = $610inplace_add.41 ['$586binary_add.28', '$610inplace_add.41', 's_sums']
    jump 532                                 []
label 620:
    jump 456                                 []
label 624:
    $const628.3 = const(int, 1)              ['$const628.3']
    $630binary_subtract.4 = l_warmup - $const628.3 ['$630binary_subtract.4', '$const628.3', 'l_warmup']
    $632compare_op.5 = i > $630binary_subtract.4 ['$630binary_subtract.4', '$632compare_op.5', 'i']
    bool636 = global(bool: <class 'bool'>)   ['bool636']
    $636pred = call bool636($632compare_op.5, func=bool636, args=(Var($632compare_op.5, Euler_maruyama_solver.py:168),), kws=(), vararg=None, varkwarg=None, target=None) ['$632compare_op.5', '$636pred', 'bool636']
    branch $636pred, 638, 788                ['$636pred']
label 638:
    $644binary_multiply.4 = tx * litstates   ['$644binary_multiply.4', 'litstates', 'tx']
    $const646.5 = const(int, 0)              ['$const646.5']
    $648binary_add.6 = $644binary_multiply.4 + $const646.5 ['$644binary_multiply.4', '$648binary_add.6', '$const646.5']
    $650binary_subscr.7 = getitem(value=s_sums, index=$648binary_add.6, fn=<built-in function getitem>) ['$648binary_add.6', '$650binary_subscr.7', 's_sums']
    $658binary_subtract.11 = i - l_warmup    ['$658binary_subtract.11', 'i', 'l_warmup']
    $const662.13 = const(int, 0)             ['$const662.13']
    $664build_tuple.14 = build_tuple(items=[Var($658binary_subtract.11, Euler_maruyama_solver.py:171), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const662.13, Euler_maruyama_solver.py:171)]) ['$658binary_subtract.11', '$664build_tuple.14', '$const662.13', 'l_param_set']
    output[$664build_tuple.14] = $650binary_subscr.7 ['$650binary_subscr.7', '$664build_tuple.14', 'output']
    $674binary_multiply.18 = tx * litstates  ['$674binary_multiply.18', 'litstates', 'tx']
    $const676.19 = const(int, 1)             ['$const676.19']
    $678binary_add.20 = $674binary_multiply.18 + $const676.19 ['$674binary_multiply.18', '$678binary_add.20', '$const676.19']
    $680binary_subscr.21 = getitem(value=s_sums, index=$678binary_add.20, fn=<built-in function getitem>) ['$678binary_add.20', '$680binary_subscr.21', 's_sums']
    $688binary_subtract.25 = i - l_warmup    ['$688binary_subtract.25', 'i', 'l_warmup']
    $const692.27 = const(int, 1)             ['$const692.27']
    $694build_tuple.28 = build_tuple(items=[Var($688binary_subtract.25, Euler_maruyama_solver.py:172), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const692.27, Euler_maruyama_solver.py:172)]) ['$688binary_subtract.25', '$694build_tuple.28', '$const692.27', 'l_param_set']
    output[$694build_tuple.28] = $680binary_subscr.21 ['$680binary_subscr.21', '$694build_tuple.28', 'output']
    $704binary_multiply.32 = tx * litstates  ['$704binary_multiply.32', 'litstates', 'tx']
    $const706.33 = const(int, 2)             ['$const706.33']
    $708binary_add.34 = $704binary_multiply.32 + $const706.33 ['$704binary_multiply.32', '$708binary_add.34', '$const706.33']
    $710binary_subscr.35 = getitem(value=s_sums, index=$708binary_add.34, fn=<built-in function getitem>) ['$708binary_add.34', '$710binary_subscr.35', 's_sums']
    $718binary_subtract.39 = i - l_warmup    ['$718binary_subtract.39', 'i', 'l_warmup']
    $const722.41 = const(int, 2)             ['$const722.41']
    $724build_tuple.42 = build_tuple(items=[Var($718binary_subtract.39, Euler_maruyama_solver.py:173), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const722.41, Euler_maruyama_solver.py:173)]) ['$718binary_subtract.39', '$724build_tuple.42', '$const722.41', 'l_param_set']
    output[$724build_tuple.42] = $710binary_subscr.35 ['$710binary_subscr.35', '$724build_tuple.42', 'output']
    $734binary_multiply.46 = tx * litstates  ['$734binary_multiply.46', 'litstates', 'tx']
    $const736.47 = const(int, 3)             ['$const736.47']
    $738binary_add.48 = $734binary_multiply.46 + $const736.47 ['$734binary_multiply.46', '$738binary_add.48', '$const736.47']
    $740binary_subscr.49 = getitem(value=s_sums, index=$738binary_add.48, fn=<built-in function getitem>) ['$738binary_add.48', '$740binary_subscr.49', 's_sums']
    $748binary_subtract.53 = i - l_warmup    ['$748binary_subtract.53', 'i', 'l_warmup']
    $const752.55 = const(int, 3)             ['$const752.55']
    $754build_tuple.56 = build_tuple(items=[Var($748binary_subtract.53, Euler_maruyama_solver.py:174), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const752.55, Euler_maruyama_solver.py:174)]) ['$748binary_subtract.53', '$754build_tuple.56', '$const752.55', 'l_param_set']
    output[$754build_tuple.56] = $740binary_subscr.49 ['$740binary_subscr.49', '$754build_tuple.56', 'output']
    $764binary_multiply.60 = tx * litstates  ['$764binary_multiply.60', 'litstates', 'tx']
    $const766.61 = const(int, 4)             ['$const766.61']
    $768binary_add.62 = $764binary_multiply.60 + $const766.61 ['$764binary_multiply.60', '$768binary_add.62', '$const766.61']
    $770binary_subscr.63 = getitem(value=s_sums, index=$768binary_add.62, fn=<built-in function getitem>) ['$768binary_add.62', '$770binary_subscr.63', 's_sums']
    $778binary_subtract.67 = i - l_warmup    ['$778binary_subtract.67', 'i', 'l_warmup']
    $const782.69 = const(int, 4)             ['$const782.69']
    $784build_tuple.70 = build_tuple(items=[Var($778binary_subtract.67, Euler_maruyama_solver.py:175), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const782.69, Euler_maruyama_solver.py:175)]) ['$778binary_subtract.67', '$784build_tuple.70', '$const782.69', 'l_param_set']
    output[$784build_tuple.70] = $770binary_subscr.63 ['$770binary_subscr.63', '$784build_tuple.70', 'output']
    jump 788                                 []
label 788:
    $788load_deref.1 = freevar(precision: float64) ['$788load_deref.1']
    $const790.2 = const(int, 0)              ['$const790.2']
    $792call_function.3 = call $788load_deref.1($const790.2, func=$788load_deref.1, args=[Var($const790.2, Euler_maruyama_solver.py:178)], kws=(), vararg=None, varkwarg=None, target=None) ['$788load_deref.1', '$792call_function.3', '$const790.2']
    $800binary_multiply.7 = tx * litstates   ['$800binary_multiply.7', 'litstates', 'tx']
    $806binary_multiply.10 = tx * litstates  ['$806binary_multiply.10', 'litstates', 'tx']
    $const808.11 = const(int, 5)             ['$const808.11']
    $810binary_add.12 = $806binary_multiply.10 + $const808.11 ['$806binary_multiply.10', '$810binary_add.12', '$const808.11']
    $812build_slice.13 = global(slice: <class 'slice'>) ['$812build_slice.13']
    $812build_slice.14 = call $812build_slice.13($800binary_multiply.7, $810binary_add.12, func=$812build_slice.13, args=(Var($800binary_multiply.7, Euler_maruyama_solver.py:178), Var($810binary_add.12, Euler_maruyama_solver.py:178)), kws=(), vararg=None, varkwarg=None, target=None) ['$800binary_multiply.7', '$810binary_add.12', '$812build_slice.13', '$812build_slice.14']
    s_sums[$812build_slice.14] = $792call_function.3 ['$792call_function.3', '$812build_slice.14', 's_sums']
    jump 442                                 []
label 820:
    $const820.0 = const(NoneType, None)      ['$const820.0']
    $822return_value.1 = cast(value=$const820.0) ['$822return_value.1', '$const820.0']
    return $822return_value.1                ['$822return_value.1']

07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: xblocksize = arg(0, name=xblocksize)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output = arg(1, name=output)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_values = arg(2, name=grid_values)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_indices = arg(3, name=grid_indices)
07/23/2024 06:57:04 PM - DEBUG - on stmt: constants = arg(4, name=constants)
07/23/2024 06:57:04 PM - DEBUG - on stmt: inits = arg(5, name=inits)
07/23/2024 06:57:04 PM - DEBUG - on stmt: step_size = arg(6, name=step_size)
07/23/2024 06:57:04 PM - DEBUG - on stmt: duration = arg(7, name=duration)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output_fs = arg(8, name=output_fs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: filtercoeffs = arg(9, name=filtercoeffs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: RNG = arg(10, name=RNG)
07/23/2024 06:57:04 PM - DEBUG - on stmt: noise_sigmas = arg(11, name=noise_sigmas)
07/23/2024 06:57:04 PM - DEBUG - on stmt: warmup_time = arg(12, name=warmup_time)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $2load_global.0 = global(int16: int16)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=threadIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $8load_attr.3 = getattr(value=$6load_attr.2, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: tx = call $2load_global.0($8load_attr.3, func=$2load_global.0, args=[Var($8load_attr.3, Euler_maruyama_solver.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $14load_global.5 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $16load_global.6 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=blockIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $20load_attr.8 = getattr(value=$18load_attr.7, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: block_index = call $14load_global.5($20load_attr.8, func=$14load_global.5, args=[Var($20load_attr.8, Euler_maruyama_solver.py:87)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $26load_global.10 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $32binary_multiply.13 = xblocksize * block_index
07/23/2024 06:57:04 PM - DEBUG - on stmt: $36binary_add.15 = $32binary_multiply.13 + tx
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_param_set = call $26load_global.10($36binary_add.15, func=$26load_global.10, args=[Var($36binary_add.15, Euler_maruyama_solver.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $44load_global.18 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $48call_function.20 = call $44load_global.18(grid_values, func=$44load_global.18, args=[Var(grid_values, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $50compare_op.21 = l_param_set >= $48call_function.20
07/23/2024 06:57:04 PM - DEBUG - on stmt: bool52 = global(bool: <class 'bool'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $52pred = call bool52($50compare_op.21, func=bool52, args=(Var($50compare_op.21, Euler_maruyama_solver.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $52pred, 54, 58
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 58
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $58load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_step_size = call $58load_deref.0(step_size, func=$58load_deref.0, args=[Var(step_size, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $66load_global.3 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $68load_global.4 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const70.5 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $76binary_multiply.8 = output_fs * l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $78binary_true_divide.9 = $const70.5 / $76binary_multiply.8
07/23/2024 06:57:04 PM - DEBUG - on stmt: $80call_function.10 = call $68load_global.4($78binary_true_divide.9, func=$68load_global.4, args=[Var($78binary_true_divide.9, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_ds_rate = call $66load_global.3($80call_function.10, func=$66load_global.3, args=[Var($80call_function.10, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $86load_global.12 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $88load_global.13 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $94binary_true_divide.16 = duration / l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $98binary_true_divide.18 = $94binary_true_divide.16 / l_ds_rate
07/23/2024 06:57:04 PM - DEBUG - on stmt: $100call_function.19 = call $88load_global.13($98binary_true_divide.18, func=$88load_global.13, args=[Var($98binary_true_divide.18, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_n_outer = call $86load_global.12($100call_function.19, func=$86load_global.12, args=[Var($100call_function.19, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $106load_global.21 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $112binary_multiply.24 = warmup_time * output_fs
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_warmup = call $106load_global.21($112binary_multiply.24, func=$106load_global.21, args=[Var($112binary_multiply.24, Euler_maruyama_solver.py:98)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $118load_global.26 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $120load_global.27 = global(zero: 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litzero = call $118load_global.26($120load_global.27, func=$118load_global.26, args=[Var($120load_global.27, Euler_maruyama_solver.py:100)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $126load_global.29 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $128load_global.30 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litstates = call $126load_global.29($128load_global.30, func=$126load_global.29, args=[Var($128load_global.30, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $134load_global.32 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $136load_global.33 = global(constants_length: 14)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litconstantslength = call $134load_global.32($136load_global.33, func=$134load_global.32, args=[Var($136load_global.33, Euler_maruyama_solver.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $142load_global.35 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $144load_attr.36 = getattr(value=$142load_global.35, attr=shared)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $146load_attr.37 = getattr(value=$144load_attr.36, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $150load_deref.39 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: dynamic_mem = call $146load_attr.37(litzero, func=$146load_attr.37, args=[Var(litzero, Euler_maruyama_solver.py:100)], kws=[('dtype', Var($150load_deref.39, Euler_maruyama_solver.py:105))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const160.43 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $164load_global.45 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $166binary_multiply.46 = xblocksize * $164load_global.45
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.47 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.48 = call $168build_slice.47($const160.43, $166binary_multiply.46, func=$168build_slice.47, args=(Var($const160.43, Euler_maruyama_solver.py:106), Var($166binary_multiply.46, Euler_maruyama_solver.py:106)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums = getitem(value=dynamic_mem, index=$168build_slice.48, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $178load_global.52 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $180binary_multiply.53 = xblocksize * $178load_global.52
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const182.54 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $186binary_multiply.56 = $const182.54 * xblocksize
07/23/2024 06:57:04 PM - DEBUG - on stmt: $188load_global.57 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $190binary_multiply.58 = $186binary_multiply.56 * $188load_global.57
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.59 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.60 = call $192build_slice.59($180binary_multiply.53, $190binary_multiply.58, func=$192build_slice.59, args=(Var($180binary_multiply.53, Euler_maruyama_solver.py:107), Var($190binary_multiply.58, Euler_maruyama_solver.py:107)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state = getitem(value=dynamic_mem, index=$192build_slice.60, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $198load_global.62 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $200load_attr.63 = getattr(value=$198load_global.62, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $202load_attr.64 = getattr(value=$200load_attr.63, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $206load_deref.66 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt = call $202load_attr.64(func=$202load_attr.64, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($206load_deref.66, Euler_maruyama_solver.py:112))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $214load_global.69 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $216load_attr.70 = getattr(value=$214load_global.69, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $218load_attr.71 = getattr(value=$216load_attr.70, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $222load_deref.73 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_noise = call $218load_attr.71(func=$218load_attr.71, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($222load_deref.73, Euler_maruyama_solver.py:116))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $230load_global.76 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $232load_attr.77 = getattr(value=$230load_global.76, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $234load_attr.78 = getattr(value=$232load_attr.77, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $238load_deref.80 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants = call $234load_attr.78(func=$234load_attr.78, args=[], kws=[('shape', Var(litconstantslength, Euler_maruyama_solver.py:102)), ('dtype', Var($238load_deref.80, Euler_maruyama_solver.py:120))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $246load_global.83 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $248load_attr.84 = getattr(value=$246load_global.83, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $250load_method.85 = getattr(value=$248load_attr.84, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_sigmas = call $250load_method.85(noise_sigmas, func=$250load_method.85, args=[Var(noise_sigmas, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $258load_global.88 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $260load_attr.89 = getattr(value=$258load_global.88, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $262load_method.90 = getattr(value=$260load_attr.89, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_RNG = call $262load_method.90(RNG, func=$262load_method.90, args=[Var(RNG, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $270load_global.93 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $272load_attr.94 = getattr(value=$270load_global.93, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $274load_method.95 = getattr(value=$272load_attr.94, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_filtercoefficients = call $274load_method.95(filtercoeffs, func=$274load_method.95, args=[Var(filtercoeffs, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $282load_global.98 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $284load_global.99 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $288call_function.101 = call $284load_global.99(constants, func=$284load_global.99, args=[Var(constants, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $290call_function.102 = call $282load_global.98($288call_function.101, func=$282load_global.98, args=[Var($288call_function.101, Euler_maruyama_solver.py:125)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $292get_iter.103 = getiter(value=$290call_function.102)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi294.0 = $292get_iter.103
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 294
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.1 = iternext(value=$phi294.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.2 = pair_first(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.3 = pair_second(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi296.1 = $294for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $294for_iter.3, 296, 314
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 296
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi296.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $302binary_subscr.4 = getitem(value=constants, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[i] = $302binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 314
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $314load_global.0 = global(enumerate: <class 'enumerate'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $318call_function.2 = call $314load_global.0(grid_indices, func=$314load_global.0, args=[Var(grid_indices, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $320get_iter.3 = getiter(value=$318call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi322.0 = $320get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 322
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.1 = iternext(value=$phi322.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.2 = pair_first(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.3 = pair_second(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi324.1 = $322for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $322for_iter.3, 324, 350
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 324
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.4 = exhaust_iter(value=$phi324.1, count=2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.2 = static_getitem(value=$324unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.3 = static_getitem(value=$324unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $324unpack_sequence.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: index = $324unpack_sequence.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i, Euler_maruyama_solver.py:125)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: $338binary_subscr.9 = getitem(value=grid_values, index=$336build_tuple.8, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[index] = $338binary_subscr.9
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 350
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $350load_global.0 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $352load_global.1 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $354call_function.2 = call $350load_global.0($352load_global.1, func=$350load_global.0, args=[Var($352load_global.1, Euler_maruyama_solver.py:132)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $356get_iter.3 = getiter(value=$354call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi358.0 = $356get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 358
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.1 = iternext(value=$phi358.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.2 = pair_first(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.3 = pair_second(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi360.1 = $358for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $358for_iter.3, 360, 406
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 360
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi360.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $366binary_subscr.4 = getitem(value=inits, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $372load_global.7 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $374binary_multiply.8 = tx * $372load_global.7
07/23/2024 06:57:04 PM - DEBUG - on stmt: $378binary_add.10 = $374binary_multiply.8 + i
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state[$378binary_add.10] = $366binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: $382load_deref.11 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const384.12 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $386call_function.13 = call $382load_deref.11($const384.12, func=$382load_deref.11, args=[Var($const384.12, Euler_maruyama_solver.py:134)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $392load_global.16 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $394binary_multiply.17 = tx * $392load_global.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: $398binary_add.19 = $394binary_multiply.17 + i
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$398binary_add.19] = $386call_function.13
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 406
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $406load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const408.1 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $410call_function.2 = call $406load_deref.0($const408.1, func=$406load_deref.0, args=[Var($const408.1, Euler_maruyama_solver.py:136)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const414.4 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const416.5 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.6 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.7 = call $418build_slice.6($const414.4, $const416.5, func=$418build_slice.6, args=(Var($const414.4, Euler_maruyama_solver.py:136), Var($const416.5, Euler_maruyama_solver.py:136)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt[slice(None, None, None)] = $410call_function.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: $422load_deref.8 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const424.9 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $430load_global.11 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $436binary_add.14 = l_n_outer + l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $438call_function.15 = call $430load_global.11($436binary_add.14, func=$430load_global.11, args=[Var($436binary_add.14, Euler_maruyama_solver.py:140)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $440get_iter.16 = getiter(value=$438call_function.15)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi444.0 = $440get_iter.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 442
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 444
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 444
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.1 = iternext(value=$phi444.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.2 = pair_first(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.3 = pair_second(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi446.1 = $444for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $444for_iter.3, 446, 820
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 446
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi446.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $448load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $452call_function.4 = call $448load_global.2(l_ds_rate, func=$448load_global.2, args=[Var(l_ds_rate, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $454get_iter.5 = getiter(value=$452call_function.4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi456.1 = $454get_iter.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 456
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.2 = iternext(value=$phi456.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.3 = pair_first(value=$456for_iter.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.4 = pair_second(value=$456for_iter.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi458.2 = $456for_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $456for_iter.4, 458, 624
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 458
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: j = $phi458.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: $464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_t = $464inplace_add.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: $468load_deref.6 = freevar(get_noise: CUDADispatcher(<function get_noise_64 at 0x000001EE06FAE8B0>))
07/23/2024 06:57:04 PM - DEBUG - on stmt: $478call_function.11 = call $468load_deref.6(l_noise, c_sigmas, l_param_set, c_RNG, func=$468load_deref.6, args=[Var(l_noise, Euler_maruyama_solver.py:114), Var(c_sigmas, Euler_maruyama_solver.py:122), Var(l_param_set, Euler_maruyama_solver.py:88), Var(c_RNG, Euler_maruyama_solver.py:123)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: filtercoeff = getitem(value=c_filtercoefficients, index=j, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $490load_deref.15 = freevar(dxdtfunc: CUDADispatcher(<function diffeq_system.__init__.<locals>.dxdtfunc at 0x000001EE089EE430>))
07/23/2024 06:57:04 PM - DEBUG - on stmt: $500binary_multiply.20 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $506binary_multiply.23 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const508.24 = const(int, 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $510binary_add.25 = $506binary_multiply.23 + $const508.24
07/23/2024 06:57:04 PM - DEBUG - on stmt: $512build_slice.26 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $512build_slice.27 = call $512build_slice.26($500binary_multiply.20, $510binary_add.25, func=$512build_slice.26, args=(Var($500binary_multiply.20, Euler_maruyama_solver.py:157), Var($510binary_add.25, Euler_maruyama_solver.py:157)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $514binary_subscr.28 = getitem(value=s_state, index=$512build_slice.27, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $524load_global.32 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $528call_function.34 = call $524load_global.32(litstates, func=$524load_global.32, args=[Var(litstates, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $530get_iter.35 = getiter(value=$528call_function.34)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi532.2 = $530get_iter.35
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 532
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.3 = iternext(value=$phi532.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.4 = pair_first(value=$532for_iter.3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.5 = pair_second(value=$532for_iter.3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi534.3 = $532for_iter.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $532for_iter.5, 534, 620
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 534
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: k = $phi534.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $542binary_multiply.7 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $546binary_add.9 = $542binary_multiply.7 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $550binary_subscr.12 = getitem(value=s_state, index=$546binary_add.9, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $556binary_subscr.15 = getitem(value=l_dxdt, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $560binary_multiply.17 = $556binary_subscr.15 * l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $566binary_subscr.20 = getitem(value=l_noise, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $568binary_add.21 = $560binary_multiply.17 + $566binary_subscr.20
07/23/2024 06:57:04 PM - DEBUG - on stmt: $570inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$550binary_subscr.12, rhs=$568binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state[$546binary_add.9] = $570inplace_add.22
07/23/2024 06:57:04 PM - DEBUG - on stmt: $582binary_multiply.26 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $586binary_add.28 = $582binary_multiply.26 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $590binary_subscr.31 = getitem(value=s_sums, index=$586binary_add.28, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $598binary_multiply.35 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $602binary_add.37 = $598binary_multiply.35 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $604binary_subscr.38 = getitem(value=s_state, index=$602binary_add.37, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $608binary_multiply.40 = $604binary_subscr.38 * filtercoeff
07/23/2024 06:57:04 PM - DEBUG - on stmt: $610inplace_add.41 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$590binary_subscr.31, rhs=$608binary_multiply.40, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$586binary_add.28] = $610inplace_add.41
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 620
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 624
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const628.3 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $630binary_subtract.4 = l_warmup - $const628.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $632compare_op.5 = i > $630binary_subtract.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: bool636 = global(bool: <class 'bool'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $636pred = call bool636($632compare_op.5, func=bool636, args=(Var($632compare_op.5, Euler_maruyama_solver.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $636pred, 638, 788
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 638
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $644binary_multiply.4 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const646.5 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $648binary_add.6 = $644binary_multiply.4 + $const646.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: $650binary_subscr.7 = getitem(value=s_sums, index=$648binary_add.6, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $658binary_subtract.11 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const662.13 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $664build_tuple.14 = build_tuple(items=[Var($658binary_subtract.11, Euler_maruyama_solver.py:171), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const662.13, Euler_maruyama_solver.py:171)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$664build_tuple.14] = $650binary_subscr.7
07/23/2024 06:57:04 PM - DEBUG - on stmt: $674binary_multiply.18 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const676.19 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $678binary_add.20 = $674binary_multiply.18 + $const676.19
07/23/2024 06:57:04 PM - DEBUG - on stmt: $680binary_subscr.21 = getitem(value=s_sums, index=$678binary_add.20, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $688binary_subtract.25 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const692.27 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $694build_tuple.28 = build_tuple(items=[Var($688binary_subtract.25, Euler_maruyama_solver.py:172), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const692.27, Euler_maruyama_solver.py:172)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$694build_tuple.28] = $680binary_subscr.21
07/23/2024 06:57:04 PM - DEBUG - on stmt: $704binary_multiply.32 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const706.33 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $708binary_add.34 = $704binary_multiply.32 + $const706.33
07/23/2024 06:57:04 PM - DEBUG - on stmt: $710binary_subscr.35 = getitem(value=s_sums, index=$708binary_add.34, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $718binary_subtract.39 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const722.41 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $724build_tuple.42 = build_tuple(items=[Var($718binary_subtract.39, Euler_maruyama_solver.py:173), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const722.41, Euler_maruyama_solver.py:173)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$724build_tuple.42] = $710binary_subscr.35
07/23/2024 06:57:04 PM - DEBUG - on stmt: $734binary_multiply.46 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const736.47 = const(int, 3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $738binary_add.48 = $734binary_multiply.46 + $const736.47
07/23/2024 06:57:04 PM - DEBUG - on stmt: $740binary_subscr.49 = getitem(value=s_sums, index=$738binary_add.48, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $748binary_subtract.53 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const752.55 = const(int, 3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $754build_tuple.56 = build_tuple(items=[Var($748binary_subtract.53, Euler_maruyama_solver.py:174), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const752.55, Euler_maruyama_solver.py:174)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$754build_tuple.56] = $740binary_subscr.49
07/23/2024 06:57:04 PM - DEBUG - on stmt: $764binary_multiply.60 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const766.61 = const(int, 4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $768binary_add.62 = $764binary_multiply.60 + $const766.61
07/23/2024 06:57:04 PM - DEBUG - on stmt: $770binary_subscr.63 = getitem(value=s_sums, index=$768binary_add.62, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $778binary_subtract.67 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const782.69 = const(int, 4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $784build_tuple.70 = build_tuple(items=[Var($778binary_subtract.67, Euler_maruyama_solver.py:175), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const782.69, Euler_maruyama_solver.py:175)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$784build_tuple.70] = $770binary_subscr.63
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 788
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 788
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $788load_deref.1 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const790.2 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $792call_function.3 = call $788load_deref.1($const790.2, func=$788load_deref.1, args=[Var($const790.2, Euler_maruyama_solver.py:178)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $800binary_multiply.7 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $806binary_multiply.10 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const808.11 = const(int, 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $810binary_add.12 = $806binary_multiply.10 + $const808.11
07/23/2024 06:57:04 PM - DEBUG - on stmt: $812build_slice.13 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $812build_slice.14 = call $812build_slice.13($800binary_multiply.7, $810binary_add.12, func=$812build_slice.13, args=(Var($800binary_multiply.7, Euler_maruyama_solver.py:178), Var($810binary_add.12, Euler_maruyama_solver.py:178)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$812build_slice.14] = $792call_function.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block analysis pass on 820
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D32D30>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const820.0 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $822return_value.1 = cast(value=$const820.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: return $822return_value.1
07/23/2024 06:57:04 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$100call_function.19': [(<numba.core.ir.Assign object at 0x000001EE15D060D0>,
                                       58)],
             '$106load_global.21': [(<numba.core.ir.Assign object at 0x000001EE15D06490>,
                                     58)],
             '$112binary_multiply.24': [(<numba.core.ir.Assign object at 0x000001EE15D06880>,
                                         58)],
             '$118load_global.26': [(<numba.core.ir.Assign object at 0x000001EE15C5B490>,
                                     58)],
             '$120load_global.27': [(<numba.core.ir.Assign object at 0x000001EE15C5B400>,
                                     58)],
             '$126load_global.29': [(<numba.core.ir.Assign object at 0x000001EE14B6A0D0>,
                                     58)],
             '$128load_global.30': [(<numba.core.ir.Assign object at 0x000001EE14B6ABB0>,
                                     58)],
             '$134load_global.32': [(<numba.core.ir.Assign object at 0x000001EE14B6ACD0>,
                                     58)],
             '$136load_global.33': [(<numba.core.ir.Assign object at 0x000001EE14B6A2B0>,
                                     58)],
             '$142load_global.35': [(<numba.core.ir.Assign object at 0x000001EE14B6A610>,
                                     58)],
             '$144load_attr.36': [(<numba.core.ir.Assign object at 0x000001EE14B6A790>,
                                   58)],
             '$146load_attr.37': [(<numba.core.ir.Assign object at 0x000001EE14B6A070>,
                                   58)],
             '$14load_global.5': [(<numba.core.ir.Assign object at 0x000001EE15CF4400>,
                                   0)],
             '$150load_deref.39': [(<numba.core.ir.Assign object at 0x000001EE14B580A0>,
                                    58)],
             '$164load_global.45': [(<numba.core.ir.Assign object at 0x000001EE14B58130>,
                                     58)],
             '$166binary_multiply.46': [(<numba.core.ir.Assign object at 0x000001EE14B587C0>,
                                         58)],
             '$168build_slice.47': [(<numba.core.ir.Assign object at 0x000001EE14B58F10>,
                                     58)],
             '$168build_slice.48': [(<numba.core.ir.Assign object at 0x000001EE15D06C10>,
                                     58)],
             '$16load_global.6': [(<numba.core.ir.Assign object at 0x000001EE15CF4580>,
                                   0)],
             '$178load_global.52': [(<numba.core.ir.Assign object at 0x000001EE15C57D00>,
                                     58)],
             '$180binary_multiply.53': [(<numba.core.ir.Assign object at 0x000001EE15C57B80>,
                                         58)],
             '$186binary_multiply.56': [(<numba.core.ir.Assign object at 0x000001EE15C576D0>,
                                         58)],
             '$188load_global.57': [(<numba.core.ir.Assign object at 0x000001EE15C57580>,
                                     58)],
             '$18load_attr.7': [(<numba.core.ir.Assign object at 0x000001EE15CF4700>,
                                 0)],
             '$190binary_multiply.58': [(<numba.core.ir.Assign object at 0x000001EE15C57490>,
                                         58)],
             '$192build_slice.59': [(<numba.core.ir.Assign object at 0x000001EE15C57340>,
                                     58)],
             '$192build_slice.60': [(<numba.core.ir.Assign object at 0x000001EE15C57280>,
                                     58)],
             '$198load_global.62': [(<numba.core.ir.Assign object at 0x000001EE15C55250>,
                                     58)],
             '$200load_attr.63': [(<numba.core.ir.Assign object at 0x000001EE15C553D0>,
                                   58)],
             '$202load_attr.64': [(<numba.core.ir.Assign object at 0x000001EE15C55550>,
                                   58)],
             '$206load_deref.66': [(<numba.core.ir.Assign object at 0x000001EE15C557F0>,
                                    58)],
             '$20load_attr.8': [(<numba.core.ir.Assign object at 0x000001EE15CF4880>,
                                 0)],
             '$214load_global.69': [(<numba.core.ir.Assign object at 0x000001EE15C55EB0>,
                                     58)],
             '$216load_attr.70': [(<numba.core.ir.Assign object at 0x000001EE15C54070>,
                                   58)],
             '$218load_attr.71': [(<numba.core.ir.Assign object at 0x000001EE15C541F0>,
                                   58)],
             '$222load_deref.73': [(<numba.core.ir.Assign object at 0x000001EE15C54490>,
                                    58)],
             '$230load_global.76': [(<numba.core.ir.Assign object at 0x000001EE15C54B50>,
                                     58)],
             '$232load_attr.77': [(<numba.core.ir.Assign object at 0x000001EE15C54CD0>,
                                   58)],
             '$234load_attr.78': [(<numba.core.ir.Assign object at 0x000001EE15C54E50>,
                                   58)],
             '$238load_deref.80': [(<numba.core.ir.Assign object at 0x000001EE15C52E50>,
                                    58)],
             '$246load_global.83': [(<numba.core.ir.Assign object at 0x000001EE15C52790>,
                                     58)],
             '$248load_attr.84': [(<numba.core.ir.Assign object at 0x000001EE15C52670>,
                                   58)],
             '$250load_method.85': [(<numba.core.ir.Assign object at 0x000001EE15C528B0>,
                                     58)],
             '$258load_global.88': [(<numba.core.ir.Assign object at 0x000001EE15C51070>,
                                     58)],
             '$260load_attr.89': [(<numba.core.ir.Assign object at 0x000001EE15C511F0>,
                                   58)],
             '$262load_method.90': [(<numba.core.ir.Assign object at 0x000001EE15C51370>,
                                     58)],
             '$26load_global.10': [(<numba.core.ir.Assign object at 0x000001EE15CF4CA0>,
                                    0)],
             '$270load_global.93': [(<numba.core.ir.Assign object at 0x000001EE15C518B0>,
                                     58)],
             '$272load_attr.94': [(<numba.core.ir.Assign object at 0x000001EE15C51A30>,
                                   58)],
             '$274load_method.95': [(<numba.core.ir.Assign object at 0x000001EE15C51BB0>,
                                     58)],
             '$282load_global.98': [(<numba.core.ir.Assign object at 0x000001EE15C53130>,
                                     58)],
             '$284load_global.99': [(<numba.core.ir.Assign object at 0x000001EE15C532B0>,
                                     58)],
             '$288call_function.101': [(<numba.core.ir.Assign object at 0x000001EE15C535B0>,
                                        58)],
             '$290call_function.102': [(<numba.core.ir.Assign object at 0x000001EE15C53730>,
                                        58)],
             '$292get_iter.103': [(<numba.core.ir.Assign object at 0x000001EE15C53850>,
                                   58)],
             '$294for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE15C4CF70>,
                                 294)],
             '$294for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14B58880>,
                                 294)],
             '$294for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14B58460>,
                                 294)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001EE15CF5B20>,
                                  0)],
             '$302binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001EE15C51520>,
                                      296)],
             '$314load_global.0': [(<numba.core.ir.Assign object at 0x000001EE15C53B50>,
                                    314)],
             '$318call_function.2': [(<numba.core.ir.Assign object at 0x000001EE15C53E50>,
                                      314)],
             '$320get_iter.3': [(<numba.core.ir.Assign object at 0x000001EE15C53F70>,
                                 314)],
             '$322for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE14B4F460>,
                                 322)],
             '$322for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14B4F0A0>,
                                 322)],
             '$322for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14B4F8E0>,
                                 322)],
             '$324unpack_sequence.2': [(<numba.core.ir.Assign object at 0x000001EE14B4F760>,
                                        324)],
             '$324unpack_sequence.3': [(<numba.core.ir.Assign object at 0x000001EE14B4F880>,
                                        324)],
             '$324unpack_sequence.4': [(<numba.core.ir.Assign object at 0x000001EE14B4F550>,
                                        324)],
             '$32binary_multiply.13': [(<numba.core.ir.Assign object at 0x000001EE15CFD0D0>,
                                        0)],
             '$336build_tuple.8': [(<numba.core.ir.Assign object at 0x000001EE14B421C0>,
                                    324)],
             '$338binary_subscr.9': [(<numba.core.ir.Assign object at 0x000001EE14B42340>,
                                      324)],
             '$350load_global.0': [(<numba.core.ir.Assign object at 0x000001EE14B425E0>,
                                    350)],
             '$352load_global.1': [(<numba.core.ir.Assign object at 0x000001EE14B428B0>,
                                    350)],
             '$354call_function.2': [(<numba.core.ir.Assign object at 0x000001EE14B42A90>,
                                      350)],
             '$356get_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14B42BB0>,
                                 350)],
             '$358for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE14B42F40>,
                                 358)],
             '$358for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE14B65D00>,
                                 358)],
             '$358for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE14B65F10>,
                                 358)],
             '$366binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001EE14B657F0>,
                                      360)],
             '$36binary_add.15': [(<numba.core.ir.Assign object at 0x000001EE15CFD370>,
                                   0)],
             '$372load_global.7': [(<numba.core.ir.Assign object at 0x000001EE14B650D0>,
                                    360)],
             '$374binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001EE14B65550>,
                                        360)],
             '$378binary_add.10': [(<numba.core.ir.Assign object at 0x000001EE14B51040>,
                                    360)],
             '$382load_deref.11': [(<numba.core.ir.Assign object at 0x000001EE14B51250>,
                                    360)],
             '$386call_function.13': [(<numba.core.ir.Assign object at 0x000001EE14B515B0>,
                                       360)],
             '$392load_global.16': [(<numba.core.ir.Assign object at 0x000001EE14B51910>,
                                     360)],
             '$394binary_multiply.17': [(<numba.core.ir.Assign object at 0x000001EE14B51AC0>,
                                         360)],
             '$398binary_add.19': [(<numba.core.ir.Assign object at 0x000001EE14B51D60>,
                                    360)],
             '$406load_deref.0': [(<numba.core.ir.Assign object at 0x000001EE14B42DF0>,
                                   406)],
             '$410call_function.2': [(<numba.core.ir.Assign object at 0x000001EE14B34190>,
                                      406)],
             '$418build_slice.6': [(<numba.core.ir.Assign object at 0x000001EE14B346D0>,
                                    406)],
             '$418build_slice.7': [(<numba.core.ir.Assign object at 0x000001EE14B347F0>,
                                    406)],
             '$422load_deref.8': [(<numba.core.ir.Assign object at 0x000001EE14B34A30>,
                                   406)],
             '$430load_global.11': [(<numba.core.ir.Assign object at 0x000001EE14B34FD0>,
                                     406)],
             '$436binary_add.14': [(<numba.core.ir.Assign object at 0x000001EE15D0B400>,
                                    406)],
             '$438call_function.15': [(<numba.core.ir.Assign object at 0x000001EE15D0B5B0>,
                                       406)],
             '$440get_iter.16': [(<numba.core.ir.Assign object at 0x000001EE15D0B6D0>,
                                  406)],
             '$444for_iter.1': [(<numba.core.ir.Assign object at 0x000001EE15D0BA00>,
                                 444)],
             '$444for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE15D0BB20>,
                                 444)],
             '$444for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE15D0BC40>,
                                 444)],
             '$448load_global.2': [(<numba.core.ir.Assign object at 0x000001EE15D0D070>,
                                    446)],
             '$44load_global.18': [(<numba.core.ir.Assign object at 0x000001EE15CFD8B0>,
                                    0)],
             '$452call_function.4': [(<numba.core.ir.Assign object at 0x000001EE15D0D370>,
                                      446)],
             '$454get_iter.5': [(<numba.core.ir.Assign object at 0x000001EE15D0D490>,
                                 446)],
             '$456for_iter.2': [(<numba.core.ir.Assign object at 0x000001EE15D0D7C0>,
                                 456)],
             '$456for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE15D0D8E0>,
                                 456)],
             '$456for_iter.4': [(<numba.core.ir.Assign object at 0x000001EE15D0DA00>,
                                 456)],
             '$464inplace_add.5': [(<numba.core.ir.Assign object at 0x000001EE15D0F100>,
                                    458)],
             '$468load_deref.6': [(<numba.core.ir.Assign object at 0x000001EE15D0F310>,
                                   458)],
             '$478call_function.11': [(<numba.core.ir.Assign object at 0x000001EE15D0F970>,
                                       458)],
             '$48call_function.20': [(<numba.core.ir.Assign object at 0x000001EE15CFDBB0>,
                                      0)],
             '$490load_deref.15': [(<numba.core.ir.Assign object at 0x000001EE15D0FF70>,
                                    458)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001EE15CF5CA0>,
                                  0)],
             '$500binary_multiply.20': [(<numba.core.ir.Assign object at 0x000001EE15D115E0>,
                                         458)],
             '$506binary_multiply.23': [(<numba.core.ir.Assign object at 0x000001EE15D119A0>,
                                         458)],
             '$50compare_op.21': [(<numba.core.ir.Assign object at 0x000001EE15CFDD00>,
                                   0)],
             '$510binary_add.25': [(<numba.core.ir.Assign object at 0x000001EE15D11CA0>,
                                    458)],
             '$512build_slice.26': [(<numba.core.ir.Assign object at 0x000001EE15D11DF0>,
                                     458)],
             '$512build_slice.27': [(<numba.core.ir.Assign object at 0x000001EE15D11F10>,
                                     458)],
             '$514binary_subscr.28': [(<numba.core.ir.Assign object at 0x000001EE15D13100>,
                                       458)],
             '$520call_function.31': [(<numba.core.ir.Assign object at 0x000001EE15D134F0>,
                                       458)],
             '$524load_global.32': [(<numba.core.ir.Assign object at 0x000001EE15D13610>,
                                     458)],
             '$528call_function.34': [(<numba.core.ir.Assign object at 0x000001EE15D13910>,
                                       458)],
             '$52pred': [(<numba.core.ir.Assign object at 0x000001EE15CFDF70>,
                          0)],
             '$530get_iter.35': [(<numba.core.ir.Assign object at 0x000001EE15D13A30>,
                                  458)],
             '$532for_iter.3': [(<numba.core.ir.Assign object at 0x000001EE15D113A0>,
                                 532)],
             '$532for_iter.4': [(<numba.core.ir.Assign object at 0x000001EE15D11880>,
                                 532)],
             '$532for_iter.5': [(<numba.core.ir.Assign object at 0x000001EE15D0DFA0>,
                                 532)],
             '$542binary_multiply.7': [(<numba.core.ir.Assign object at 0x000001EE15D15160>,
                                        534)],
             '$546binary_add.9': [(<numba.core.ir.Assign object at 0x000001EE15D15400>,
                                   534)],
             '$550binary_subscr.12': [(<numba.core.ir.Assign object at 0x000001EE15D15760>,
                                       534)],
             '$556binary_subscr.15': [(<numba.core.ir.Assign object at 0x000001EE15D15B20>,
                                       534)],
             '$560binary_multiply.17': [(<numba.core.ir.Assign object at 0x000001EE15D15DC0>,
                                         534)],
             '$566binary_subscr.20': [(<numba.core.ir.Assign object at 0x000001EE15D171C0>,
                                       534)],
             '$568binary_add.21': [(<numba.core.ir.Assign object at 0x000001EE15D17340>,
                                    534)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001EE15D020D0>,
                                    54)],
             '$570inplace_add.22': [(<numba.core.ir.Assign object at 0x000001EE15D174C0>,
                                     534)],
             '$582binary_multiply.26': [(<numba.core.ir.Assign object at 0x000001EE15D17A60>,
                                         534)],
             '$586binary_add.28': [(<numba.core.ir.Assign object at 0x000001EE15D17D00>,
                                    534)],
             '$58load_deref.0': [(<numba.core.ir.Assign object at 0x000001EE15D02370>,
                                  58)],
             '$590binary_subscr.31': [(<numba.core.ir.Assign object at 0x000001EE15D190A0>,
                                       534)],
             '$598binary_multiply.35': [(<numba.core.ir.Assign object at 0x000001EE15D19580>,
                                         534)],
             '$602binary_add.37': [(<numba.core.ir.Assign object at 0x000001EE15D19820>,
                                    534)],
             '$604binary_subscr.38': [(<numba.core.ir.Assign object at 0x000001EE15D199A0>,
                                       534)],
             '$608binary_multiply.40': [(<numba.core.ir.Assign object at 0x000001EE15D19C40>,
                                         534)],
             '$610inplace_add.41': [(<numba.core.ir.Assign object at 0x000001EE15D19DC0>,
                                     534)],
             '$630binary_subtract.4': [(<numba.core.ir.Assign object at 0x000001EE15D193D0>,
                                        624)],
             '$632compare_op.5': [(<numba.core.ir.Assign object at 0x000001EE15D1B040>,
                                   624)],
             '$636pred': [(<numba.core.ir.Assign object at 0x000001EE15D1B2B0>,
                           624)],
             '$644binary_multiply.4': [(<numba.core.ir.Assign object at 0x000001EE15D1B820>,
                                        638)],
             '$648binary_add.6': [(<numba.core.ir.Assign object at 0x000001EE15D1BB20>,
                                   638)],
             '$650binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001EE15D1BCA0>,
                                      638)],
             '$658binary_subtract.11': [(<numba.core.ir.Assign object at 0x000001EE15D1E1C0>,
                                         638)],
             '$664build_tuple.14': [(<numba.core.ir.Assign object at 0x000001EE15D1E5E0>,
                                     638)],
             '$66load_global.3': [(<numba.core.ir.Assign object at 0x000001EE15D028B0>,
                                   58)],
             '$674binary_multiply.18': [(<numba.core.ir.Assign object at 0x000001EE15D1EB80>,
                                         638)],
             '$678binary_add.20': [(<numba.core.ir.Assign object at 0x000001EE15D1EE80>,
                                    638)],
             '$680binary_subscr.21': [(<numba.core.ir.Assign object at 0x000001EE15D20040>,
                                       638)],
             '$688binary_subtract.25': [(<numba.core.ir.Assign object at 0x000001EE15D20520>,
                                         638)],
             '$68load_global.4': [(<numba.core.ir.Assign object at 0x000001EE15D02A30>,
                                   58)],
             '$694build_tuple.28': [(<numba.core.ir.Assign object at 0x000001EE15D20940>,
                                     638)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001EE15CF5E20>,
                                0)],
             '$704binary_multiply.32': [(<numba.core.ir.Assign object at 0x000001EE15D20EE0>,
                                         638)],
             '$708binary_add.34': [(<numba.core.ir.Assign object at 0x000001EE15D22220>,
                                    638)],
             '$710binary_subscr.35': [(<numba.core.ir.Assign object at 0x000001EE15D223A0>,
                                       638)],
             '$718binary_subtract.39': [(<numba.core.ir.Assign object at 0x000001EE15D22880>,
                                         638)],
             '$724build_tuple.42': [(<numba.core.ir.Assign object at 0x000001EE15D22CA0>,
                                     638)],
             '$734binary_multiply.46': [(<numba.core.ir.Assign object at 0x000001EE15D23280>,
                                         638)],
             '$738binary_add.48': [(<numba.core.ir.Assign object at 0x000001EE15D23580>,
                                    638)],
             '$740binary_subscr.49': [(<numba.core.ir.Assign object at 0x000001EE15D23700>,
                                       638)],
             '$748binary_subtract.53': [(<numba.core.ir.Assign object at 0x000001EE15D23BE0>,
                                         638)],
             '$754build_tuple.56': [(<numba.core.ir.Assign object at 0x000001EE15D25040>,
                                     638)],
             '$764binary_multiply.60': [(<numba.core.ir.Assign object at 0x000001EE15D255E0>,
                                         638)],
             '$768binary_add.62': [(<numba.core.ir.Assign object at 0x000001EE15D258E0>,
                                    638)],
             '$76binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001EE15D02FA0>,
                                       58)],
             '$770binary_subscr.63': [(<numba.core.ir.Assign object at 0x000001EE15D25A60>,
                                       638)],
             '$778binary_subtract.67': [(<numba.core.ir.Assign object at 0x000001EE15D25F40>,
                                         638)],
             '$784build_tuple.70': [(<numba.core.ir.Assign object at 0x000001EE15D273A0>,
                                     638)],
             '$788load_deref.1': [(<numba.core.ir.Assign object at 0x000001EE15D1E2B0>,
                                   788)],
             '$78binary_true_divide.9': [(<numba.core.ir.Assign object at 0x000001EE15D04160>,
                                          58)],
             '$792call_function.3': [(<numba.core.ir.Assign object at 0x000001EE15D20C10>,
                                      788)],
             '$800binary_multiply.7': [(<numba.core.ir.Assign object at 0x000001EE15D23D60>,
                                        788)],
             '$806binary_multiply.10': [(<numba.core.ir.Assign object at 0x000001EE15D27580>,
                                         788)],
             '$80call_function.10': [(<numba.core.ir.Assign object at 0x000001EE15D04310>,
                                      58)],
             '$810binary_add.12': [(<numba.core.ir.Assign object at 0x000001EE15D27880>,
                                    788)],
             '$812build_slice.13': [(<numba.core.ir.Assign object at 0x000001EE15D279D0>,
                                     788)],
             '$812build_slice.14': [(<numba.core.ir.Assign object at 0x000001EE15D27AF0>,
                                     788)],
             '$822return_value.1': [(<numba.core.ir.Assign object at 0x000001EE15D27E50>,
                                     820)],
             '$86load_global.12': [(<numba.core.ir.Assign object at 0x000001EE15D046D0>,
                                    58)],
             '$88load_global.13': [(<numba.core.ir.Assign object at 0x000001EE15D04850>,
                                    58)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x000001EE15CF5FA0>,
                                0)],
             '$94binary_true_divide.16': [(<numba.core.ir.Assign object at 0x000001EE15D04C40>,
                                           58)],
             '$98binary_true_divide.18': [(<numba.core.ir.Assign object at 0x000001EE15D04EE0>,
                                           58)],
             '$const160.43': [(<numba.core.ir.Assign object at 0x000001EE14B586D0>,
                               58)],
             '$const182.54': [(<numba.core.ir.Assign object at 0x000001EE15C579D0>,
                               58)],
             '$const384.12': [(<numba.core.ir.Assign object at 0x000001EE14B513D0>,
                               360)],
             '$const408.1': [(<numba.core.ir.Assign object at 0x000001EE14B51F70>,
                              406)],
             '$const414.4': [(<numba.core.ir.Assign object at 0x000001EE14B343D0>,
                              406)],
             '$const416.5': [(<numba.core.ir.Assign object at 0x000001EE14B34550>,
                              406)],
             '$const424.9': [(<numba.core.ir.Assign object at 0x000001EE14B34BB0>,
                              406)],
             '$const508.24': [(<numba.core.ir.Assign object at 0x000001EE15D11AF0>,
                               458)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001EE15CFD700>,
                             54)],
             '$const628.3': [(<numba.core.ir.Assign object at 0x000001EE15D17E50>,
                              624)],
             '$const646.5': [(<numba.core.ir.Assign object at 0x000001EE15D1B970>,
                              638)],
             '$const662.13': [(<numba.core.ir.Assign object at 0x000001EE15D1E430>,
                               638)],
             '$const676.19': [(<numba.core.ir.Assign object at 0x000001EE15D1ECD0>,
                               638)],
             '$const692.27': [(<numba.core.ir.Assign object at 0x000001EE15D20790>,
                               638)],
             '$const70.5': [(<numba.core.ir.Assign object at 0x000001EE15D02BB0>,
                             58)],
             '$const706.33': [(<numba.core.ir.Assign object at 0x000001EE15D22070>,
                               638)],
             '$const722.41': [(<numba.core.ir.Assign object at 0x000001EE15D22AF0>,
                               638)],
             '$const736.47': [(<numba.core.ir.Assign object at 0x000001EE15D233D0>,
                               638)],
             '$const752.55': [(<numba.core.ir.Assign object at 0x000001EE15D23E50>,
                               638)],
             '$const766.61': [(<numba.core.ir.Assign object at 0x000001EE15D25730>,
                               638)],
             '$const782.69': [(<numba.core.ir.Assign object at 0x000001EE15D271F0>,
                               638)],
             '$const790.2': [(<numba.core.ir.Assign object at 0x000001EE15D20130>,
                              788)],
             '$const808.11': [(<numba.core.ir.Assign object at 0x000001EE15D276D0>,
                               788)],
             '$const820.0': [(<numba.core.ir.Assign object at 0x000001EE15D27070>,
                              820)],
             '$phi294.0': [(<numba.core.ir.Assign object at 0x000001EE15D02520>,
                            58)],
             '$phi296.1': [(<numba.core.ir.Assign object at 0x000001EE15D04B20>,
                            294)],
             '$phi322.0': [(<numba.core.ir.Assign object at 0x000001EE15C53C70>,
                            314)],
             '$phi324.1': [(<numba.core.ir.Assign object at 0x000001EE14B4F5E0>,
                            322)],
             '$phi358.0': [(<numba.core.ir.Assign object at 0x000001EE14B42C10>,
                            350)],
             '$phi360.1': [(<numba.core.ir.Assign object at 0x000001EE14B42E80>,
                            358)],
             '$phi444.0': [(<numba.core.ir.Assign object at 0x000001EE14B342E0>,
                            406)],
             '$phi446.1': [(<numba.core.ir.Assign object at 0x000001EE15D0B940>,
                            444)],
             '$phi456.1': [(<numba.core.ir.Assign object at 0x000001EE15D0D190>,
                            446)],
             '$phi458.2': [(<numba.core.ir.Assign object at 0x000001EE15D0D700>,
                            456)],
             '$phi532.2': [(<numba.core.ir.Assign object at 0x000001EE15D0F4C0>,
                            458)],
             '$phi534.3': [(<numba.core.ir.Assign object at 0x000001EE15D11160>,
                            532)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001EE15CF5760>, 0)],
             'block_index': [(<numba.core.ir.Assign object at 0x000001EE15CF4A60>,
                              0)],
             'bool52': [(<numba.core.ir.Assign object at 0x000001EE15CFDE50>,
                         0)],
             'bool636': [(<numba.core.ir.Assign object at 0x000001EE15D1B190>,
                          624)],
             'c_RNG': [(<numba.core.ir.Assign object at 0x000001EE15C516A0>,
                        58)],
             'c_filtercoefficients': [(<numba.core.ir.Assign object at 0x000001EE15C51EE0>,
                                       58)],
             'c_sigmas': [(<numba.core.ir.Assign object at 0x000001EE15C52490>,
                           58)],
             'constants': [(<numba.core.ir.Assign object at 0x000001EE15CF50A0>,
                            0)],
             'duration': [(<numba.core.ir.Assign object at 0x000001EE15CF5400>,
                           0)],
             'dynamic_mem': [(<numba.core.ir.Assign object at 0x000001EE14B58850>,
                              58)],
             'filtercoeff': [(<numba.core.ir.Assign object at 0x000001EE15D0FD00>,
                              458)],
             'filtercoeffs': [(<numba.core.ir.Assign object at 0x000001EE15CF5640>,
                               0)],
             'grid_indices': [(<numba.core.ir.Assign object at 0x000001EE15CC6F40>,
                               0)],
             'grid_values': [(<numba.core.ir.Assign object at 0x000001EE15CC6DF0>,
                              0)],
             'i': [(<numba.core.ir.Assign object at 0x000001EE15C57940>, 296),
                   (<numba.core.ir.Assign object at 0x000001EE14B4FA90>, 324),
                   (<numba.core.ir.Assign object at 0x000001EE14B65BB0>, 360),
                   (<numba.core.ir.Assign object at 0x000001EE15D0BEE0>, 446)],
             'index': [(<numba.core.ir.Assign object at 0x000001EE14B4FD90>,
                        324)],
             'inits': [(<numba.core.ir.Assign object at 0x000001EE15CF51C0>,
                        0)],
             'j': [(<numba.core.ir.Assign object at 0x000001EE15D0DCD0>, 458)],
             'k': [(<numba.core.ir.Assign object at 0x000001EE15D13C10>, 534)],
             'l_constants': [(<numba.core.ir.Assign object at 0x000001EE15C52A00>,
                              58)],
             'l_ds_rate': [(<numba.core.ir.Assign object at 0x000001EE15D04490>,
                            58)],
             'l_dxdt': [(<numba.core.ir.Assign object at 0x000001EE15C559A0>,
                         58)],
             'l_n_outer': [(<numba.core.ir.Assign object at 0x000001EE15D06250>,
                            58)],
             'l_noise': [(<numba.core.ir.Assign object at 0x000001EE15C54640>,
                          58)],
             'l_param_set': [(<numba.core.ir.Assign object at 0x000001EE15CFD520>,
                              0)],
             'l_step_size': [(<numba.core.ir.Assign object at 0x000001EE15D02670>,
                              58)],
             'l_t': [(<numba.core.ir.Assign object at 0x000001EE14B34D90>, 406),
                     (<numba.core.ir.Assign object at 0x000001EE15D0F1C0>,
                      458)],
             'l_warmup': [(<numba.core.ir.Assign object at 0x000001EE15D06A30>,
                           58)],
             'litconstantslength': [(<numba.core.ir.Assign object at 0x000001EE14B6A3D0>,
                                     58)],
             'litstates': [(<numba.core.ir.Assign object at 0x000001EE14B6AF40>,
                            58)],
             'litzero': [(<numba.core.ir.Assign object at 0x000001EE15C5B040>,
                          58)],
             'noise_sigmas': [(<numba.core.ir.Assign object at 0x000001EE15CF5880>,
                               0)],
             'output': [(<numba.core.ir.Assign object at 0x000001EE15CC6040>,
                         0)],
             'output_fs': [(<numba.core.ir.Assign object at 0x000001EE15CF5520>,
                            0)],
             's_state': [(<numba.core.ir.Assign object at 0x000001EE15C57160>,
                          58)],
             's_sums': [(<numba.core.ir.Assign object at 0x000001EE15D06DC0>,
                         58)],
             'step_size': [(<numba.core.ir.Assign object at 0x000001EE15CF52E0>,
                            0)],
             'tx': [(<numba.core.ir.Assign object at 0x000001EE15CF41C0>, 0)],
             'warmup_time': [(<numba.core.ir.Assign object at 0x000001EE15CF59A0>,
                              0)],
             'xblocksize': [(<numba.core.ir.Assign object at 0x000001EE15CC6400>,
                             0)]})
07/23/2024 06:57:04 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE15D2CBB0>
07/23/2024 06:57:04 PM - DEBUG - Fix SSA violator on var i
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: xblocksize = arg(0, name=xblocksize)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output = arg(1, name=output)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_values = arg(2, name=grid_values)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_indices = arg(3, name=grid_indices)
07/23/2024 06:57:04 PM - DEBUG - on stmt: constants = arg(4, name=constants)
07/23/2024 06:57:04 PM - DEBUG - on stmt: inits = arg(5, name=inits)
07/23/2024 06:57:04 PM - DEBUG - on stmt: step_size = arg(6, name=step_size)
07/23/2024 06:57:04 PM - DEBUG - on stmt: duration = arg(7, name=duration)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output_fs = arg(8, name=output_fs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: filtercoeffs = arg(9, name=filtercoeffs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: RNG = arg(10, name=RNG)
07/23/2024 06:57:04 PM - DEBUG - on stmt: noise_sigmas = arg(11, name=noise_sigmas)
07/23/2024 06:57:04 PM - DEBUG - on stmt: warmup_time = arg(12, name=warmup_time)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $2load_global.0 = global(int16: int16)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=threadIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $8load_attr.3 = getattr(value=$6load_attr.2, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: tx = call $2load_global.0($8load_attr.3, func=$2load_global.0, args=[Var($8load_attr.3, Euler_maruyama_solver.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $14load_global.5 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $16load_global.6 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=blockIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $20load_attr.8 = getattr(value=$18load_attr.7, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: block_index = call $14load_global.5($20load_attr.8, func=$14load_global.5, args=[Var($20load_attr.8, Euler_maruyama_solver.py:87)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $26load_global.10 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $32binary_multiply.13 = xblocksize * block_index
07/23/2024 06:57:04 PM - DEBUG - on stmt: $36binary_add.15 = $32binary_multiply.13 + tx
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_param_set = call $26load_global.10($36binary_add.15, func=$26load_global.10, args=[Var($36binary_add.15, Euler_maruyama_solver.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $44load_global.18 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $48call_function.20 = call $44load_global.18(grid_values, func=$44load_global.18, args=[Var(grid_values, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $50compare_op.21 = l_param_set >= $48call_function.20
07/23/2024 06:57:04 PM - DEBUG - on stmt: bool52 = global(bool: <class 'bool'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $52pred = call bool52($50compare_op.21, func=bool52, args=(Var($50compare_op.21, Euler_maruyama_solver.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $52pred, 54, 58
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 54
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 58
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $58load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_step_size = call $58load_deref.0(step_size, func=$58load_deref.0, args=[Var(step_size, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $66load_global.3 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $68load_global.4 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const70.5 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $76binary_multiply.8 = output_fs * l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $78binary_true_divide.9 = $const70.5 / $76binary_multiply.8
07/23/2024 06:57:04 PM - DEBUG - on stmt: $80call_function.10 = call $68load_global.4($78binary_true_divide.9, func=$68load_global.4, args=[Var($78binary_true_divide.9, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_ds_rate = call $66load_global.3($80call_function.10, func=$66load_global.3, args=[Var($80call_function.10, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $86load_global.12 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $88load_global.13 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $94binary_true_divide.16 = duration / l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $98binary_true_divide.18 = $94binary_true_divide.16 / l_ds_rate
07/23/2024 06:57:04 PM - DEBUG - on stmt: $100call_function.19 = call $88load_global.13($98binary_true_divide.18, func=$88load_global.13, args=[Var($98binary_true_divide.18, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_n_outer = call $86load_global.12($100call_function.19, func=$86load_global.12, args=[Var($100call_function.19, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $106load_global.21 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $112binary_multiply.24 = warmup_time * output_fs
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_warmup = call $106load_global.21($112binary_multiply.24, func=$106load_global.21, args=[Var($112binary_multiply.24, Euler_maruyama_solver.py:98)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $118load_global.26 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $120load_global.27 = global(zero: 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litzero = call $118load_global.26($120load_global.27, func=$118load_global.26, args=[Var($120load_global.27, Euler_maruyama_solver.py:100)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $126load_global.29 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $128load_global.30 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litstates = call $126load_global.29($128load_global.30, func=$126load_global.29, args=[Var($128load_global.30, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $134load_global.32 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $136load_global.33 = global(constants_length: 14)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litconstantslength = call $134load_global.32($136load_global.33, func=$134load_global.32, args=[Var($136load_global.33, Euler_maruyama_solver.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $142load_global.35 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $144load_attr.36 = getattr(value=$142load_global.35, attr=shared)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $146load_attr.37 = getattr(value=$144load_attr.36, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $150load_deref.39 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: dynamic_mem = call $146load_attr.37(litzero, func=$146load_attr.37, args=[Var(litzero, Euler_maruyama_solver.py:100)], kws=[('dtype', Var($150load_deref.39, Euler_maruyama_solver.py:105))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const160.43 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $164load_global.45 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $166binary_multiply.46 = xblocksize * $164load_global.45
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.47 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.48 = call $168build_slice.47($const160.43, $166binary_multiply.46, func=$168build_slice.47, args=(Var($const160.43, Euler_maruyama_solver.py:106), Var($166binary_multiply.46, Euler_maruyama_solver.py:106)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums = getitem(value=dynamic_mem, index=$168build_slice.48, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $178load_global.52 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $180binary_multiply.53 = xblocksize * $178load_global.52
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const182.54 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $186binary_multiply.56 = $const182.54 * xblocksize
07/23/2024 06:57:04 PM - DEBUG - on stmt: $188load_global.57 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $190binary_multiply.58 = $186binary_multiply.56 * $188load_global.57
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.59 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.60 = call $192build_slice.59($180binary_multiply.53, $190binary_multiply.58, func=$192build_slice.59, args=(Var($180binary_multiply.53, Euler_maruyama_solver.py:107), Var($190binary_multiply.58, Euler_maruyama_solver.py:107)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state = getitem(value=dynamic_mem, index=$192build_slice.60, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $198load_global.62 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $200load_attr.63 = getattr(value=$198load_global.62, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $202load_attr.64 = getattr(value=$200load_attr.63, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $206load_deref.66 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt = call $202load_attr.64(func=$202load_attr.64, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($206load_deref.66, Euler_maruyama_solver.py:112))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $214load_global.69 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $216load_attr.70 = getattr(value=$214load_global.69, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $218load_attr.71 = getattr(value=$216load_attr.70, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $222load_deref.73 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_noise = call $218load_attr.71(func=$218load_attr.71, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($222load_deref.73, Euler_maruyama_solver.py:116))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $230load_global.76 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $232load_attr.77 = getattr(value=$230load_global.76, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $234load_attr.78 = getattr(value=$232load_attr.77, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $238load_deref.80 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants = call $234load_attr.78(func=$234load_attr.78, args=[], kws=[('shape', Var(litconstantslength, Euler_maruyama_solver.py:102)), ('dtype', Var($238load_deref.80, Euler_maruyama_solver.py:120))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $246load_global.83 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $248load_attr.84 = getattr(value=$246load_global.83, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $250load_method.85 = getattr(value=$248load_attr.84, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_sigmas = call $250load_method.85(noise_sigmas, func=$250load_method.85, args=[Var(noise_sigmas, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $258load_global.88 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $260load_attr.89 = getattr(value=$258load_global.88, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $262load_method.90 = getattr(value=$260load_attr.89, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_RNG = call $262load_method.90(RNG, func=$262load_method.90, args=[Var(RNG, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $270load_global.93 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $272load_attr.94 = getattr(value=$270load_global.93, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $274load_method.95 = getattr(value=$272load_attr.94, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_filtercoefficients = call $274load_method.95(filtercoeffs, func=$274load_method.95, args=[Var(filtercoeffs, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $282load_global.98 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $284load_global.99 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $288call_function.101 = call $284load_global.99(constants, func=$284load_global.99, args=[Var(constants, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $290call_function.102 = call $282load_global.98($288call_function.101, func=$282load_global.98, args=[Var($288call_function.101, Euler_maruyama_solver.py:125)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $292get_iter.103 = getiter(value=$290call_function.102)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi294.0 = $292get_iter.103
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 294
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.1 = iternext(value=$phi294.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.2 = pair_first(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.3 = pair_second(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi296.1 = $294for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $294for_iter.3, 296, 314
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 296
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi296.1
07/23/2024 06:57:04 PM - DEBUG - first assign: i
07/23/2024 06:57:04 PM - DEBUG - replaced with: i = $phi296.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $302binary_subscr.4 = getitem(value=constants, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[i] = $302binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 314
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $314load_global.0 = global(enumerate: <class 'enumerate'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $318call_function.2 = call $314load_global.0(grid_indices, func=$314load_global.0, args=[Var(grid_indices, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $320get_iter.3 = getiter(value=$318call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi322.0 = $320get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 322
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.1 = iternext(value=$phi322.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.2 = pair_first(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.3 = pair_second(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi324.1 = $322for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $322for_iter.3, 324, 350
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 324
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.4 = exhaust_iter(value=$phi324.1, count=2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.2 = static_getitem(value=$324unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.3 = static_getitem(value=$324unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $324unpack_sequence.2
07/23/2024 06:57:04 PM - DEBUG - replaced with: i.1 = $324unpack_sequence.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: index = $324unpack_sequence.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i, Euler_maruyama_solver.py:125)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: $338binary_subscr.9 = getitem(value=grid_values, index=$336build_tuple.8, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[index] = $338binary_subscr.9
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 350
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $350load_global.0 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $352load_global.1 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $354call_function.2 = call $350load_global.0($352load_global.1, func=$350load_global.0, args=[Var($352load_global.1, Euler_maruyama_solver.py:132)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $356get_iter.3 = getiter(value=$354call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi358.0 = $356get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 358
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.1 = iternext(value=$phi358.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.2 = pair_first(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.3 = pair_second(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi360.1 = $358for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $358for_iter.3, 360, 406
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 360
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi360.1
07/23/2024 06:57:04 PM - DEBUG - replaced with: i.2 = $phi360.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $366binary_subscr.4 = getitem(value=inits, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $372load_global.7 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $374binary_multiply.8 = tx * $372load_global.7
07/23/2024 06:57:04 PM - DEBUG - on stmt: $378binary_add.10 = $374binary_multiply.8 + i
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state[$378binary_add.10] = $366binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: $382load_deref.11 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const384.12 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $386call_function.13 = call $382load_deref.11($const384.12, func=$382load_deref.11, args=[Var($const384.12, Euler_maruyama_solver.py:134)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $392load_global.16 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $394binary_multiply.17 = tx * $392load_global.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: $398binary_add.19 = $394binary_multiply.17 + i
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$398binary_add.19] = $386call_function.13
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 406
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $406load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const408.1 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $410call_function.2 = call $406load_deref.0($const408.1, func=$406load_deref.0, args=[Var($const408.1, Euler_maruyama_solver.py:136)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const414.4 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const416.5 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.6 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.7 = call $418build_slice.6($const414.4, $const416.5, func=$418build_slice.6, args=(Var($const414.4, Euler_maruyama_solver.py:136), Var($const416.5, Euler_maruyama_solver.py:136)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt[slice(None, None, None)] = $410call_function.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: $422load_deref.8 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const424.9 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $430load_global.11 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $436binary_add.14 = l_n_outer + l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $438call_function.15 = call $430load_global.11($436binary_add.14, func=$430load_global.11, args=[Var($436binary_add.14, Euler_maruyama_solver.py:140)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $440get_iter.16 = getiter(value=$438call_function.15)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi444.0 = $440get_iter.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 442
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 444
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 444
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.1 = iternext(value=$phi444.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.2 = pair_first(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.3 = pair_second(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi446.1 = $444for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $444for_iter.3, 446, 820
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 446
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi446.1
07/23/2024 06:57:04 PM - DEBUG - replaced with: i.3 = $phi446.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $448load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $452call_function.4 = call $448load_global.2(l_ds_rate, func=$448load_global.2, args=[Var(l_ds_rate, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $454get_iter.5 = getiter(value=$452call_function.4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi456.1 = $454get_iter.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 456
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.2 = iternext(value=$phi456.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.3 = pair_first(value=$456for_iter.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.4 = pair_second(value=$456for_iter.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi458.2 = $456for_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $456for_iter.4, 458, 624
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 458
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: j = $phi458.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: $464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_t = $464inplace_add.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: $468load_deref.6 = freevar(get_noise: CUDADispatcher(<function get_noise_64 at 0x000001EE06FAE8B0>))
07/23/2024 06:57:04 PM - DEBUG - on stmt: $478call_function.11 = call $468load_deref.6(l_noise, c_sigmas, l_param_set, c_RNG, func=$468load_deref.6, args=[Var(l_noise, Euler_maruyama_solver.py:114), Var(c_sigmas, Euler_maruyama_solver.py:122), Var(l_param_set, Euler_maruyama_solver.py:88), Var(c_RNG, Euler_maruyama_solver.py:123)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: filtercoeff = getitem(value=c_filtercoefficients, index=j, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $490load_deref.15 = freevar(dxdtfunc: CUDADispatcher(<function diffeq_system.__init__.<locals>.dxdtfunc at 0x000001EE089EE430>))
07/23/2024 06:57:04 PM - DEBUG - on stmt: $500binary_multiply.20 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $506binary_multiply.23 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const508.24 = const(int, 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $510binary_add.25 = $506binary_multiply.23 + $const508.24
07/23/2024 06:57:04 PM - DEBUG - on stmt: $512build_slice.26 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $512build_slice.27 = call $512build_slice.26($500binary_multiply.20, $510binary_add.25, func=$512build_slice.26, args=(Var($500binary_multiply.20, Euler_maruyama_solver.py:157), Var($510binary_add.25, Euler_maruyama_solver.py:157)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $514binary_subscr.28 = getitem(value=s_state, index=$512build_slice.27, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $524load_global.32 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $528call_function.34 = call $524load_global.32(litstates, func=$524load_global.32, args=[Var(litstates, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $530get_iter.35 = getiter(value=$528call_function.34)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi532.2 = $530get_iter.35
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 532
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.3 = iternext(value=$phi532.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.4 = pair_first(value=$532for_iter.3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.5 = pair_second(value=$532for_iter.3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi534.3 = $532for_iter.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $532for_iter.5, 534, 620
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 534
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: k = $phi534.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $542binary_multiply.7 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $546binary_add.9 = $542binary_multiply.7 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $550binary_subscr.12 = getitem(value=s_state, index=$546binary_add.9, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $556binary_subscr.15 = getitem(value=l_dxdt, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $560binary_multiply.17 = $556binary_subscr.15 * l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $566binary_subscr.20 = getitem(value=l_noise, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $568binary_add.21 = $560binary_multiply.17 + $566binary_subscr.20
07/23/2024 06:57:04 PM - DEBUG - on stmt: $570inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$550binary_subscr.12, rhs=$568binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state[$546binary_add.9] = $570inplace_add.22
07/23/2024 06:57:04 PM - DEBUG - on stmt: $582binary_multiply.26 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $586binary_add.28 = $582binary_multiply.26 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $590binary_subscr.31 = getitem(value=s_sums, index=$586binary_add.28, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $598binary_multiply.35 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $602binary_add.37 = $598binary_multiply.35 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $604binary_subscr.38 = getitem(value=s_state, index=$602binary_add.37, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $608binary_multiply.40 = $604binary_subscr.38 * filtercoeff
07/23/2024 06:57:04 PM - DEBUG - on stmt: $610inplace_add.41 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$590binary_subscr.31, rhs=$608binary_multiply.40, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$586binary_add.28] = $610inplace_add.41
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 620
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 624
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const628.3 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $630binary_subtract.4 = l_warmup - $const628.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $632compare_op.5 = i > $630binary_subtract.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: bool636 = global(bool: <class 'bool'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $636pred = call bool636($632compare_op.5, func=bool636, args=(Var($632compare_op.5, Euler_maruyama_solver.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $636pred, 638, 788
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 638
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $644binary_multiply.4 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const646.5 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $648binary_add.6 = $644binary_multiply.4 + $const646.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: $650binary_subscr.7 = getitem(value=s_sums, index=$648binary_add.6, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $658binary_subtract.11 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const662.13 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $664build_tuple.14 = build_tuple(items=[Var($658binary_subtract.11, Euler_maruyama_solver.py:171), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const662.13, Euler_maruyama_solver.py:171)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$664build_tuple.14] = $650binary_subscr.7
07/23/2024 06:57:04 PM - DEBUG - on stmt: $674binary_multiply.18 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const676.19 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $678binary_add.20 = $674binary_multiply.18 + $const676.19
07/23/2024 06:57:04 PM - DEBUG - on stmt: $680binary_subscr.21 = getitem(value=s_sums, index=$678binary_add.20, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $688binary_subtract.25 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const692.27 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $694build_tuple.28 = build_tuple(items=[Var($688binary_subtract.25, Euler_maruyama_solver.py:172), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const692.27, Euler_maruyama_solver.py:172)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$694build_tuple.28] = $680binary_subscr.21
07/23/2024 06:57:04 PM - DEBUG - on stmt: $704binary_multiply.32 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const706.33 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $708binary_add.34 = $704binary_multiply.32 + $const706.33
07/23/2024 06:57:04 PM - DEBUG - on stmt: $710binary_subscr.35 = getitem(value=s_sums, index=$708binary_add.34, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $718binary_subtract.39 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const722.41 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $724build_tuple.42 = build_tuple(items=[Var($718binary_subtract.39, Euler_maruyama_solver.py:173), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const722.41, Euler_maruyama_solver.py:173)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$724build_tuple.42] = $710binary_subscr.35
07/23/2024 06:57:04 PM - DEBUG - on stmt: $734binary_multiply.46 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const736.47 = const(int, 3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $738binary_add.48 = $734binary_multiply.46 + $const736.47
07/23/2024 06:57:04 PM - DEBUG - on stmt: $740binary_subscr.49 = getitem(value=s_sums, index=$738binary_add.48, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $748binary_subtract.53 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const752.55 = const(int, 3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $754build_tuple.56 = build_tuple(items=[Var($748binary_subtract.53, Euler_maruyama_solver.py:174), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const752.55, Euler_maruyama_solver.py:174)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$754build_tuple.56] = $740binary_subscr.49
07/23/2024 06:57:04 PM - DEBUG - on stmt: $764binary_multiply.60 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const766.61 = const(int, 4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $768binary_add.62 = $764binary_multiply.60 + $const766.61
07/23/2024 06:57:04 PM - DEBUG - on stmt: $770binary_subscr.63 = getitem(value=s_sums, index=$768binary_add.62, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $778binary_subtract.67 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const782.69 = const(int, 4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $784build_tuple.70 = build_tuple(items=[Var($778binary_subtract.67, Euler_maruyama_solver.py:175), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const782.69, Euler_maruyama_solver.py:175)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$784build_tuple.70] = $770binary_subscr.63
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 788
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 788
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $788load_deref.1 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const790.2 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $792call_function.3 = call $788load_deref.1($const790.2, func=$788load_deref.1, args=[Var($const790.2, Euler_maruyama_solver.py:178)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $800binary_multiply.7 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $806binary_multiply.10 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const808.11 = const(int, 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $810binary_add.12 = $806binary_multiply.10 + $const808.11
07/23/2024 06:57:04 PM - DEBUG - on stmt: $812build_slice.13 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $812build_slice.14 = call $812build_slice.13($800binary_multiply.7, $810binary_add.12, func=$812build_slice.13, args=(Var($800binary_multiply.7, Euler_maruyama_solver.py:178), Var($810binary_add.12, Euler_maruyama_solver.py:178)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$812build_slice.14] = $792call_function.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 820
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const820.0 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $822return_value.1 = cast(value=$const820.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: return $822return_value.1
07/23/2024 06:57:04 PM - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {296: [<numba.core.ir.Assign object at 0x000001EE15D2C9D0>],
             324: [<numba.core.ir.Assign object at 0x000001EE15D2C220>],
             360: [<numba.core.ir.Assign object at 0x000001EE15D2C7F0>],
             446: [<numba.core.ir.Assign object at 0x000001EE15D2C490>]})
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: xblocksize = arg(0, name=xblocksize)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output = arg(1, name=output)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_values = arg(2, name=grid_values)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_indices = arg(3, name=grid_indices)
07/23/2024 06:57:04 PM - DEBUG - on stmt: constants = arg(4, name=constants)
07/23/2024 06:57:04 PM - DEBUG - on stmt: inits = arg(5, name=inits)
07/23/2024 06:57:04 PM - DEBUG - on stmt: step_size = arg(6, name=step_size)
07/23/2024 06:57:04 PM - DEBUG - on stmt: duration = arg(7, name=duration)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output_fs = arg(8, name=output_fs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: filtercoeffs = arg(9, name=filtercoeffs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: RNG = arg(10, name=RNG)
07/23/2024 06:57:04 PM - DEBUG - on stmt: noise_sigmas = arg(11, name=noise_sigmas)
07/23/2024 06:57:04 PM - DEBUG - on stmt: warmup_time = arg(12, name=warmup_time)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $2load_global.0 = global(int16: int16)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=threadIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $8load_attr.3 = getattr(value=$6load_attr.2, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: tx = call $2load_global.0($8load_attr.3, func=$2load_global.0, args=[Var($8load_attr.3, Euler_maruyama_solver.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $14load_global.5 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $16load_global.6 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=blockIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $20load_attr.8 = getattr(value=$18load_attr.7, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: block_index = call $14load_global.5($20load_attr.8, func=$14load_global.5, args=[Var($20load_attr.8, Euler_maruyama_solver.py:87)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $26load_global.10 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $32binary_multiply.13 = xblocksize * block_index
07/23/2024 06:57:04 PM - DEBUG - on stmt: $36binary_add.15 = $32binary_multiply.13 + tx
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_param_set = call $26load_global.10($36binary_add.15, func=$26load_global.10, args=[Var($36binary_add.15, Euler_maruyama_solver.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $44load_global.18 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $48call_function.20 = call $44load_global.18(grid_values, func=$44load_global.18, args=[Var(grid_values, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $50compare_op.21 = l_param_set >= $48call_function.20
07/23/2024 06:57:04 PM - DEBUG - on stmt: bool52 = global(bool: <class 'bool'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $52pred = call bool52($50compare_op.21, func=bool52, args=(Var($50compare_op.21, Euler_maruyama_solver.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $52pred, 54, 58
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 54
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 58
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $58load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_step_size = call $58load_deref.0(step_size, func=$58load_deref.0, args=[Var(step_size, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $66load_global.3 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $68load_global.4 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const70.5 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $76binary_multiply.8 = output_fs * l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $78binary_true_divide.9 = $const70.5 / $76binary_multiply.8
07/23/2024 06:57:04 PM - DEBUG - on stmt: $80call_function.10 = call $68load_global.4($78binary_true_divide.9, func=$68load_global.4, args=[Var($78binary_true_divide.9, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_ds_rate = call $66load_global.3($80call_function.10, func=$66load_global.3, args=[Var($80call_function.10, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $86load_global.12 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $88load_global.13 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $94binary_true_divide.16 = duration / l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $98binary_true_divide.18 = $94binary_true_divide.16 / l_ds_rate
07/23/2024 06:57:04 PM - DEBUG - on stmt: $100call_function.19 = call $88load_global.13($98binary_true_divide.18, func=$88load_global.13, args=[Var($98binary_true_divide.18, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_n_outer = call $86load_global.12($100call_function.19, func=$86load_global.12, args=[Var($100call_function.19, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $106load_global.21 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $112binary_multiply.24 = warmup_time * output_fs
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_warmup = call $106load_global.21($112binary_multiply.24, func=$106load_global.21, args=[Var($112binary_multiply.24, Euler_maruyama_solver.py:98)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $118load_global.26 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $120load_global.27 = global(zero: 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litzero = call $118load_global.26($120load_global.27, func=$118load_global.26, args=[Var($120load_global.27, Euler_maruyama_solver.py:100)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $126load_global.29 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $128load_global.30 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litstates = call $126load_global.29($128load_global.30, func=$126load_global.29, args=[Var($128load_global.30, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $134load_global.32 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $136load_global.33 = global(constants_length: 14)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litconstantslength = call $134load_global.32($136load_global.33, func=$134load_global.32, args=[Var($136load_global.33, Euler_maruyama_solver.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $142load_global.35 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $144load_attr.36 = getattr(value=$142load_global.35, attr=shared)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $146load_attr.37 = getattr(value=$144load_attr.36, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $150load_deref.39 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: dynamic_mem = call $146load_attr.37(litzero, func=$146load_attr.37, args=[Var(litzero, Euler_maruyama_solver.py:100)], kws=[('dtype', Var($150load_deref.39, Euler_maruyama_solver.py:105))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const160.43 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $164load_global.45 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $166binary_multiply.46 = xblocksize * $164load_global.45
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.47 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.48 = call $168build_slice.47($const160.43, $166binary_multiply.46, func=$168build_slice.47, args=(Var($const160.43, Euler_maruyama_solver.py:106), Var($166binary_multiply.46, Euler_maruyama_solver.py:106)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums = getitem(value=dynamic_mem, index=$168build_slice.48, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $178load_global.52 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $180binary_multiply.53 = xblocksize * $178load_global.52
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const182.54 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $186binary_multiply.56 = $const182.54 * xblocksize
07/23/2024 06:57:04 PM - DEBUG - on stmt: $188load_global.57 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $190binary_multiply.58 = $186binary_multiply.56 * $188load_global.57
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.59 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.60 = call $192build_slice.59($180binary_multiply.53, $190binary_multiply.58, func=$192build_slice.59, args=(Var($180binary_multiply.53, Euler_maruyama_solver.py:107), Var($190binary_multiply.58, Euler_maruyama_solver.py:107)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state = getitem(value=dynamic_mem, index=$192build_slice.60, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $198load_global.62 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $200load_attr.63 = getattr(value=$198load_global.62, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $202load_attr.64 = getattr(value=$200load_attr.63, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $206load_deref.66 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt = call $202load_attr.64(func=$202load_attr.64, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($206load_deref.66, Euler_maruyama_solver.py:112))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $214load_global.69 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $216load_attr.70 = getattr(value=$214load_global.69, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $218load_attr.71 = getattr(value=$216load_attr.70, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $222load_deref.73 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_noise = call $218load_attr.71(func=$218load_attr.71, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($222load_deref.73, Euler_maruyama_solver.py:116))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $230load_global.76 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $232load_attr.77 = getattr(value=$230load_global.76, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $234load_attr.78 = getattr(value=$232load_attr.77, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $238load_deref.80 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants = call $234load_attr.78(func=$234load_attr.78, args=[], kws=[('shape', Var(litconstantslength, Euler_maruyama_solver.py:102)), ('dtype', Var($238load_deref.80, Euler_maruyama_solver.py:120))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $246load_global.83 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $248load_attr.84 = getattr(value=$246load_global.83, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $250load_method.85 = getattr(value=$248load_attr.84, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_sigmas = call $250load_method.85(noise_sigmas, func=$250load_method.85, args=[Var(noise_sigmas, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $258load_global.88 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $260load_attr.89 = getattr(value=$258load_global.88, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $262load_method.90 = getattr(value=$260load_attr.89, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_RNG = call $262load_method.90(RNG, func=$262load_method.90, args=[Var(RNG, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $270load_global.93 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $272load_attr.94 = getattr(value=$270load_global.93, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $274load_method.95 = getattr(value=$272load_attr.94, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_filtercoefficients = call $274load_method.95(filtercoeffs, func=$274load_method.95, args=[Var(filtercoeffs, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $282load_global.98 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $284load_global.99 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $288call_function.101 = call $284load_global.99(constants, func=$284load_global.99, args=[Var(constants, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $290call_function.102 = call $282load_global.98($288call_function.101, func=$282load_global.98, args=[Var($288call_function.101, Euler_maruyama_solver.py:125)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $292get_iter.103 = getiter(value=$290call_function.102)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi294.0 = $292get_iter.103
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 294
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.1 = iternext(value=$phi294.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.2 = pair_first(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.3 = pair_second(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi296.1 = $294for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $294for_iter.3, 296, 314
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 296
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi296.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $302binary_subscr.4 = getitem(value=constants, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$302binary_subscr.4 = getitem(value=constants, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[i] = $302binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=l_constants[i] = $302binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 314
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $314load_global.0 = global(enumerate: <class 'enumerate'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $318call_function.2 = call $314load_global.0(grid_indices, func=$314load_global.0, args=[Var(grid_indices, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $320get_iter.3 = getiter(value=$318call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi322.0 = $320get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 322
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.1 = iternext(value=$phi322.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.2 = pair_first(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.3 = pair_second(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi324.1 = $322for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $322for_iter.3, 324, 350
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 324
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.4 = exhaust_iter(value=$phi324.1, count=2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.2 = static_getitem(value=$324unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.3 = static_getitem(value=$324unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: i.1 = $324unpack_sequence.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: index = $324unpack_sequence.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i, Euler_maruyama_solver.py:125)])
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i, Euler_maruyama_solver.py:125)])
07/23/2024 06:57:04 PM - DEBUG - replaced with: $336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i.1, Euler_maruyama_solver.py:128)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: $338binary_subscr.9 = getitem(value=grid_values, index=$336build_tuple.8, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[index] = $338binary_subscr.9
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 350
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $350load_global.0 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $352load_global.1 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $354call_function.2 = call $350load_global.0($352load_global.1, func=$350load_global.0, args=[Var($352load_global.1, Euler_maruyama_solver.py:132)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $356get_iter.3 = getiter(value=$354call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi358.0 = $356get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 358
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.1 = iternext(value=$phi358.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.2 = pair_first(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.3 = pair_second(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi360.1 = $358for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $358for_iter.3, 360, 406
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 360
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i.2 = $phi360.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $366binary_subscr.4 = getitem(value=inits, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$366binary_subscr.4 = getitem(value=inits, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - replaced with: $366binary_subscr.4 = getitem(value=inits, index=i.2, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $372load_global.7 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $374binary_multiply.8 = tx * $372load_global.7
07/23/2024 06:57:04 PM - DEBUG - on stmt: $378binary_add.10 = $374binary_multiply.8 + i
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$378binary_add.10 = $374binary_multiply.8 + i
07/23/2024 06:57:04 PM - DEBUG - replaced with: $378binary_add.10 = $374binary_multiply.8 + i.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state[$378binary_add.10] = $366binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: $382load_deref.11 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const384.12 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $386call_function.13 = call $382load_deref.11($const384.12, func=$382load_deref.11, args=[Var($const384.12, Euler_maruyama_solver.py:134)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $392load_global.16 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $394binary_multiply.17 = tx * $392load_global.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: $398binary_add.19 = $394binary_multiply.17 + i
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$398binary_add.19 = $394binary_multiply.17 + i
07/23/2024 06:57:04 PM - DEBUG - replaced with: $398binary_add.19 = $394binary_multiply.17 + i.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$398binary_add.19] = $386call_function.13
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 406
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $406load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const408.1 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $410call_function.2 = call $406load_deref.0($const408.1, func=$406load_deref.0, args=[Var($const408.1, Euler_maruyama_solver.py:136)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const414.4 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const416.5 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.6 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.7 = call $418build_slice.6($const414.4, $const416.5, func=$418build_slice.6, args=(Var($const414.4, Euler_maruyama_solver.py:136), Var($const416.5, Euler_maruyama_solver.py:136)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt[slice(None, None, None)] = $410call_function.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: $422load_deref.8 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const424.9 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $430load_global.11 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $436binary_add.14 = l_n_outer + l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $438call_function.15 = call $430load_global.11($436binary_add.14, func=$430load_global.11, args=[Var($436binary_add.14, Euler_maruyama_solver.py:140)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $440get_iter.16 = getiter(value=$438call_function.15)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi444.0 = $440get_iter.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 442
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 444
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 444
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.1 = iternext(value=$phi444.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.2 = pair_first(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.3 = pair_second(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi446.1 = $444for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $444for_iter.3, 446, 820
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 446
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i.3 = $phi446.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $448load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $452call_function.4 = call $448load_global.2(l_ds_rate, func=$448load_global.2, args=[Var(l_ds_rate, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $454get_iter.5 = getiter(value=$452call_function.4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi456.1 = $454get_iter.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 456
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.2 = iternext(value=$phi456.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.3 = pair_first(value=$456for_iter.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.4 = pair_second(value=$456for_iter.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi458.2 = $456for_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $456for_iter.4, 458, 624
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 458
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: j = $phi458.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: $464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_t = $464inplace_add.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: $468load_deref.6 = freevar(get_noise: CUDADispatcher(<function get_noise_64 at 0x000001EE06FAE8B0>))
07/23/2024 06:57:04 PM - DEBUG - on stmt: $478call_function.11 = call $468load_deref.6(l_noise, c_sigmas, l_param_set, c_RNG, func=$468load_deref.6, args=[Var(l_noise, Euler_maruyama_solver.py:114), Var(c_sigmas, Euler_maruyama_solver.py:122), Var(l_param_set, Euler_maruyama_solver.py:88), Var(c_RNG, Euler_maruyama_solver.py:123)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: filtercoeff = getitem(value=c_filtercoefficients, index=j, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $490load_deref.15 = freevar(dxdtfunc: CUDADispatcher(<function diffeq_system.__init__.<locals>.dxdtfunc at 0x000001EE089EE430>))
07/23/2024 06:57:04 PM - DEBUG - on stmt: $500binary_multiply.20 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $506binary_multiply.23 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const508.24 = const(int, 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $510binary_add.25 = $506binary_multiply.23 + $const508.24
07/23/2024 06:57:04 PM - DEBUG - on stmt: $512build_slice.26 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $512build_slice.27 = call $512build_slice.26($500binary_multiply.20, $510binary_add.25, func=$512build_slice.26, args=(Var($500binary_multiply.20, Euler_maruyama_solver.py:157), Var($510binary_add.25, Euler_maruyama_solver.py:157)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $514binary_subscr.28 = getitem(value=s_state, index=$512build_slice.27, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $524load_global.32 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $528call_function.34 = call $524load_global.32(litstates, func=$524load_global.32, args=[Var(litstates, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $530get_iter.35 = getiter(value=$528call_function.34)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi532.2 = $530get_iter.35
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 532
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.3 = iternext(value=$phi532.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.4 = pair_first(value=$532for_iter.3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $532for_iter.5 = pair_second(value=$532for_iter.3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi534.3 = $532for_iter.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $532for_iter.5, 534, 620
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 534
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: k = $phi534.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $542binary_multiply.7 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $546binary_add.9 = $542binary_multiply.7 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $550binary_subscr.12 = getitem(value=s_state, index=$546binary_add.9, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $556binary_subscr.15 = getitem(value=l_dxdt, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $560binary_multiply.17 = $556binary_subscr.15 * l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $566binary_subscr.20 = getitem(value=l_noise, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $568binary_add.21 = $560binary_multiply.17 + $566binary_subscr.20
07/23/2024 06:57:04 PM - DEBUG - on stmt: $570inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$550binary_subscr.12, rhs=$568binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state[$546binary_add.9] = $570inplace_add.22
07/23/2024 06:57:04 PM - DEBUG - on stmt: $582binary_multiply.26 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $586binary_add.28 = $582binary_multiply.26 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $590binary_subscr.31 = getitem(value=s_sums, index=$586binary_add.28, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $598binary_multiply.35 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $602binary_add.37 = $598binary_multiply.35 + k
07/23/2024 06:57:04 PM - DEBUG - on stmt: $604binary_subscr.38 = getitem(value=s_state, index=$602binary_add.37, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $608binary_multiply.40 = $604binary_subscr.38 * filtercoeff
07/23/2024 06:57:04 PM - DEBUG - on stmt: $610inplace_add.41 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$590binary_subscr.31, rhs=$608binary_multiply.40, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$586binary_add.28] = $610inplace_add.41
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 620
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 624
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const628.3 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $630binary_subtract.4 = l_warmup - $const628.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $632compare_op.5 = i > $630binary_subtract.4
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$632compare_op.5 = i > $630binary_subtract.4
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 624
07/23/2024 06:57:04 PM - DEBUG - idom 456 from label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 456
07/23/2024 06:57:04 PM - DEBUG - idom 446 from label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 446
07/23/2024 06:57:04 PM - DEBUG - replaced with: $632compare_op.5 = i.3 > $630binary_subtract.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: bool636 = global(bool: <class 'bool'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $636pred = call bool636($632compare_op.5, func=bool636, args=(Var($632compare_op.5, Euler_maruyama_solver.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $636pred, 638, 788
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 638
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $644binary_multiply.4 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const646.5 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $648binary_add.6 = $644binary_multiply.4 + $const646.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: $650binary_subscr.7 = getitem(value=s_sums, index=$648binary_add.6, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $658binary_subtract.11 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$658binary_subtract.11 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 638
07/23/2024 06:57:04 PM - DEBUG - idom 624 from label 638
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 624
07/23/2024 06:57:04 PM - DEBUG - idom 456 from label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 456
07/23/2024 06:57:04 PM - DEBUG - idom 446 from label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 446
07/23/2024 06:57:04 PM - DEBUG - replaced with: $658binary_subtract.11 = i.3 - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const662.13 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $664build_tuple.14 = build_tuple(items=[Var($658binary_subtract.11, Euler_maruyama_solver.py:171), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const662.13, Euler_maruyama_solver.py:171)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$664build_tuple.14] = $650binary_subscr.7
07/23/2024 06:57:04 PM - DEBUG - on stmt: $674binary_multiply.18 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const676.19 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $678binary_add.20 = $674binary_multiply.18 + $const676.19
07/23/2024 06:57:04 PM - DEBUG - on stmt: $680binary_subscr.21 = getitem(value=s_sums, index=$678binary_add.20, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $688binary_subtract.25 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$688binary_subtract.25 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 638
07/23/2024 06:57:04 PM - DEBUG - idom 624 from label 638
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 624
07/23/2024 06:57:04 PM - DEBUG - idom 456 from label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 456
07/23/2024 06:57:04 PM - DEBUG - idom 446 from label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 446
07/23/2024 06:57:04 PM - DEBUG - replaced with: $688binary_subtract.25 = i.3 - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const692.27 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $694build_tuple.28 = build_tuple(items=[Var($688binary_subtract.25, Euler_maruyama_solver.py:172), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const692.27, Euler_maruyama_solver.py:172)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$694build_tuple.28] = $680binary_subscr.21
07/23/2024 06:57:04 PM - DEBUG - on stmt: $704binary_multiply.32 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const706.33 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $708binary_add.34 = $704binary_multiply.32 + $const706.33
07/23/2024 06:57:04 PM - DEBUG - on stmt: $710binary_subscr.35 = getitem(value=s_sums, index=$708binary_add.34, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $718binary_subtract.39 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$718binary_subtract.39 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 638
07/23/2024 06:57:04 PM - DEBUG - idom 624 from label 638
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 624
07/23/2024 06:57:04 PM - DEBUG - idom 456 from label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 456
07/23/2024 06:57:04 PM - DEBUG - idom 446 from label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 446
07/23/2024 06:57:04 PM - DEBUG - replaced with: $718binary_subtract.39 = i.3 - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const722.41 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $724build_tuple.42 = build_tuple(items=[Var($718binary_subtract.39, Euler_maruyama_solver.py:173), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const722.41, Euler_maruyama_solver.py:173)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$724build_tuple.42] = $710binary_subscr.35
07/23/2024 06:57:04 PM - DEBUG - on stmt: $734binary_multiply.46 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const736.47 = const(int, 3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $738binary_add.48 = $734binary_multiply.46 + $const736.47
07/23/2024 06:57:04 PM - DEBUG - on stmt: $740binary_subscr.49 = getitem(value=s_sums, index=$738binary_add.48, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $748binary_subtract.53 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$748binary_subtract.53 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 638
07/23/2024 06:57:04 PM - DEBUG - idom 624 from label 638
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 624
07/23/2024 06:57:04 PM - DEBUG - idom 456 from label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 456
07/23/2024 06:57:04 PM - DEBUG - idom 446 from label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 446
07/23/2024 06:57:04 PM - DEBUG - replaced with: $748binary_subtract.53 = i.3 - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const752.55 = const(int, 3)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $754build_tuple.56 = build_tuple(items=[Var($748binary_subtract.53, Euler_maruyama_solver.py:174), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const752.55, Euler_maruyama_solver.py:174)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$754build_tuple.56] = $740binary_subscr.49
07/23/2024 06:57:04 PM - DEBUG - on stmt: $764binary_multiply.60 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const766.61 = const(int, 4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $768binary_add.62 = $764binary_multiply.60 + $const766.61
07/23/2024 06:57:04 PM - DEBUG - on stmt: $770binary_subscr.63 = getitem(value=s_sums, index=$768binary_add.62, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $778binary_subtract.67 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def var='i' stmt=$778binary_subtract.67 = i - l_warmup
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 638
07/23/2024 06:57:04 PM - DEBUG - idom 624 from label 638
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 624
07/23/2024 06:57:04 PM - DEBUG - idom 456 from label 624
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_top label 456
07/23/2024 06:57:04 PM - DEBUG - idom 446 from label 456
07/23/2024 06:57:04 PM - DEBUG - find_def_from_bottom label 446
07/23/2024 06:57:04 PM - DEBUG - replaced with: $778binary_subtract.67 = i.3 - l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const782.69 = const(int, 4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $784build_tuple.70 = build_tuple(items=[Var($778binary_subtract.67, Euler_maruyama_solver.py:175), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const782.69, Euler_maruyama_solver.py:175)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: output[$784build_tuple.70] = $770binary_subscr.63
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 788
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 788
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $788load_deref.1 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const790.2 = const(int, 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $792call_function.3 = call $788load_deref.1($const790.2, func=$788load_deref.1, args=[Var($const790.2, Euler_maruyama_solver.py:178)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $800binary_multiply.7 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $806binary_multiply.10 = tx * litstates
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const808.11 = const(int, 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $810binary_add.12 = $806binary_multiply.10 + $const808.11
07/23/2024 06:57:04 PM - DEBUG - on stmt: $812build_slice.13 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $812build_slice.14 = call $812build_slice.13($800binary_multiply.7, $810binary_add.12, func=$812build_slice.13, args=(Var($800binary_multiply.7, Euler_maruyama_solver.py:178), Var($810binary_add.12, Euler_maruyama_solver.py:178)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$812build_slice.14] = $792call_function.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 820
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2C0D0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const820.0 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $822return_value.1 = cast(value=$const820.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: return $822return_value.1
07/23/2024 06:57:04 PM - DEBUG - Fix SSA violator on var l_t
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: xblocksize = arg(0, name=xblocksize)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output = arg(1, name=output)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_values = arg(2, name=grid_values)
07/23/2024 06:57:04 PM - DEBUG - on stmt: grid_indices = arg(3, name=grid_indices)
07/23/2024 06:57:04 PM - DEBUG - on stmt: constants = arg(4, name=constants)
07/23/2024 06:57:04 PM - DEBUG - on stmt: inits = arg(5, name=inits)
07/23/2024 06:57:04 PM - DEBUG - on stmt: step_size = arg(6, name=step_size)
07/23/2024 06:57:04 PM - DEBUG - on stmt: duration = arg(7, name=duration)
07/23/2024 06:57:04 PM - DEBUG - on stmt: output_fs = arg(8, name=output_fs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: filtercoeffs = arg(9, name=filtercoeffs)
07/23/2024 06:57:04 PM - DEBUG - on stmt: RNG = arg(10, name=RNG)
07/23/2024 06:57:04 PM - DEBUG - on stmt: noise_sigmas = arg(11, name=noise_sigmas)
07/23/2024 06:57:04 PM - DEBUG - on stmt: warmup_time = arg(12, name=warmup_time)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $2load_global.0 = global(int16: int16)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=threadIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $8load_attr.3 = getattr(value=$6load_attr.2, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: tx = call $2load_global.0($8load_attr.3, func=$2load_global.0, args=[Var($8load_attr.3, Euler_maruyama_solver.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $14load_global.5 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $16load_global.6 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=blockIdx)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $20load_attr.8 = getattr(value=$18load_attr.7, attr=x)
07/23/2024 06:57:04 PM - DEBUG - on stmt: block_index = call $14load_global.5($20load_attr.8, func=$14load_global.5, args=[Var($20load_attr.8, Euler_maruyama_solver.py:87)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $26load_global.10 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $32binary_multiply.13 = xblocksize * block_index
07/23/2024 06:57:04 PM - DEBUG - on stmt: $36binary_add.15 = $32binary_multiply.13 + tx
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_param_set = call $26load_global.10($36binary_add.15, func=$26load_global.10, args=[Var($36binary_add.15, Euler_maruyama_solver.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $44load_global.18 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $48call_function.20 = call $44load_global.18(grid_values, func=$44load_global.18, args=[Var(grid_values, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $50compare_op.21 = l_param_set >= $48call_function.20
07/23/2024 06:57:04 PM - DEBUG - on stmt: bool52 = global(bool: <class 'bool'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $52pred = call bool52($50compare_op.21, func=bool52, args=(Var($50compare_op.21, Euler_maruyama_solver.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $52pred, 54, 58
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 54
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 58
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $58load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_step_size = call $58load_deref.0(step_size, func=$58load_deref.0, args=[Var(step_size, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $66load_global.3 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $68load_global.4 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const70.5 = const(int, 1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $76binary_multiply.8 = output_fs * l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $78binary_true_divide.9 = $const70.5 / $76binary_multiply.8
07/23/2024 06:57:04 PM - DEBUG - on stmt: $80call_function.10 = call $68load_global.4($78binary_true_divide.9, func=$68load_global.4, args=[Var($78binary_true_divide.9, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_ds_rate = call $66load_global.3($80call_function.10, func=$66load_global.3, args=[Var($80call_function.10, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $86load_global.12 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $88load_global.13 = global(round: <built-in function round>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $94binary_true_divide.16 = duration / l_step_size
07/23/2024 06:57:04 PM - DEBUG - on stmt: $98binary_true_divide.18 = $94binary_true_divide.16 / l_ds_rate
07/23/2024 06:57:04 PM - DEBUG - on stmt: $100call_function.19 = call $88load_global.13($98binary_true_divide.18, func=$88load_global.13, args=[Var($98binary_true_divide.18, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_n_outer = call $86load_global.12($100call_function.19, func=$86load_global.12, args=[Var($100call_function.19, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $106load_global.21 = global(int32: int32)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $112binary_multiply.24 = warmup_time * output_fs
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_warmup = call $106load_global.21($112binary_multiply.24, func=$106load_global.21, args=[Var($112binary_multiply.24, Euler_maruyama_solver.py:98)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $118load_global.26 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $120load_global.27 = global(zero: 0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litzero = call $118load_global.26($120load_global.27, func=$118load_global.26, args=[Var($120load_global.27, Euler_maruyama_solver.py:100)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $126load_global.29 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $128load_global.30 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litstates = call $126load_global.29($128load_global.30, func=$126load_global.29, args=[Var($128load_global.30, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $134load_global.32 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $136load_global.33 = global(constants_length: 14)
07/23/2024 06:57:04 PM - DEBUG - on stmt: litconstantslength = call $134load_global.32($136load_global.33, func=$134load_global.32, args=[Var($136load_global.33, Euler_maruyama_solver.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $142load_global.35 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $144load_attr.36 = getattr(value=$142load_global.35, attr=shared)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $146load_attr.37 = getattr(value=$144load_attr.36, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $150load_deref.39 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: dynamic_mem = call $146load_attr.37(litzero, func=$146load_attr.37, args=[Var(litzero, Euler_maruyama_solver.py:100)], kws=[('dtype', Var($150load_deref.39, Euler_maruyama_solver.py:105))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const160.43 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $164load_global.45 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $166binary_multiply.46 = xblocksize * $164load_global.45
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.47 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $168build_slice.48 = call $168build_slice.47($const160.43, $166binary_multiply.46, func=$168build_slice.47, args=(Var($const160.43, Euler_maruyama_solver.py:106), Var($166binary_multiply.46, Euler_maruyama_solver.py:106)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums = getitem(value=dynamic_mem, index=$168build_slice.48, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $178load_global.52 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $180binary_multiply.53 = xblocksize * $178load_global.52
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const182.54 = const(int, 2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $186binary_multiply.56 = $const182.54 * xblocksize
07/23/2024 06:57:04 PM - DEBUG - on stmt: $188load_global.57 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $190binary_multiply.58 = $186binary_multiply.56 * $188load_global.57
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.59 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $192build_slice.60 = call $192build_slice.59($180binary_multiply.53, $190binary_multiply.58, func=$192build_slice.59, args=(Var($180binary_multiply.53, Euler_maruyama_solver.py:107), Var($190binary_multiply.58, Euler_maruyama_solver.py:107)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state = getitem(value=dynamic_mem, index=$192build_slice.60, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $198load_global.62 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $200load_attr.63 = getattr(value=$198load_global.62, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $202load_attr.64 = getattr(value=$200load_attr.63, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $206load_deref.66 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt = call $202load_attr.64(func=$202load_attr.64, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($206load_deref.66, Euler_maruyama_solver.py:112))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $214load_global.69 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $216load_attr.70 = getattr(value=$214load_global.69, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $218load_attr.71 = getattr(value=$216load_attr.70, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $222load_deref.73 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_noise = call $218load_attr.71(func=$218load_attr.71, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($222load_deref.73, Euler_maruyama_solver.py:116))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $230load_global.76 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $232load_attr.77 = getattr(value=$230load_global.76, attr=local)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $234load_attr.78 = getattr(value=$232load_attr.77, attr=array)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $238load_deref.80 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants = call $234load_attr.78(func=$234load_attr.78, args=[], kws=[('shape', Var(litconstantslength, Euler_maruyama_solver.py:102)), ('dtype', Var($238load_deref.80, Euler_maruyama_solver.py:120))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $246load_global.83 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $248load_attr.84 = getattr(value=$246load_global.83, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $250load_method.85 = getattr(value=$248load_attr.84, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_sigmas = call $250load_method.85(noise_sigmas, func=$250load_method.85, args=[Var(noise_sigmas, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $258load_global.88 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $260load_attr.89 = getattr(value=$258load_global.88, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $262load_method.90 = getattr(value=$260load_attr.89, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_RNG = call $262load_method.90(RNG, func=$262load_method.90, args=[Var(RNG, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $270load_global.93 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $272load_attr.94 = getattr(value=$270load_global.93, attr=const)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $274load_method.95 = getattr(value=$272load_attr.94, attr=array_like)
07/23/2024 06:57:04 PM - DEBUG - on stmt: c_filtercoefficients = call $274load_method.95(filtercoeffs, func=$274load_method.95, args=[Var(filtercoeffs, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $282load_global.98 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $284load_global.99 = global(len: <built-in function len>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $288call_function.101 = call $284load_global.99(constants, func=$284load_global.99, args=[Var(constants, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $290call_function.102 = call $282load_global.98($288call_function.101, func=$282load_global.98, args=[Var($288call_function.101, Euler_maruyama_solver.py:125)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $292get_iter.103 = getiter(value=$290call_function.102)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi294.0 = $292get_iter.103
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 294
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.1 = iternext(value=$phi294.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.2 = pair_first(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $294for_iter.3 = pair_second(value=$294for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi296.1 = $294for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $294for_iter.3, 296, 314
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 296
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i = $phi296.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $302binary_subscr.4 = getitem(value=constants, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[i] = $302binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 314
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $314load_global.0 = global(enumerate: <class 'enumerate'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $318call_function.2 = call $314load_global.0(grid_indices, func=$314load_global.0, args=[Var(grid_indices, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $320get_iter.3 = getiter(value=$318call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi322.0 = $320get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 322
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.1 = iternext(value=$phi322.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.2 = pair_first(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $322for_iter.3 = pair_second(value=$322for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi324.1 = $322for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $322for_iter.3, 324, 350
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 324
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.4 = exhaust_iter(value=$phi324.1, count=2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.2 = static_getitem(value=$324unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $324unpack_sequence.3 = static_getitem(value=$324unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: i.1 = $324unpack_sequence.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: index = $324unpack_sequence.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: $336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i.1, Euler_maruyama_solver.py:128)])
07/23/2024 06:57:04 PM - DEBUG - on stmt: $338binary_subscr.9 = getitem(value=grid_values, index=$336build_tuple.8, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_constants[index] = $338binary_subscr.9
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 350
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $350load_global.0 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $352load_global.1 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $354call_function.2 = call $350load_global.0($352load_global.1, func=$350load_global.0, args=[Var($352load_global.1, Euler_maruyama_solver.py:132)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $356get_iter.3 = getiter(value=$354call_function.2)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi358.0 = $356get_iter.3
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 358
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.1 = iternext(value=$phi358.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.2 = pair_first(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $358for_iter.3 = pair_second(value=$358for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi360.1 = $358for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $358for_iter.3, 360, 406
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 360
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i.2 = $phi360.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $366binary_subscr.4 = getitem(value=inits, index=i.2, fn=<built-in function getitem>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $372load_global.7 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $374binary_multiply.8 = tx * $372load_global.7
07/23/2024 06:57:04 PM - DEBUG - on stmt: $378binary_add.10 = $374binary_multiply.8 + i.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_state[$378binary_add.10] = $366binary_subscr.4
07/23/2024 06:57:04 PM - DEBUG - on stmt: $382load_deref.11 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const384.12 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $386call_function.13 = call $382load_deref.11($const384.12, func=$382load_deref.11, args=[Var($const384.12, Euler_maruyama_solver.py:134)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $392load_global.16 = global(nstates: 5)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $394binary_multiply.17 = tx * $392load_global.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: $398binary_add.19 = $394binary_multiply.17 + i.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: s_sums[$398binary_add.19] = $386call_function.13
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 406
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $406load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const408.1 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $410call_function.2 = call $406load_deref.0($const408.1, func=$406load_deref.0, args=[Var($const408.1, Euler_maruyama_solver.py:136)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const414.4 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const416.5 = const(NoneType, None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.6 = global(slice: <class 'slice'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $418build_slice.7 = call $418build_slice.6($const414.4, $const416.5, func=$418build_slice.6, args=(Var($const414.4, Euler_maruyama_solver.py:136), Var($const416.5, Euler_maruyama_solver.py:136)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_dxdt[slice(None, None, None)] = $410call_function.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: $422load_deref.8 = freevar(precision: float64)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $const424.9 = const(float, 0.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - first assign: l_t
07/23/2024 06:57:04 PM - DEBUG - replaced with: l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $430load_global.11 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $436binary_add.14 = l_n_outer + l_warmup
07/23/2024 06:57:04 PM - DEBUG - on stmt: $438call_function.15 = call $430load_global.11($436binary_add.14, func=$430load_global.11, args=[Var($436binary_add.14, Euler_maruyama_solver.py:140)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $440get_iter.16 = getiter(value=$438call_function.15)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi444.0 = $440get_iter.16
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 442
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 444
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 444
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.1 = iternext(value=$phi444.0)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.2 = pair_first(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $444for_iter.3 = pair_second(value=$444for_iter.1)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi446.1 = $444for_iter.2
07/23/2024 06:57:04 PM - DEBUG - on stmt: branch $444for_iter.3, 446, 820
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 446
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: i.3 = $phi446.1
07/23/2024 06:57:04 PM - DEBUG - on stmt: $448load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $452call_function.4 = call $448load_global.2(l_ds_rate, func=$448load_global.2, args=[Var(l_ds_rate, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $454get_iter.5 = getiter(value=$452call_function.4)
07/23/2024 06:57:04 PM - DEBUG - on stmt: $phi456.1 = $454get_iter.5
07/23/2024 06:57:04 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:04 PM - DEBUG - ==== SSA block rewrite pass on 456
07/23/2024 06:57:04 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:04 PM - DEBUG - on stmt: $456for_iter.2 = iternext(value=$phi456.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $456for_iter.3 = pair_first(value=$456for_iter.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $456for_iter.4 = pair_second(value=$456for_iter.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi458.2 = $456for_iter.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $456for_iter.4, 458, 624
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 458
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: j = $phi458.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: $464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_t = $464inplace_add.5
07/23/2024 06:57:05 PM - DEBUG - replaced with: l_t.1 = $464inplace_add.5
07/23/2024 06:57:05 PM - DEBUG - on stmt: $468load_deref.6 = freevar(get_noise: CUDADispatcher(<function get_noise_64 at 0x000001EE06FAE8B0>))
07/23/2024 06:57:05 PM - DEBUG - on stmt: $478call_function.11 = call $468load_deref.6(l_noise, c_sigmas, l_param_set, c_RNG, func=$468load_deref.6, args=[Var(l_noise, Euler_maruyama_solver.py:114), Var(c_sigmas, Euler_maruyama_solver.py:122), Var(l_param_set, Euler_maruyama_solver.py:88), Var(c_RNG, Euler_maruyama_solver.py:123)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: filtercoeff = getitem(value=c_filtercoefficients, index=j, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $490load_deref.15 = freevar(dxdtfunc: CUDADispatcher(<function diffeq_system.__init__.<locals>.dxdtfunc at 0x000001EE089EE430>))
07/23/2024 06:57:05 PM - DEBUG - on stmt: $500binary_multiply.20 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $506binary_multiply.23 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const508.24 = const(int, 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $510binary_add.25 = $506binary_multiply.23 + $const508.24
07/23/2024 06:57:05 PM - DEBUG - on stmt: $512build_slice.26 = global(slice: <class 'slice'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $512build_slice.27 = call $512build_slice.26($500binary_multiply.20, $510binary_add.25, func=$512build_slice.26, args=(Var($500binary_multiply.20, Euler_maruyama_solver.py:157), Var($510binary_add.25, Euler_maruyama_solver.py:157)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $514binary_subscr.28 = getitem(value=s_state, index=$512build_slice.27, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $524load_global.32 = global(range: <class 'range'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $528call_function.34 = call $524load_global.32(litstates, func=$524load_global.32, args=[Var(litstates, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $530get_iter.35 = getiter(value=$528call_function.34)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi532.2 = $530get_iter.35
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 532
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $532for_iter.3 = iternext(value=$phi532.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $532for_iter.4 = pair_first(value=$532for_iter.3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $532for_iter.5 = pair_second(value=$532for_iter.3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi534.3 = $532for_iter.4
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $532for_iter.5, 534, 620
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 534
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: k = $phi534.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: $542binary_multiply.7 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $546binary_add.9 = $542binary_multiply.7 + k
07/23/2024 06:57:05 PM - DEBUG - on stmt: $550binary_subscr.12 = getitem(value=s_state, index=$546binary_add.9, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $556binary_subscr.15 = getitem(value=l_dxdt, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $560binary_multiply.17 = $556binary_subscr.15 * l_step_size
07/23/2024 06:57:05 PM - DEBUG - on stmt: $566binary_subscr.20 = getitem(value=l_noise, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $568binary_add.21 = $560binary_multiply.17 + $566binary_subscr.20
07/23/2024 06:57:05 PM - DEBUG - on stmt: $570inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$550binary_subscr.12, rhs=$568binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_state[$546binary_add.9] = $570inplace_add.22
07/23/2024 06:57:05 PM - DEBUG - on stmt: $582binary_multiply.26 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $586binary_add.28 = $582binary_multiply.26 + k
07/23/2024 06:57:05 PM - DEBUG - on stmt: $590binary_subscr.31 = getitem(value=s_sums, index=$586binary_add.28, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $598binary_multiply.35 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $602binary_add.37 = $598binary_multiply.35 + k
07/23/2024 06:57:05 PM - DEBUG - on stmt: $604binary_subscr.38 = getitem(value=s_state, index=$602binary_add.37, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $608binary_multiply.40 = $604binary_subscr.38 * filtercoeff
07/23/2024 06:57:05 PM - DEBUG - on stmt: $610inplace_add.41 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$590binary_subscr.31, rhs=$608binary_multiply.40, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_sums[$586binary_add.28] = $610inplace_add.41
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 620
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 624
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const628.3 = const(int, 1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $630binary_subtract.4 = l_warmup - $const628.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: $632compare_op.5 = i.3 > $630binary_subtract.4
07/23/2024 06:57:05 PM - DEBUG - on stmt: bool636 = global(bool: <class 'bool'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $636pred = call bool636($632compare_op.5, func=bool636, args=(Var($632compare_op.5, Euler_maruyama_solver.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $636pred, 638, 788
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 638
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $644binary_multiply.4 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const646.5 = const(int, 0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $648binary_add.6 = $644binary_multiply.4 + $const646.5
07/23/2024 06:57:05 PM - DEBUG - on stmt: $650binary_subscr.7 = getitem(value=s_sums, index=$648binary_add.6, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $658binary_subtract.11 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const662.13 = const(int, 0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $664build_tuple.14 = build_tuple(items=[Var($658binary_subtract.11, Euler_maruyama_solver.py:171), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const662.13, Euler_maruyama_solver.py:171)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$664build_tuple.14] = $650binary_subscr.7
07/23/2024 06:57:05 PM - DEBUG - on stmt: $674binary_multiply.18 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const676.19 = const(int, 1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $678binary_add.20 = $674binary_multiply.18 + $const676.19
07/23/2024 06:57:05 PM - DEBUG - on stmt: $680binary_subscr.21 = getitem(value=s_sums, index=$678binary_add.20, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $688binary_subtract.25 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const692.27 = const(int, 1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $694build_tuple.28 = build_tuple(items=[Var($688binary_subtract.25, Euler_maruyama_solver.py:172), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const692.27, Euler_maruyama_solver.py:172)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$694build_tuple.28] = $680binary_subscr.21
07/23/2024 06:57:05 PM - DEBUG - on stmt: $704binary_multiply.32 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const706.33 = const(int, 2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $708binary_add.34 = $704binary_multiply.32 + $const706.33
07/23/2024 06:57:05 PM - DEBUG - on stmt: $710binary_subscr.35 = getitem(value=s_sums, index=$708binary_add.34, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $718binary_subtract.39 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const722.41 = const(int, 2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $724build_tuple.42 = build_tuple(items=[Var($718binary_subtract.39, Euler_maruyama_solver.py:173), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const722.41, Euler_maruyama_solver.py:173)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$724build_tuple.42] = $710binary_subscr.35
07/23/2024 06:57:05 PM - DEBUG - on stmt: $734binary_multiply.46 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const736.47 = const(int, 3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $738binary_add.48 = $734binary_multiply.46 + $const736.47
07/23/2024 06:57:05 PM - DEBUG - on stmt: $740binary_subscr.49 = getitem(value=s_sums, index=$738binary_add.48, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $748binary_subtract.53 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const752.55 = const(int, 3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $754build_tuple.56 = build_tuple(items=[Var($748binary_subtract.53, Euler_maruyama_solver.py:174), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const752.55, Euler_maruyama_solver.py:174)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$754build_tuple.56] = $740binary_subscr.49
07/23/2024 06:57:05 PM - DEBUG - on stmt: $764binary_multiply.60 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const766.61 = const(int, 4)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $768binary_add.62 = $764binary_multiply.60 + $const766.61
07/23/2024 06:57:05 PM - DEBUG - on stmt: $770binary_subscr.63 = getitem(value=s_sums, index=$768binary_add.62, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $778binary_subtract.67 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const782.69 = const(int, 4)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $784build_tuple.70 = build_tuple(items=[Var($778binary_subtract.67, Euler_maruyama_solver.py:175), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const782.69, Euler_maruyama_solver.py:175)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$784build_tuple.70] = $770binary_subscr.63
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 788
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 788
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $788load_deref.1 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const790.2 = const(int, 0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $792call_function.3 = call $788load_deref.1($const790.2, func=$788load_deref.1, args=[Var($const790.2, Euler_maruyama_solver.py:178)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $800binary_multiply.7 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $806binary_multiply.10 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const808.11 = const(int, 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $810binary_add.12 = $806binary_multiply.10 + $const808.11
07/23/2024 06:57:05 PM - DEBUG - on stmt: $812build_slice.13 = global(slice: <class 'slice'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $812build_slice.14 = call $812build_slice.13($800binary_multiply.7, $810binary_add.12, func=$812build_slice.13, args=(Var($800binary_multiply.7, Euler_maruyama_solver.py:178), Var($810binary_add.12, Euler_maruyama_solver.py:178)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_sums[$812build_slice.14] = $792call_function.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 820
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EE15D2CCA0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const820.0 = const(NoneType, None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $822return_value.1 = cast(value=$const820.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: return $822return_value.1
07/23/2024 06:57:05 PM - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {406: [<numba.core.ir.Assign object at 0x000001EE15D2C760>],
             458: [<numba.core.ir.Assign object at 0x000001EE15D2C1F0>]})
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 0
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: xblocksize = arg(0, name=xblocksize)
07/23/2024 06:57:05 PM - DEBUG - on stmt: output = arg(1, name=output)
07/23/2024 06:57:05 PM - DEBUG - on stmt: grid_values = arg(2, name=grid_values)
07/23/2024 06:57:05 PM - DEBUG - on stmt: grid_indices = arg(3, name=grid_indices)
07/23/2024 06:57:05 PM - DEBUG - on stmt: constants = arg(4, name=constants)
07/23/2024 06:57:05 PM - DEBUG - on stmt: inits = arg(5, name=inits)
07/23/2024 06:57:05 PM - DEBUG - on stmt: step_size = arg(6, name=step_size)
07/23/2024 06:57:05 PM - DEBUG - on stmt: duration = arg(7, name=duration)
07/23/2024 06:57:05 PM - DEBUG - on stmt: output_fs = arg(8, name=output_fs)
07/23/2024 06:57:05 PM - DEBUG - on stmt: filtercoeffs = arg(9, name=filtercoeffs)
07/23/2024 06:57:05 PM - DEBUG - on stmt: RNG = arg(10, name=RNG)
07/23/2024 06:57:05 PM - DEBUG - on stmt: noise_sigmas = arg(11, name=noise_sigmas)
07/23/2024 06:57:05 PM - DEBUG - on stmt: warmup_time = arg(12, name=warmup_time)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $2load_global.0 = global(int16: int16)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=threadIdx)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $8load_attr.3 = getattr(value=$6load_attr.2, attr=x)
07/23/2024 06:57:05 PM - DEBUG - on stmt: tx = call $2load_global.0($8load_attr.3, func=$2load_global.0, args=[Var($8load_attr.3, Euler_maruyama_solver.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $14load_global.5 = global(int32: int32)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $16load_global.6 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=blockIdx)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $20load_attr.8 = getattr(value=$18load_attr.7, attr=x)
07/23/2024 06:57:05 PM - DEBUG - on stmt: block_index = call $14load_global.5($20load_attr.8, func=$14load_global.5, args=[Var($20load_attr.8, Euler_maruyama_solver.py:87)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $26load_global.10 = global(int32: int32)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $32binary_multiply.13 = xblocksize * block_index
07/23/2024 06:57:05 PM - DEBUG - on stmt: $36binary_add.15 = $32binary_multiply.13 + tx
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_param_set = call $26load_global.10($36binary_add.15, func=$26load_global.10, args=[Var($36binary_add.15, Euler_maruyama_solver.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $44load_global.18 = global(len: <built-in function len>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $48call_function.20 = call $44load_global.18(grid_values, func=$44load_global.18, args=[Var(grid_values, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $50compare_op.21 = l_param_set >= $48call_function.20
07/23/2024 06:57:05 PM - DEBUG - on stmt: bool52 = global(bool: <class 'bool'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $52pred = call bool52($50compare_op.21, func=bool52, args=(Var($50compare_op.21, Euler_maruyama_solver.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $52pred, 54, 58
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 54
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 58
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $58load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_step_size = call $58load_deref.0(step_size, func=$58load_deref.0, args=[Var(step_size, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $66load_global.3 = global(int32: int32)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $68load_global.4 = global(round: <built-in function round>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const70.5 = const(int, 1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $76binary_multiply.8 = output_fs * l_step_size
07/23/2024 06:57:05 PM - DEBUG - on stmt: $78binary_true_divide.9 = $const70.5 / $76binary_multiply.8
07/23/2024 06:57:05 PM - DEBUG - on stmt: $80call_function.10 = call $68load_global.4($78binary_true_divide.9, func=$68load_global.4, args=[Var($78binary_true_divide.9, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_ds_rate = call $66load_global.3($80call_function.10, func=$66load_global.3, args=[Var($80call_function.10, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $86load_global.12 = global(int32: int32)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $88load_global.13 = global(round: <built-in function round>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $94binary_true_divide.16 = duration / l_step_size
07/23/2024 06:57:05 PM - DEBUG - on stmt: $98binary_true_divide.18 = $94binary_true_divide.16 / l_ds_rate
07/23/2024 06:57:05 PM - DEBUG - on stmt: $100call_function.19 = call $88load_global.13($98binary_true_divide.18, func=$88load_global.13, args=[Var($98binary_true_divide.18, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_n_outer = call $86load_global.12($100call_function.19, func=$86load_global.12, args=[Var($100call_function.19, Euler_maruyama_solver.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $106load_global.21 = global(int32: int32)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $112binary_multiply.24 = warmup_time * output_fs
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_warmup = call $106load_global.21($112binary_multiply.24, func=$106load_global.21, args=[Var($112binary_multiply.24, Euler_maruyama_solver.py:98)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $118load_global.26 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $120load_global.27 = global(zero: 0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: litzero = call $118load_global.26($120load_global.27, func=$118load_global.26, args=[Var($120load_global.27, Euler_maruyama_solver.py:100)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $126load_global.29 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $128load_global.30 = global(nstates: 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: litstates = call $126load_global.29($128load_global.30, func=$126load_global.29, args=[Var($128load_global.30, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $134load_global.32 = global(literally: <function literally at 0x000001EDFFCF38B0>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $136load_global.33 = global(constants_length: 14)
07/23/2024 06:57:05 PM - DEBUG - on stmt: litconstantslength = call $134load_global.32($136load_global.33, func=$134load_global.32, args=[Var($136load_global.33, Euler_maruyama_solver.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $142load_global.35 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $144load_attr.36 = getattr(value=$142load_global.35, attr=shared)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $146load_attr.37 = getattr(value=$144load_attr.36, attr=array)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $150load_deref.39 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: dynamic_mem = call $146load_attr.37(litzero, func=$146load_attr.37, args=[Var(litzero, Euler_maruyama_solver.py:100)], kws=[('dtype', Var($150load_deref.39, Euler_maruyama_solver.py:105))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const160.43 = const(NoneType, None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $164load_global.45 = global(nstates: 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $166binary_multiply.46 = xblocksize * $164load_global.45
07/23/2024 06:57:05 PM - DEBUG - on stmt: $168build_slice.47 = global(slice: <class 'slice'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $168build_slice.48 = call $168build_slice.47($const160.43, $166binary_multiply.46, func=$168build_slice.47, args=(Var($const160.43, Euler_maruyama_solver.py:106), Var($166binary_multiply.46, Euler_maruyama_solver.py:106)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_sums = getitem(value=dynamic_mem, index=$168build_slice.48, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $178load_global.52 = global(nstates: 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $180binary_multiply.53 = xblocksize * $178load_global.52
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const182.54 = const(int, 2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $186binary_multiply.56 = $const182.54 * xblocksize
07/23/2024 06:57:05 PM - DEBUG - on stmt: $188load_global.57 = global(nstates: 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $190binary_multiply.58 = $186binary_multiply.56 * $188load_global.57
07/23/2024 06:57:05 PM - DEBUG - on stmt: $192build_slice.59 = global(slice: <class 'slice'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $192build_slice.60 = call $192build_slice.59($180binary_multiply.53, $190binary_multiply.58, func=$192build_slice.59, args=(Var($180binary_multiply.53, Euler_maruyama_solver.py:107), Var($190binary_multiply.58, Euler_maruyama_solver.py:107)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_state = getitem(value=dynamic_mem, index=$192build_slice.60, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $198load_global.62 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $200load_attr.63 = getattr(value=$198load_global.62, attr=local)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $202load_attr.64 = getattr(value=$200load_attr.63, attr=array)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $206load_deref.66 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_dxdt = call $202load_attr.64(func=$202load_attr.64, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($206load_deref.66, Euler_maruyama_solver.py:112))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $214load_global.69 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $216load_attr.70 = getattr(value=$214load_global.69, attr=local)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $218load_attr.71 = getattr(value=$216load_attr.70, attr=array)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $222load_deref.73 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_noise = call $218load_attr.71(func=$218load_attr.71, args=[], kws=[('shape', Var(litstates, Euler_maruyama_solver.py:101)), ('dtype', Var($222load_deref.73, Euler_maruyama_solver.py:116))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $230load_global.76 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $232load_attr.77 = getattr(value=$230load_global.76, attr=local)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $234load_attr.78 = getattr(value=$232load_attr.77, attr=array)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $238load_deref.80 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_constants = call $234load_attr.78(func=$234load_attr.78, args=[], kws=[('shape', Var(litconstantslength, Euler_maruyama_solver.py:102)), ('dtype', Var($238load_deref.80, Euler_maruyama_solver.py:120))], vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $246load_global.83 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $248load_attr.84 = getattr(value=$246load_global.83, attr=const)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $250load_method.85 = getattr(value=$248load_attr.84, attr=array_like)
07/23/2024 06:57:05 PM - DEBUG - on stmt: c_sigmas = call $250load_method.85(noise_sigmas, func=$250load_method.85, args=[Var(noise_sigmas, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $258load_global.88 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $260load_attr.89 = getattr(value=$258load_global.88, attr=const)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $262load_method.90 = getattr(value=$260load_attr.89, attr=array_like)
07/23/2024 06:57:05 PM - DEBUG - on stmt: c_RNG = call $262load_method.90(RNG, func=$262load_method.90, args=[Var(RNG, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $270load_global.93 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $272load_attr.94 = getattr(value=$270load_global.93, attr=const)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $274load_method.95 = getattr(value=$272load_attr.94, attr=array_like)
07/23/2024 06:57:05 PM - DEBUG - on stmt: c_filtercoefficients = call $274load_method.95(filtercoeffs, func=$274load_method.95, args=[Var(filtercoeffs, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $282load_global.98 = global(range: <class 'range'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $284load_global.99 = global(len: <built-in function len>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $288call_function.101 = call $284load_global.99(constants, func=$284load_global.99, args=[Var(constants, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $290call_function.102 = call $282load_global.98($288call_function.101, func=$282load_global.98, args=[Var($288call_function.101, Euler_maruyama_solver.py:125)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $292get_iter.103 = getiter(value=$290call_function.102)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi294.0 = $292get_iter.103
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 294
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $294for_iter.1 = iternext(value=$phi294.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $294for_iter.2 = pair_first(value=$294for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $294for_iter.3 = pair_second(value=$294for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi296.1 = $294for_iter.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $294for_iter.3, 296, 314
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 296
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: i = $phi296.1
07/23/2024 06:57:05 PM - DEBUG - on stmt: $302binary_subscr.4 = getitem(value=constants, index=i, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_constants[i] = $302binary_subscr.4
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 294
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 314
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $314load_global.0 = global(enumerate: <class 'enumerate'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $318call_function.2 = call $314load_global.0(grid_indices, func=$314load_global.0, args=[Var(grid_indices, Euler_maruyama_solver.py:69)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $320get_iter.3 = getiter(value=$318call_function.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi322.0 = $320get_iter.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 322
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $322for_iter.1 = iternext(value=$phi322.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $322for_iter.2 = pair_first(value=$322for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $322for_iter.3 = pair_second(value=$322for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi324.1 = $322for_iter.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $322for_iter.3, 324, 350
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 324
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $324unpack_sequence.4 = exhaust_iter(value=$phi324.1, count=2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $324unpack_sequence.2 = static_getitem(value=$324unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $324unpack_sequence.3 = static_getitem(value=$324unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: i.1 = $324unpack_sequence.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: index = $324unpack_sequence.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: $336build_tuple.8 = build_tuple(items=[Var(l_param_set, Euler_maruyama_solver.py:88), Var(i.1, Euler_maruyama_solver.py:128)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: $338binary_subscr.9 = getitem(value=grid_values, index=$336build_tuple.8, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_constants[index] = $338binary_subscr.9
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 322
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 350
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $350load_global.0 = global(range: <class 'range'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $352load_global.1 = global(nstates: 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $354call_function.2 = call $350load_global.0($352load_global.1, func=$350load_global.0, args=[Var($352load_global.1, Euler_maruyama_solver.py:132)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $356get_iter.3 = getiter(value=$354call_function.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi358.0 = $356get_iter.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 358
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $358for_iter.1 = iternext(value=$phi358.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $358for_iter.2 = pair_first(value=$358for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $358for_iter.3 = pair_second(value=$358for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi360.1 = $358for_iter.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $358for_iter.3, 360, 406
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 360
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: i.2 = $phi360.1
07/23/2024 06:57:05 PM - DEBUG - on stmt: $366binary_subscr.4 = getitem(value=inits, index=i.2, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $372load_global.7 = global(nstates: 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $374binary_multiply.8 = tx * $372load_global.7
07/23/2024 06:57:05 PM - DEBUG - on stmt: $378binary_add.10 = $374binary_multiply.8 + i.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_state[$378binary_add.10] = $366binary_subscr.4
07/23/2024 06:57:05 PM - DEBUG - on stmt: $382load_deref.11 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const384.12 = const(float, 0.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $386call_function.13 = call $382load_deref.11($const384.12, func=$382load_deref.11, args=[Var($const384.12, Euler_maruyama_solver.py:134)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $392load_global.16 = global(nstates: 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $394binary_multiply.17 = tx * $392load_global.16
07/23/2024 06:57:05 PM - DEBUG - on stmt: $398binary_add.19 = $394binary_multiply.17 + i.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_sums[$398binary_add.19] = $386call_function.13
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 358
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 406
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $406load_deref.0 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const408.1 = const(float, 0.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $410call_function.2 = call $406load_deref.0($const408.1, func=$406load_deref.0, args=[Var($const408.1, Euler_maruyama_solver.py:136)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const414.4 = const(NoneType, None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const416.5 = const(NoneType, None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $418build_slice.6 = global(slice: <class 'slice'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $418build_slice.7 = call $418build_slice.6($const414.4, $const416.5, func=$418build_slice.6, args=(Var($const414.4, Euler_maruyama_solver.py:136), Var($const416.5, Euler_maruyama_solver.py:136)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_dxdt[slice(None, None, None)] = $410call_function.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: $422load_deref.8 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const424.9 = const(float, 0.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $430load_global.11 = global(range: <class 'range'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $436binary_add.14 = l_n_outer + l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $438call_function.15 = call $430load_global.11($436binary_add.14, func=$430load_global.11, args=[Var($436binary_add.14, Euler_maruyama_solver.py:140)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $440get_iter.16 = getiter(value=$438call_function.15)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi444.0 = $440get_iter.16
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 442
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 444
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 444
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $444for_iter.1 = iternext(value=$phi444.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $444for_iter.2 = pair_first(value=$444for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $444for_iter.3 = pair_second(value=$444for_iter.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi446.1 = $444for_iter.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $444for_iter.3, 446, 820
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 446
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: i.3 = $phi446.1
07/23/2024 06:57:05 PM - DEBUG - on stmt: $448load_global.2 = global(range: <class 'range'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $452call_function.4 = call $448load_global.2(l_ds_rate, func=$448load_global.2, args=[Var(l_ds_rate, Euler_maruyama_solver.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $454get_iter.5 = getiter(value=$452call_function.4)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi456.1 = $454get_iter.5
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 456
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $456for_iter.2 = iternext(value=$phi456.1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $456for_iter.3 = pair_first(value=$456for_iter.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $456for_iter.4 = pair_second(value=$456for_iter.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi458.2 = $456for_iter.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $456for_iter.4, 458, 624
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 458
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: j = $phi458.2
07/23/2024 06:57:05 PM - DEBUG - on stmt: $464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - find_def var='l_t' stmt=$464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 458
07/23/2024 06:57:05 PM - DEBUG - idom 456 from label 458
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 456
07/23/2024 06:57:05 PM - DEBUG - insert phi node l_t.2 = phi(incoming_values=[], incoming_blocks=[]) at 456
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 620
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 620
07/23/2024 06:57:05 PM - DEBUG - idom 532 from label 620
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 532
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 532
07/23/2024 06:57:05 PM - DEBUG - idom 458 from label 532
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 458
07/23/2024 06:57:05 PM - DEBUG - incoming_def l_t.1 = $464inplace_add.5
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 446
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 446
07/23/2024 06:57:05 PM - DEBUG - idom 444 from label 446
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 444
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 444
07/23/2024 06:57:05 PM - DEBUG - idom 442 from label 444
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 442
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 442
07/23/2024 06:57:05 PM - DEBUG - insert phi node l_t.3 = phi(incoming_values=[], incoming_blocks=[]) at 442
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 788
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 788
07/23/2024 06:57:05 PM - DEBUG - idom 624 from label 788
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 624
07/23/2024 06:57:05 PM - DEBUG - find_def_from_top label 624
07/23/2024 06:57:05 PM - DEBUG - idom 456 from label 624
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 456
07/23/2024 06:57:05 PM - DEBUG - incoming_def l_t.2 = phi(incoming_values=[Var(l_t.1, Euler_maruyama_solver.py:144)], incoming_blocks=[620])
07/23/2024 06:57:05 PM - DEBUG - find_def_from_bottom label 406
07/23/2024 06:57:05 PM - DEBUG - incoming_def l_t = call $422load_deref.8($const424.9, func=$422load_deref.8, args=[Var($const424.9, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - incoming_def l_t.3 = phi(incoming_values=[Var(l_t.2, Euler_maruyama_solver.py:143), Var(l_t, Euler_maruyama_solver.py:137)], incoming_blocks=[788, 406])
07/23/2024 06:57:05 PM - DEBUG - replaced with: $464inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=l_t.2, rhs=l_step_size, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - on stmt: l_t.1 = $464inplace_add.5
07/23/2024 06:57:05 PM - DEBUG - on stmt: $468load_deref.6 = freevar(get_noise: CUDADispatcher(<function get_noise_64 at 0x000001EE06FAE8B0>))
07/23/2024 06:57:05 PM - DEBUG - on stmt: $478call_function.11 = call $468load_deref.6(l_noise, c_sigmas, l_param_set, c_RNG, func=$468load_deref.6, args=[Var(l_noise, Euler_maruyama_solver.py:114), Var(c_sigmas, Euler_maruyama_solver.py:122), Var(l_param_set, Euler_maruyama_solver.py:88), Var(c_RNG, Euler_maruyama_solver.py:123)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: filtercoeff = getitem(value=c_filtercoefficients, index=j, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $490load_deref.15 = freevar(dxdtfunc: CUDADispatcher(<function diffeq_system.__init__.<locals>.dxdtfunc at 0x000001EE089EE430>))
07/23/2024 06:57:05 PM - DEBUG - on stmt: $500binary_multiply.20 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $506binary_multiply.23 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const508.24 = const(int, 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $510binary_add.25 = $506binary_multiply.23 + $const508.24
07/23/2024 06:57:05 PM - DEBUG - on stmt: $512build_slice.26 = global(slice: <class 'slice'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $512build_slice.27 = call $512build_slice.26($500binary_multiply.20, $510binary_add.25, func=$512build_slice.26, args=(Var($500binary_multiply.20, Euler_maruyama_solver.py:157), Var($510binary_add.25, Euler_maruyama_solver.py:157)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $514binary_subscr.28 = getitem(value=s_state, index=$512build_slice.27, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - find_def var='l_t' stmt=$520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t, Euler_maruyama_solver.py:137)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - replaced with: $520call_function.31 = call $490load_deref.15(l_dxdt, $514binary_subscr.28, l_constants, l_t.1, func=$490load_deref.15, args=[Var(l_dxdt, Euler_maruyama_solver.py:110), Var($514binary_subscr.28, Euler_maruyama_solver.py:157), Var(l_constants, Euler_maruyama_solver.py:118), Var(l_t.1, Euler_maruyama_solver.py:144)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $524load_global.32 = global(range: <class 'range'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $528call_function.34 = call $524load_global.32(litstates, func=$524load_global.32, args=[Var(litstates, Euler_maruyama_solver.py:101)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $530get_iter.35 = getiter(value=$528call_function.34)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi532.2 = $530get_iter.35
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 532
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $532for_iter.3 = iternext(value=$phi532.2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $532for_iter.4 = pair_first(value=$532for_iter.3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $532for_iter.5 = pair_second(value=$532for_iter.3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $phi534.3 = $532for_iter.4
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $532for_iter.5, 534, 620
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 534
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: k = $phi534.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: $542binary_multiply.7 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $546binary_add.9 = $542binary_multiply.7 + k
07/23/2024 06:57:05 PM - DEBUG - on stmt: $550binary_subscr.12 = getitem(value=s_state, index=$546binary_add.9, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $556binary_subscr.15 = getitem(value=l_dxdt, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $560binary_multiply.17 = $556binary_subscr.15 * l_step_size
07/23/2024 06:57:05 PM - DEBUG - on stmt: $566binary_subscr.20 = getitem(value=l_noise, index=k, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $568binary_add.21 = $560binary_multiply.17 + $566binary_subscr.20
07/23/2024 06:57:05 PM - DEBUG - on stmt: $570inplace_add.22 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$550binary_subscr.12, rhs=$568binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_state[$546binary_add.9] = $570inplace_add.22
07/23/2024 06:57:05 PM - DEBUG - on stmt: $582binary_multiply.26 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $586binary_add.28 = $582binary_multiply.26 + k
07/23/2024 06:57:05 PM - DEBUG - on stmt: $590binary_subscr.31 = getitem(value=s_sums, index=$586binary_add.28, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $598binary_multiply.35 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $602binary_add.37 = $598binary_multiply.35 + k
07/23/2024 06:57:05 PM - DEBUG - on stmt: $604binary_subscr.38 = getitem(value=s_state, index=$602binary_add.37, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $608binary_multiply.40 = $604binary_subscr.38 * filtercoeff
07/23/2024 06:57:05 PM - DEBUG - on stmt: $610inplace_add.41 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$590binary_subscr.31, rhs=$608binary_multiply.40, static_lhs=Undefined, static_rhs=Undefined)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_sums[$586binary_add.28] = $610inplace_add.41
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 532
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 620
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 456
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 624
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const628.3 = const(int, 1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $630binary_subtract.4 = l_warmup - $const628.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: $632compare_op.5 = i.3 > $630binary_subtract.4
07/23/2024 06:57:05 PM - DEBUG - on stmt: bool636 = global(bool: <class 'bool'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $636pred = call bool636($632compare_op.5, func=bool636, args=(Var($632compare_op.5, Euler_maruyama_solver.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: branch $636pred, 638, 788
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 638
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $644binary_multiply.4 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const646.5 = const(int, 0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $648binary_add.6 = $644binary_multiply.4 + $const646.5
07/23/2024 06:57:05 PM - DEBUG - on stmt: $650binary_subscr.7 = getitem(value=s_sums, index=$648binary_add.6, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $658binary_subtract.11 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const662.13 = const(int, 0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $664build_tuple.14 = build_tuple(items=[Var($658binary_subtract.11, Euler_maruyama_solver.py:171), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const662.13, Euler_maruyama_solver.py:171)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$664build_tuple.14] = $650binary_subscr.7
07/23/2024 06:57:05 PM - DEBUG - on stmt: $674binary_multiply.18 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const676.19 = const(int, 1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $678binary_add.20 = $674binary_multiply.18 + $const676.19
07/23/2024 06:57:05 PM - DEBUG - on stmt: $680binary_subscr.21 = getitem(value=s_sums, index=$678binary_add.20, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $688binary_subtract.25 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const692.27 = const(int, 1)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $694build_tuple.28 = build_tuple(items=[Var($688binary_subtract.25, Euler_maruyama_solver.py:172), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const692.27, Euler_maruyama_solver.py:172)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$694build_tuple.28] = $680binary_subscr.21
07/23/2024 06:57:05 PM - DEBUG - on stmt: $704binary_multiply.32 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const706.33 = const(int, 2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $708binary_add.34 = $704binary_multiply.32 + $const706.33
07/23/2024 06:57:05 PM - DEBUG - on stmt: $710binary_subscr.35 = getitem(value=s_sums, index=$708binary_add.34, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $718binary_subtract.39 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const722.41 = const(int, 2)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $724build_tuple.42 = build_tuple(items=[Var($718binary_subtract.39, Euler_maruyama_solver.py:173), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const722.41, Euler_maruyama_solver.py:173)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$724build_tuple.42] = $710binary_subscr.35
07/23/2024 06:57:05 PM - DEBUG - on stmt: $734binary_multiply.46 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const736.47 = const(int, 3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $738binary_add.48 = $734binary_multiply.46 + $const736.47
07/23/2024 06:57:05 PM - DEBUG - on stmt: $740binary_subscr.49 = getitem(value=s_sums, index=$738binary_add.48, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $748binary_subtract.53 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const752.55 = const(int, 3)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $754build_tuple.56 = build_tuple(items=[Var($748binary_subtract.53, Euler_maruyama_solver.py:174), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const752.55, Euler_maruyama_solver.py:174)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$754build_tuple.56] = $740binary_subscr.49
07/23/2024 06:57:05 PM - DEBUG - on stmt: $764binary_multiply.60 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const766.61 = const(int, 4)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $768binary_add.62 = $764binary_multiply.60 + $const766.61
07/23/2024 06:57:05 PM - DEBUG - on stmt: $770binary_subscr.63 = getitem(value=s_sums, index=$768binary_add.62, fn=<built-in function getitem>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $778binary_subtract.67 = i.3 - l_warmup
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const782.69 = const(int, 4)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $784build_tuple.70 = build_tuple(items=[Var($778binary_subtract.67, Euler_maruyama_solver.py:175), Var(l_param_set, Euler_maruyama_solver.py:88), Var($const782.69, Euler_maruyama_solver.py:175)])
07/23/2024 06:57:05 PM - DEBUG - on stmt: output[$784build_tuple.70] = $770binary_subscr.63
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 788
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 788
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $788load_deref.1 = freevar(precision: float64)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const790.2 = const(int, 0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $792call_function.3 = call $788load_deref.1($const790.2, func=$788load_deref.1, args=[Var($const790.2, Euler_maruyama_solver.py:178)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $800binary_multiply.7 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $806binary_multiply.10 = tx * litstates
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const808.11 = const(int, 5)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $810binary_add.12 = $806binary_multiply.10 + $const808.11
07/23/2024 06:57:05 PM - DEBUG - on stmt: $812build_slice.13 = global(slice: <class 'slice'>)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $812build_slice.14 = call $812build_slice.13($800binary_multiply.7, $810binary_add.12, func=$812build_slice.13, args=(Var($800binary_multiply.7, Euler_maruyama_solver.py:178), Var($810binary_add.12, Euler_maruyama_solver.py:178)), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: s_sums[$812build_slice.14] = $792call_function.3
07/23/2024 06:57:05 PM - DEBUG - on stmt: jump 442
07/23/2024 06:57:05 PM - DEBUG - ==== SSA block rewrite pass on 820
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EE15D2D6D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: $const820.0 = const(NoneType, None)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $822return_value.1 = cast(value=$const820.0)
07/23/2024 06:57:05 PM - DEBUG - on stmt: return $822return_value.1
07/23/2024 06:57:05 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=10)
           2	LOAD_FAST(arg=0, lineno=10)
           4	RETURN_VALUE(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:05 PM - DEBUG - stack: []
07/23/2024 06:57:05 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack []
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack []
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack ['$obj2.0']
07/23/2024 06:57:05 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:05 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:05 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:05 PM - DEBUG - defmap: {}
07/23/2024 06:57:05 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:05 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:05 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:05 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:05 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:05 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$obj2.0'}), (4, {'retval': '$obj2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:05 PM - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    $4return_value.1 = cast(value=obj)       ['$4return_value.1', 'obj']
    return $4return_value.1                  ['$4return_value.1']

07/23/2024 06:57:05 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D40760>
07/23/2024 06:57:05 PM - DEBUG - on stmt: obj = arg(0, name=obj)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $4return_value.1 = cast(value=obj)
07/23/2024 06:57:05 PM - DEBUG - on stmt: return $4return_value.1
07/23/2024 06:57:05 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$4return_value.1': [(<numba.core.ir.Assign object at 0x000001EE15D57070>,
                                   0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001EE15D513D0>, 0)]})
07/23/2024 06:57:05 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE15D40760>
07/23/2024 06:57:05 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=10)
           2	LOAD_FAST(arg=0, lineno=10)
           4	RETURN_VALUE(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:05 PM - DEBUG - stack: []
07/23/2024 06:57:05 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack []
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack []
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack ['$obj2.0']
07/23/2024 06:57:05 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:05 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:05 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:05 PM - DEBUG - defmap: {}
07/23/2024 06:57:05 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:05 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:05 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:05 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:05 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:05 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$obj2.0'}), (4, {'retval': '$obj2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:05 PM - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    $4return_value.1 = cast(value=obj)       ['$4return_value.1', 'obj']
    return $4return_value.1                  ['$4return_value.1']

07/23/2024 06:57:05 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D5D9D0>
07/23/2024 06:57:05 PM - DEBUG - on stmt: obj = arg(0, name=obj)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $4return_value.1 = cast(value=obj)
07/23/2024 06:57:05 PM - DEBUG - on stmt: return $4return_value.1
07/23/2024 06:57:05 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$4return_value.1': [(<numba.core.ir.Assign object at 0x000001EE15D5D6D0>,
                                   0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001EE15D5D3A0>, 0)]})
07/23/2024 06:57:05 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE15D5D9D0>
07/23/2024 06:57:05 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=10)
           2	LOAD_FAST(arg=0, lineno=10)
           4	RETURN_VALUE(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 06:57:05 PM - DEBUG - stack: []
07/23/2024 06:57:05 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack []
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack []
07/23/2024 06:57:05 PM - DEBUG - dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=10)
07/23/2024 06:57:05 PM - DEBUG - stack ['$obj2.0']
07/23/2024 06:57:05 PM - DEBUG - end state. edges=[]
07/23/2024 06:57:05 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 06:57:05 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 06:57:05 PM - DEBUG - defmap: {}
07/23/2024 06:57:05 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:05 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 06:57:05 PM - DEBUG - keep phismap: {}
07/23/2024 06:57:05 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 06:57:05 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 06:57:05 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$obj2.0'}), (4, {'retval': '$obj2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 06:57:05 PM - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    $4return_value.1 = cast(value=obj)       ['$4return_value.1', 'obj']
    return $4return_value.1                  ['$4return_value.1']

07/23/2024 06:57:05 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 06:57:05 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EE15D64490>
07/23/2024 06:57:05 PM - DEBUG - on stmt: obj = arg(0, name=obj)
07/23/2024 06:57:05 PM - DEBUG - on stmt: $4return_value.1 = cast(value=obj)
07/23/2024 06:57:05 PM - DEBUG - on stmt: return $4return_value.1
07/23/2024 06:57:05 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$4return_value.1': [(<numba.core.ir.Assign object at 0x000001EE15D65130>,
                                   0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001EE15D64610>, 0)]})
07/23/2024 06:57:05 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001EE15D64490>
07/23/2024 06:58:36 PM - DEBUG - Logfile initialised
07/23/2024 06:58:37 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 07:04:22 PM - DEBUG - Logfile initialised
07/23/2024 07:04:23 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 07:05:05 PM - DEBUG - Logfile initialised
07/23/2024 07:05:05 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 07:05:34 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:05:34 PM - DEBUG - stack: []
07/23/2024 07:05:34 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 07:05:34 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 07:05:34 PM - DEBUG - end state. edges=[]
07/23/2024 07:05:34 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:05:34 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 07:05:34 PM - DEBUG - defmap: {}
07/23/2024 07:05:34 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:05:34 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:05:34 PM - DEBUG - keep phismap: {}
07/23/2024 07:05:34 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:05:34 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:05:34 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:05:34 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E0072EF550>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 07:05:34 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:05:34 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E088ADC220>
07/23/2024 07:05:34 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 07:05:34 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 07:05:34 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 07:05:34 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E0072EF550>))
07/23/2024 07:05:34 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 07:05:34 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 07:05:34 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 07:05:34 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 07:05:34 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001E09116A9A0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001E09116AC70>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001E09116AD90>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001E09116A310>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001E09116A700>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001E088ADC5B0>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001E088ADC940>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001E09116A190>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001E09116A070>,
                                 0)]})
07/23/2024 07:05:34 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E088ADC220>
07/23/2024 07:05:34 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:05:34 PM - DEBUG - stack: []
07/23/2024 07:05:34 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 07:05:34 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 07:05:34 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 07:05:34 PM - DEBUG - stack ['$state74.34']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 07:05:34 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 07:05:34 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 07:05:34 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 07:05:34 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$state86.39']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 07:05:34 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$constants144.67']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 07:05:34 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$constants190.89']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 07:05:34 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$constants224.105']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack []
07/23/2024 07:05:34 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 07:05:34 PM - DEBUG - stack ['$const262.123']
07/23/2024 07:05:34 PM - DEBUG - end state. edges=[]
07/23/2024 07:05:34 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:05:34 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 07:05:34 PM - DEBUG - defmap: {}
07/23/2024 07:05:34 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:05:34 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:05:34 PM - DEBUG - keep phismap: {}
07/23/2024 07:05:34 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:05:34 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:05:34 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:05:34 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E0072EF550>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001E088ADA0D0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 07:05:34 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:05:34 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E098BB3BE0>
07/23/2024 07:05:34 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 07:05:34 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 07:05:34 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 07:05:34 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001E0072EF550>))
07/23/2024 07:05:34 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 07:05:34 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001E088ADA0D0>))
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 07:05:34 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 07:05:34 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 07:05:34 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 07:05:34 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 07:05:34 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 07:05:34 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 07:05:34 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 07:05:34 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 07:05:34 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 07:05:34 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 07:05:34 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 07:05:35 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 07:05:35 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 07:05:35 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 07:05:35 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 07:05:35 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 07:05:35 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 07:05:35 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 07:05:35 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 07:05:35 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 07:05:35 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001E091182B50>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001E09119BFA0>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001E09119D160>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001E091182EE0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001E091182AF0>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001E098BAB820>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001E09119DB20>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001E09119DCA0>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001E098BABE50>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001E098BA03A0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001E098BA0520>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001E098BABF10>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001E098BA0DF0>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001E098BABFD0>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001E098BA2400>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001E098BAF0D0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001E091176E20>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001E098BAF190>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001E098BA2DC0>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001E098BAF250>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001E098BA43A0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001E098BA4520>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001E098BAF310>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001E098BA4DF0>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001E098BAF3D0>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001E098BA6400>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001E0911727C0>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001E098BAF490>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001E098BA6AC0>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001E098BA6C40>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001E098BAF550>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001E0911723A0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001E098BA8550>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001E098BAF610>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001E098BA8B20>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001E098BAF6D0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001E091172EB0>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001E098BAF790>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001E098BAB520>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001E098BAB6A0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001E098BABCD0>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001E09118B790>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001E098BA46A0>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001E09118BCA0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001E098BA2EB0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001E0911964F0>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001E09118B910>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001E098BA24F0>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001E098BA64F0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001E098BA0970>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001E098BA8CA0>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001E09118BA90>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001E091182DC0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001E091176760>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001E091182AC0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001E09119B5B0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001E091182CA0>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001E09119BC70>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001E09119D3D0>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001E09119D7F0>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001E09119DF10>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001E0911823D0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001E098BA0790>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001E098BA0AF0>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001E098BA20D0>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001E098BA2670>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001E098BA2A90>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001E098BA4070>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001E098BA4790>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001E098BA4AF0>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001E098BA60D0>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001E098BA6670>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001E098BA6EB0>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001E098BA8250>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001E098BA87F0>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001E098BA8D90>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001E098BAB1F0>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001E098BAB910>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001E098BABB50>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001E09118B280>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001E09118BF10>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001E091196790>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001E091196BB0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001E091196FD0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001E091199430>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001E091199AF0>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001E091199F10>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001E09119B2B0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001E09119B850>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001E09118B4F0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001E091199790>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001E091182A30>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001E0911962B0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001E09118B3D0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001E09118B610>, 0)]})
07/23/2024 07:05:35 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E098BA0610>
07/23/2024 07:06:14 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value2.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value10.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 07:06:14 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value24.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 07:06:14 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value20.0']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 07:06:14 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 07:06:14 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 07:06:14 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:14 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:06:14 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 07:06:14 PM - DEBUG - defmap: {}
07/23/2024 07:06:14 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:14 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:14 PM - DEBUG - keep phismap: {}
07/23/2024 07:06:14 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:06:14 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:14 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D0D70D0>
07/23/2024 07:06:14 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 07:06:14 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:14 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D0D70D0>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 07:06:14 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:14 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D0D70D0>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D0D70D0>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 07:06:14 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:14 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D0D70D0>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D0D70D0>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 07:06:14 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 07:06:14 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001E08D0EC3D0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001E08D0EC580>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001E08D0DF2B0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001E08D0D71F0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001E099421E20>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001E0993FFC70>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001E08D0EC820>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001E08D0ECB80>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001E08D0ECD00>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001E08D0DFA00>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001E08D0DFC70>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001E08D0DF3D0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001E09941C940>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001E08D0DFB50>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001E08D0DF610>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001E08D0DF4F0>,
                        0)]})
07/23/2024 07:06:14 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E08D0D70D0>
07/23/2024 07:06:14 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value2.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value10.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 07:06:14 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value24.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 07:06:14 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 07:06:14 PM - DEBUG - stack ['$value20.0']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 07:06:14 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 07:06:14 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 07:06:14 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:14 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:06:14 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 07:06:14 PM - DEBUG - defmap: {}
07/23/2024 07:06:14 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:14 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:14 PM - DEBUG - keep phismap: {}
07/23/2024 07:06:14 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:06:14 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:14 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:14 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D10FF40>
07/23/2024 07:06:14 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 07:06:14 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:14 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D10FF40>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 07:06:14 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:14 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D10FF40>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D10FF40>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 07:06:14 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:14 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D10FF40>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 07:06:14 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 07:06:14 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D10FF40>
07/23/2024 07:06:14 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 07:06:14 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 07:06:14 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 07:06:14 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001E08D122190>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001E08D0DDF10>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001E08D0ECA90>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001E08D0D7040>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001E08D0FED90>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001E08D10F040>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001E08D10F2B0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001E08D10F8B0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001E08D10FA30>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001E08D122A00>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001E08D122700>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001E08D0ECA00>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001E08D10F130>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001E08D1228B0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001E08D1231F0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001E08D123370>,
                        0)]})
07/23/2024 07:06:14 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E08D10FF40>
07/23/2024 07:06:14 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:14 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi14.0']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 07:06:14 PM - DEBUG - stack: []
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 07:06:14 PM - DEBUG - stack []
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 07:06:14 PM - DEBUG - stack ['$const54.0']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 07:06:14 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi16.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 07:06:14 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 07:06:14 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:14 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 07:06:14 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi30.0']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 07:06:14 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 07:06:14 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0']
07/23/2024 07:06:15 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:15 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:06:15 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 07:06:15 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 07:06:15 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 07:06:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 07:06:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 07:06:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 07:06:15 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 07:06:15 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 07:06:15 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:15 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001E0072EF0D0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D138790>
07/23/2024 07:06:15 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 07:06:15 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 07:06:15 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 07:06:15 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 07:06:15 PM - DEBUG - on stmt: jump 14
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D138790>
07/23/2024 07:06:15 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 07:06:15 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D138790>
07/23/2024 07:06:15 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 07:06:15 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 07:06:15 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D138790>
07/23/2024 07:06:15 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001E0072EF0D0>))
07/23/2024 07:06:15 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 07:06:15 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 07:06:15 PM - DEBUG - on stmt: jump 55
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D138790>
07/23/2024 07:06:15 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 07:06:15 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D138790>
07/23/2024 07:06:15 PM - DEBUG - on stmt: jump 14
07/23/2024 07:06:15 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001E08D123F10>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001E08D123FD0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001E08D10F670>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001E08D10FCA0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001E08D10FB50>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001E08D13C8B0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001E08D13CBB0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001E08D13CE20>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001E08D12C790>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001E08D13F040>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001E08D13F460>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001E08D13F7F0>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001E08D13F970>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001E08D12C5B0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001E08D13FE80>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001E08D123FA0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001E08D13CA00>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001E08D13FAF0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001E08D12C850>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001E08D10F730>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001E08D12C190>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001E08D13CD00>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001E08D13C1C0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001E08D12C2E0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001E08D12C7F0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001E08D12CBE0>,
                         0)]})
07/23/2024 07:06:15 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E08D138790>
07/23/2024 07:06:15 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:06:15 PM - DEBUG - stack: []
07/23/2024 07:06:15 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 07:06:15 PM - DEBUG - stack []
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack []
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 07:06:15 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:15 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 07:06:15 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi14.0']
07/23/2024 07:06:15 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 07:06:15 PM - DEBUG - stack: []
07/23/2024 07:06:15 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack []
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$const54.0']
07/23/2024 07:06:15 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 07:06:15 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 07:06:15 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi16.0']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 07:06:15 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:15 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 07:06:15 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 07:06:15 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 07:06:15 PM - DEBUG - stack ['$phi30.0']
07/23/2024 07:06:15 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:15 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 07:06:15 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:06:15 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 07:06:15 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 07:06:15 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 07:06:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 07:06:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 07:06:15 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 07:06:15 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 07:06:15 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 07:06:15 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 07:06:15 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:15 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001E0072CFEE0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D18DCA0>
07/23/2024 07:06:15 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 07:06:15 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 07:06:15 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 07:06:15 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 07:06:15 PM - DEBUG - on stmt: jump 14
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D18DCA0>
07/23/2024 07:06:15 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 07:06:15 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D18DCA0>
07/23/2024 07:06:15 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 07:06:15 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 07:06:15 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D18DCA0>
07/23/2024 07:06:15 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001E0072CFEE0>))
07/23/2024 07:06:15 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 07:06:15 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 07:06:15 PM - DEBUG - on stmt: jump 55
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D18DCA0>
07/23/2024 07:06:15 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 07:06:15 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 07:06:15 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 07:06:15 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 07:06:15 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E08D18DCA0>
07/23/2024 07:06:15 PM - DEBUG - on stmt: jump 14
07/23/2024 07:06:15 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001E08D185A90>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001E08D185BB0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001E08D185EE0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001E08D18B040>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001E08D18B160>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001E08D18B820>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001E08D18BB20>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001E08D18BD90>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001E08D185490>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001E08D18BF70>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001E08D18D3D0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001E08D18D760>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001E08D18D8E0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001E08D185610>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001E08D18DDF0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001E08D185910>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001E08D18B970>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001E08D18DA60>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001E08D185730>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001E08D185E20>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001E08D185310>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001E08D18BC70>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001E08D18B430>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001E08D1851F0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001E08D16DFA0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001E08D1850A0>,
                         0)]})
07/23/2024 07:06:15 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E08D18DCA0>
07/23/2024 07:06:15 PM - DEBUG - Logfile initialised
07/23/2024 07:06:15 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc230\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:15 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc030\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc830\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc030\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7f0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:16 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7f0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc030\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7f0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc030\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:17 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubfb0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:18 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubfb0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:19 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc030\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7f0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc030\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc270\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:20 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:21 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubfb0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf70\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubfb0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0b0\u8678\u01e0
07/23/2024 07:06:22 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc830\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc830\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:23 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0b0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubdf0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc6b0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:24 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc830\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc6b0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc630\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:25 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0b0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc6b0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc930\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc730\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucb70\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubfb0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4b0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4b0\u8678\u01e0
07/23/2024 07:06:26 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc630\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4b0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubfb0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubd70\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc8b0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:27 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc3b0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubeb0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2b0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubfb0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ube70\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubc30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0b0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc630\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc630\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:28 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc570\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:29 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:30 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:31 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc570\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc570\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:32 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc5f0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:33 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc570\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ucaf0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcf0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc470\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7f0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc670\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:34 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc430\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca70\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc070\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uca30\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc870\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc570\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc970\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubf30\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubef0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc4f0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \ubcb0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc1f0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc2f0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:35 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:36 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:37 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:38 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:39 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc130\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:40 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:41 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc7b0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc770\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:42 PM - ERROR - wglMakeCurrent failed in MakeCurrent(), error: \uc0f0\u8678\u01e0
07/23/2024 07:06:43 PM - DEBUG - Logfile initialised
07/23/2024 07:06:43 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 07:06:59 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:06:59 PM - DEBUG - stack: []
07/23/2024 07:06:59 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 07:06:59 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 07:06:59 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:59 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:06:59 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 07:06:59 PM - DEBUG - defmap: {}
07/23/2024 07:06:59 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:59 PM - DEBUG - keep phismap: {}
07/23/2024 07:06:59 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:06:59 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:06:59 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:59 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000024A916E7B80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 07:06:59 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:06:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024B07AC0A00>
07/23/2024 07:06:59 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 07:06:59 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 07:06:59 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 07:06:59 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000024A916E7B80>))
07/23/2024 07:06:59 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 07:06:59 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 07:06:59 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 07:06:59 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 07:06:59 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x0000024B07C61430>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x0000024B07C61700>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x0000024B07C61820>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000024B07AC0D60>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x0000024B07C61190>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x0000024B07AC0130>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x0000024B07AC03D0>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x0000024B07AC0BE0>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x0000024B07AC0AC0>,
                                 0)]})
07/23/2024 07:06:59 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000024B07AC0A00>
07/23/2024 07:06:59 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:06:59 PM - DEBUG - stack: []
07/23/2024 07:06:59 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 07:06:59 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 07:06:59 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 07:06:59 PM - DEBUG - stack ['$state74.34']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 07:06:59 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 07:06:59 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 07:06:59 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 07:06:59 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$state86.39']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 07:06:59 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$constants144.67']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 07:06:59 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$constants190.89']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 07:06:59 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$constants224.105']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack []
07/23/2024 07:06:59 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 07:06:59 PM - DEBUG - stack ['$const262.123']
07/23/2024 07:06:59 PM - DEBUG - end state. edges=[]
07/23/2024 07:06:59 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:06:59 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 07:06:59 PM - DEBUG - defmap: {}
07/23/2024 07:06:59 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:59 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:06:59 PM - DEBUG - keep phismap: {}
07/23/2024 07:06:59 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:06:59 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:06:59 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:06:59 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000024A916E7B80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x0000024B07AB63A0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 07:06:59 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:06:59 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024B07C963A0>
07/23/2024 07:06:59 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 07:06:59 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 07:06:59 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 07:06:59 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x0000024A916E7B80>))
07/23/2024 07:06:59 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 07:06:59 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x0000024B07AB63A0>))
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 07:06:59 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 07:06:59 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 07:06:59 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 07:06:59 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 07:06:59 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 07:06:59 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 07:06:59 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 07:06:59 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 07:06:59 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 07:06:59 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 07:06:59 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 07:06:59 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 07:06:59 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 07:06:59 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 07:06:59 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x0000024B07C744C0>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x0000024B07C8CA30>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x0000024B07C8CBB0>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x0000024B07C74FA0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x0000024B07C74E80>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x0000024B07C9A2B0>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x0000024B07C8E5B0>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x0000024B07C8E730>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x0000024B07C9A8E0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x0000024B07C8EDF0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x0000024B07C8EF70>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x0000024B07C9A9A0>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x0000024B07C8F880>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x0000024B07C9AA60>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x0000024B07C8FE50>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x0000024B07C9AB20>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x0000024B07C98100>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x0000024B07C9ABE0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x0000024B07C91850>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x0000024B07C9ACA0>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x0000024B07C91DF0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x0000024B07C91F70>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x0000024B07C9AD60>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x0000024B07C94880>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x0000024B07C9AE20>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x0000024B07C94E50>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x0000024B07C61A30>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x0000024B07C9AEE0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x0000024B07C96550>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x0000024B07C966D0>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x0000024B07C9AFA0>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x0000024B07C615B0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x0000024B07C96FA0>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x0000024B07C9C0A0>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x0000024B07C985B0>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x0000024B07C9C160>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x0000024B07C61CD0>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x0000024B07C9C220>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x0000024B07C98F70>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x0000024B07C9A130>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x0000024B07C9A760>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000024B07C7D6A0>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x0000024B07C919D0>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x0000024B07C6B1F0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x0000024B07C874C0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x0000024B07C7DF40>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x0000024B07C7D820>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x0000024B07C87D00>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x0000024B07C8C1F0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x0000024B07C949A0>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x0000024B07C94490>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x0000024B07C7D9A0>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x0000024B07C74DC0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x0000024B07C7DB20>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x0000024B07C74970>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x0000024B07C8C040>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x0000024B07C74C70>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x0000024B07C8C700>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x0000024B07C8CE20>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x0000024B07C8E280>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x0000024B07C8E9A0>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000024B07C74760>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x0000024B07C8F220>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x0000024B07C8F580>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x0000024B07C8FB20>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x0000024B07C91100>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x0000024B07C91520>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x0000024B07C91AC0>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x0000024B07C94220>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x0000024B07C94580>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x0000024B07C94B20>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x0000024B07C96100>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x0000024B07C96940>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x0000024B07C96CA0>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x0000024B07C98280>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x0000024B07C98820>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x0000024B07C98C40>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x0000024B07C9A3A0>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x0000024B07C9A5E0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x0000024B07C709A0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x0000024B07C6B820>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x0000024B07C87220>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x0000024B07C87640>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x0000024B07C87A60>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x0000024B07C87E80>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x0000024B07C8A580>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x0000024B07C8A9A0>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x0000024B07C8AD00>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x0000024B07C8C2E0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x0000024B07C7D400>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x0000024B07C8A220>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x0000024B07C747F0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x0000024B07C7DD00>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x0000024B07C7D2E0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x0000024B07C7D520>, 0)]})
07/23/2024 07:06:59 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x0000024B07C963A0>
07/23/2024 07:11:04 PM - DEBUG - Logfile initialised
07/23/2024 07:11:14 PM - DEBUG - Logfile initialised
07/23/2024 07:11:56 PM - DEBUG - Logfile initialised
07/23/2024 07:11:57 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 07:12:11 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:12:11 PM - DEBUG - stack: []
07/23/2024 07:12:11 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 07:12:11 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 07:12:11 PM - DEBUG - end state. edges=[]
07/23/2024 07:12:11 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:12:11 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 07:12:11 PM - DEBUG - defmap: {}
07/23/2024 07:12:11 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:12:11 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:12:11 PM - DEBUG - keep phismap: {}
07/23/2024 07:12:11 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:12:11 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:12:11 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:12:11 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000215C765BD30>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 07:12:11 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:12:11 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002160B4C5280>
07/23/2024 07:12:11 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 07:12:11 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 07:12:11 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 07:12:11 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000215C765BD30>))
07/23/2024 07:12:11 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 07:12:11 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 07:12:11 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 07:12:11 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 07:12:11 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000002160B4CD070>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000002160B4CD7F0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000002160B4CD910>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000002160B4C5430>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000002160B4CD310>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000002160B4C59A0>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000002160B4CD3D0>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000002160B4C5F40>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000002160B4CD4F0>,
                                 0)]})
07/23/2024 07:12:11 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000002160B4C5280>
07/23/2024 07:12:11 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 07:12:11 PM - DEBUG - stack: []
07/23/2024 07:12:11 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 07:12:11 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 07:12:11 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 07:12:11 PM - DEBUG - stack ['$state74.34']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 07:12:11 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 07:12:11 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 07:12:11 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 07:12:11 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$state86.39']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 07:12:11 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$constants144.67']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 07:12:11 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$constants190.89']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 07:12:11 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$constants224.105']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack []
07/23/2024 07:12:11 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 07:12:11 PM - DEBUG - stack ['$const262.123']
07/23/2024 07:12:11 PM - DEBUG - end state. edges=[]
07/23/2024 07:12:11 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 07:12:11 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 07:12:11 PM - DEBUG - defmap: {}
07/23/2024 07:12:11 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:12:11 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 07:12:11 PM - DEBUG - keep phismap: {}
07/23/2024 07:12:11 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 07:12:11 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 07:12:11 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 07:12:11 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000215C765BD30>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000002160B4B6EE0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 07:12:11 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 07:12:11 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002160B69DBE0>
07/23/2024 07:12:11 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 07:12:11 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 07:12:11 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 07:12:11 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x00000215C765BD30>))
07/23/2024 07:12:11 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 07:12:11 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000002160B4B6EE0>))
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 07:12:11 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 07:12:11 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 07:12:11 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 07:12:11 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 07:12:11 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 07:12:11 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 07:12:11 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 07:12:11 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 07:12:11 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 07:12:11 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 07:12:11 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 07:12:11 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 07:12:11 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 07:12:11 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 07:12:11 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000002160B66CA90>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000002160B688430>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000002160B6885B0>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000002160B6644F0>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000002160B66CFA0>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000002160B66C1C0>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000002160B688F70>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000002160B68A130>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000002160B6992E0>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000002160B68A7F0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000002160B68A970>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000002160B6993A0>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000002160B68D280>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000002160B699460>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000002160B68D850>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000002160B699520>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000002160B672580>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000002160B6995E0>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000002160B68F250>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000002160B6996A0>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000002160B68F7F0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000002160B68F970>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000002160B699760>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000002160B692280>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000002160B699820>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000002160B692850>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000002160B672520>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000002160B6998E0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000002160B692F10>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000002160B6940D0>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000002160B6999A0>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000002160B6723D0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000002160B6949A0>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000002160B699A60>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000002160B694F70>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000002160B699B20>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000002160B672F70>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000002160B699BE0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000002160B696970>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000002160B696AF0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000002160B699160>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000002160B66BD90>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000002160B672970>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000002160B682130>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000002160B682E80>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000002160B682940>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000002160B4CDAC0>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000002160B682F10>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000002160B68A220>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000002160B6923A0>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000002160B692D60>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000002160B4CDDF0>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000002160B6945B0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000002160B6642B0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000002160B6960A0>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000002160B686A00>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000002160B696BE0>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000002160B688100>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000002160B688820>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000002160B688C40>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000002160B68A3A0>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000002160B672EE0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000002160B68ABE0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000002160B68AF40>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000002160B68D520>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000002160B68DAC0>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000002160B68DEE0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000002160B68F4C0>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000002160B68FBE0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000002160B68FF40>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000002160B692520>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000002160B692AC0>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000002160B694340>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000002160B6946A0>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000002160B694C40>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000002160B696220>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000002160B696640>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000002160B696D60>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000002160B696FA0>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000002160B672280>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000002160B6823A0>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000002160B682BE0>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000002160B684040>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000002160B684460>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000002160B684880>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000002160B684F40>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000002160B6863A0>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000002160B686700>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000002160B686CA0>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000002160B66B3D0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000002160B684BE0>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000002160B66C100>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000002160B682700>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000002160B66B370>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000002160B66BE80>, 0)]})
07/23/2024 07:12:11 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000002160B68F340>
07/23/2024 07:38:56 PM - DEBUG - Logfile initialised
07/23/2024 07:42:39 PM - DEBUG - Logfile initialised
07/23/2024 07:42:40 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 07:43:54 PM - DEBUG - Logfile initialised
07/23/2024 07:43:55 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 08:51:08 PM - DEBUG - Logfile initialised
07/23/2024 08:51:09 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 08:51:17 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value2.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value10.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/23/2024 08:51:17 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value24.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/23/2024 08:51:17 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value20.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/23/2024 08:51:17 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/23/2024 08:51:17 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/23/2024 08:51:17 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 08:51:17 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 08:51:17 PM - DEBUG - defmap: {}
07/23/2024 08:51:17 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:51:17 PM - DEBUG - keep phismap: {}
07/23/2024 08:51:17 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 08:51:17 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B9DC40>
07/23/2024 08:51:17 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B9DC40>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B9DC40>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B9DC40>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B9DC40>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B9DC40>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 08:51:17 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001CC89BB2BB0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001CC89BB2460>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001CC89BC0D00>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001CC89BC4040>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001CC89BC44F0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001CC89BC4760>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001CC89BC4A60>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001CC89BC4DC0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001CC89BC4F40>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001CC89BC0B50>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001CC89B9DD60>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001CC7823D100>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001CC89BC4640>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001CC89BB40A0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001CC89BB4460>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001CC89BB4340>,
                        0)]})
07/23/2024 08:51:17 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001CC89B9DC40>
07/23/2024 08:51:17 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value2.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value2.0', '$clip_value4.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack ['$6compare_op.2']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value10.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value10.0', '$clip_value12.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value10.0', '$14unary_negative.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/23/2024 08:51:17 PM - DEBUG - stack ['$16compare_op.3']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value24.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value24.0', '$clip_value26.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/23/2024 08:51:17 PM - DEBUG - stack ['$28compare_op.2']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/23/2024 08:51:17 PM - DEBUG - stack ['$value20.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/23/2024 08:51:17 PM - DEBUG - stack ['$clip_value32.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/23/2024 08:51:17 PM - DEBUG - stack ['$clip_value36.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/23/2024 08:51:17 PM - DEBUG - stack ['$38unary_negative.1']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 08:51:17 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/23/2024 08:51:17 PM - DEBUG - defmap: {}
07/23/2024 08:51:17 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:51:17 PM - DEBUG - keep phismap: {}
07/23/2024 08:51:17 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 08:51:17 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B4FD00>
07/23/2024 08:51:17 PM - DEBUG - on stmt: value = arg(0, name=value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: clip_value = arg(1, name=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $6compare_op.2 = value <= clip_value
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $8pred, 10, 24
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 10
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B4FD00>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $18pred, 20, 24
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 20
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B4FD00>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $22return_value.1 = cast(value=value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $22return_value.1
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 24
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B4FD00>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $28compare_op.2 = value > clip_value
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $30pred, 32, 36
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 32
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B4FD00>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $34return_value.1 = cast(value=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $34return_value.1
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 36
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B4FD00>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $40return_value.2
07/23/2024 08:51:17 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001CC89B4BA90>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001CC89B4B6A0>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001CC89B4B580>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001CC89B4BCD0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001CC89B4F1C0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001CC89B4F430>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001CC89B4F730>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001CC89B4FA90>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001CC89B4FC10>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001CC78266FD0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001CC89BB2880>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001CC89B4B5E0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001CC89B4F310>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001CC78266820>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001CC78266EE0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001CC78266D00>,
                        0)]})
07/23/2024 08:51:17 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001CC89B4FD00>
07/23/2024 08:51:17 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi14.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$const54.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 08:51:17 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 08:51:17 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 08:51:17 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 08:51:17 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 08:51:17 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 08:51:17 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 08:51:17 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001CC7AE86550>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B23340>
07/23/2024 08:51:17 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 08:51:17 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 08:51:17 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 08:51:17 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 08:51:17 PM - DEBUG - on stmt: jump 14
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B23340>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B23340>
07/23/2024 08:51:17 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 08:51:17 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B23340>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001CC7AE86550>))
07/23/2024 08:51:17 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 08:51:17 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 08:51:17 PM - DEBUG - on stmt: jump 55
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B23340>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89B23340>
07/23/2024 08:51:17 PM - DEBUG - on stmt: jump 14
07/23/2024 08:51:17 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001CC89B65370>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001CC89B65490>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001CC89B657C0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001CC89B658E0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001CC89B65A00>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001CC89B66100>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001CC89B66400>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001CC89B66670>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001CC89B23D30>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001CC89B66850>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001CC89B66C70>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001CC89B69040>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001CC89B691C0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001CC89B23EB0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001CC89B5DC70>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001CC89B651F0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001CC89B66250>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001CC89B235B0>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001CC89B236A0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001CC89B65700>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001CC89B23BB0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001CC89B66550>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001CC89B65CD0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001CC89B23A90>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001CC89B23850>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001CC89B23970>,
                         0)]})
07/23/2024 08:51:17 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001CC89B23340>
07/23/2024 08:51:17 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack ['$2load_global.0', '$8call_function.3']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack ['$10call_function.4']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - stack: ['$phi14.0']
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi14.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/23/2024 08:51:17 PM - DEBUG - stack: []
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack []
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$const54.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/23/2024 08:51:17 PM - DEBUG - stack: ['$phi16.0', '$phi16.1']
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$phi16.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi16.0', '$26compare_op.6']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - stack: ['$phi30.0']
07/23/2024 08:51:17 PM - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$30load_global.1']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/23/2024 08:51:17 PM - DEBUG - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/23/2024 08:51:17 PM - DEBUG - stack ['$phi30.0']
07/23/2024 08:51:17 PM - DEBUG - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/23/2024 08:51:17 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 08:51:17 PM - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/23/2024 08:51:17 PM - DEBUG - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/23/2024 08:51:17 PM - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 08:51:17 PM - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/23/2024 08:51:17 PM - DEBUG - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/23/2024 08:51:17 PM - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/23/2024 08:51:17 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/23/2024 08:51:17 PM - DEBUG - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:51:17 PM - DEBUG - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001CC7AE863A0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89BEA220>
07/23/2024 08:51:17 PM - DEBUG - on stmt: noise_array = arg(0, name=noise_array)
07/23/2024 08:51:17 PM - DEBUG - on stmt: sigmas = arg(1, name=sigmas)
07/23/2024 08:51:17 PM - DEBUG - on stmt: idx = arg(2, name=idx)
07/23/2024 08:51:17 PM - DEBUG - on stmt: RNG = arg(3, name=RNG)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $phi14.0 = $12get_iter.5
07/23/2024 08:51:17 PM - DEBUG - on stmt: jump 14
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 14
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89BEA220>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $phi16.1 = $14for_iter.2
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $14for_iter.3, 16, 54
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 16
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89BEA220>
07/23/2024 08:51:17 PM - DEBUG - on stmt: i = $phi16.1
07/23/2024 08:51:17 PM - DEBUG - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $const24.5 = const(float, 0.0)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/23/2024 08:51:17 PM - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: branch $28pred, 30, 55
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 30
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89BEA220>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001CC7AE863A0>))
07/23/2024 08:51:17 PM - DEBUG - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/23/2024 08:51:17 PM - DEBUG - on stmt: noise_array[i] = $44binary_multiply.8
07/23/2024 08:51:17 PM - DEBUG - on stmt: jump 55
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 54
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89BEA220>
07/23/2024 08:51:17 PM - DEBUG - on stmt: $const54.0 = const(NoneType, None)
07/23/2024 08:51:17 PM - DEBUG - on stmt: $56return_value.1 = cast(value=$const54.0)
07/23/2024 08:51:17 PM - DEBUG - on stmt: return $56return_value.1
07/23/2024 08:51:17 PM - DEBUG - ==== SSA block analysis pass on 55
07/23/2024 08:51:17 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89BEA220>
07/23/2024 08:51:17 PM - DEBUG - on stmt: jump 14
07/23/2024 08:51:17 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001CC89BEAE80>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001CC89BEAFA0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001CC89BED310>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001CC89BED430>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001CC89BED550>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001CC89BEDC10>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001CC89BEDF10>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001CC89BEF1C0>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001CC89BEA880>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001CC89BEF3A0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001CC89BEF7C0>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001CC89BEFB50>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001CC89BEFCD0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001CC89BEAA00>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001CC89BF1220>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001CC89BEAD00>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001CC89BEDD60>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001CC89BEFF70>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001CC89BEABB0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001CC89BED250>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001CC89BEA700>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001CC89BEF0A0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001CC89BED820>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001CC89BEA5E0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001CC89BEA3A0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001CC89BEA4C0>,
                         0)]})
07/23/2024 08:51:17 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001CC89BEA220>
07/23/2024 08:51:17 PM - DEBUG - Logfile initialised
07/23/2024 08:51:17 PM - INFO - ODE_Explorer_Controller initialized
07/23/2024 08:52:53 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=118)
           2	LOAD_DEREF(arg=0, lineno=128)
           4	LOAD_FAST(arg=0, lineno=128)
           6	LOAD_FAST(arg=2, lineno=128)
           8	BINARY_MULTIPLY(arg=None, lineno=128)
          10	LOAD_FAST(arg=1, lineno=128)
          12	BINARY_ADD(arg=None, lineno=128)
          14	LOAD_FAST(arg=3, lineno=128)
          16	CALL_FUNCTION(arg=2, lineno=128)
          18	RETURN_VALUE(arg=None, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 08:52:53 PM - DEBUG - stack: []
07/23/2024 08:52:53 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=118)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$a4.1']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=128)
07/23/2024 08:52:53 PM - DEBUG - stack ['$16call_function.7']
07/23/2024 08:52:53 PM - DEBUG - end state. edges=[]
07/23/2024 08:52:53 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 08:52:53 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 08:52:53 PM - DEBUG - defmap: {}
07/23/2024 08:52:53 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:52:53 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:52:53 PM - DEBUG - keep phismap: {}
07/23/2024 08:52:53 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 08:52:53 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 08:52:53 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:52:53 PM - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001CC78236B80>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/23/2024 08:52:53 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 08:52:53 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC89C87400>
07/23/2024 08:52:53 PM - DEBUG - on stmt: a = arg(0, name=a)
07/23/2024 08:52:53 PM - DEBUG - on stmt: b = arg(1, name=b)
07/23/2024 08:52:53 PM - DEBUG - on stmt: feedback_state = arg(2, name=feedback_state)
07/23/2024 08:52:53 PM - DEBUG - on stmt: cliplevel = arg(3, name=cliplevel)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001CC78236B80>))
07/23/2024 08:52:53 PM - DEBUG - on stmt: $8binary_multiply.3 = a * feedback_state
07/23/2024 08:52:53 PM - DEBUG - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/23/2024 08:52:53 PM - DEBUG - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, diffeq_system.py:128), Var(cliplevel, diffeq_system.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/23/2024 08:52:53 PM - DEBUG - on stmt: return $18return_value.8
07/23/2024 08:52:53 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001CC89C8C4F0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001CC89C8C7C0>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001CC89C8C8E0>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001CC89C87E20>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001CC89C8C250>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001CC89C87940>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001CC89C87A60>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001CC89C87CA0>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001CC89C87B80>,
                                 0)]})
07/23/2024 08:52:53 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001CC89C87400>
07/23/2024 08:52:53 PM - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_DEREF(arg=0, lineno=151)
           4	LOAD_GLOBAL(arg=0, lineno=151)
           6	LOAD_ATTR(arg=1, lineno=151)
           8	LOAD_METHOD(arg=2, lineno=151)
          10	LOAD_DEREF(arg=2, lineno=151)
          12	LOAD_FAST(arg=2, lineno=151)
          14	LOAD_CONST(arg=1, lineno=151)
          16	BINARY_SUBSCR(arg=None, lineno=151)
          18	LOAD_FAST(arg=3, lineno=151)
          20	BINARY_MULTIPLY(arg=None, lineno=151)
          22	CALL_FUNCTION(arg=1, lineno=151)
          24	CALL_METHOD(arg=1, lineno=151)
          26	LOAD_FAST(arg=2, lineno=151)
          28	LOAD_CONST(arg=2, lineno=151)
          30	BINARY_SUBSCR(arg=None, lineno=151)
          32	BINARY_MULTIPLY(arg=None, lineno=151)
          34	LOAD_FAST(arg=2, lineno=151)
          36	LOAD_CONST(arg=3, lineno=151)
          38	BINARY_SUBSCR(arg=None, lineno=151)
          40	CALL_FUNCTION(arg=2, lineno=151)
          42	STORE_FAST(arg=4, lineno=151)
          44	LOAD_DEREF(arg=1, lineno=154)
          46	LOAD_FAST(arg=2, lineno=154)
          48	LOAD_CONST(arg=4, lineno=154)
          50	BINARY_SUBSCR(arg=None, lineno=154)
          52	LOAD_FAST(arg=2, lineno=154)
          54	LOAD_CONST(arg=5, lineno=154)
          56	BINARY_SUBSCR(arg=None, lineno=154)
          58	LOAD_FAST(arg=1, lineno=154)
          60	LOAD_CONST(arg=6, lineno=154)
          62	BINARY_SUBSCR(arg=None, lineno=154)
          64	LOAD_FAST(arg=2, lineno=154)
          66	LOAD_CONST(arg=3, lineno=154)
          68	BINARY_SUBSCR(arg=None, lineno=154)
          70	CALL_FUNCTION(arg=4, lineno=154)
          72	STORE_FAST(arg=5, lineno=154)
          74	LOAD_FAST(arg=1, lineno=156)
          76	LOAD_CONST(arg=7, lineno=156)
          78	BINARY_SUBSCR(arg=None, lineno=156)
          80	LOAD_FAST(arg=0, lineno=156)
          82	LOAD_CONST(arg=8, lineno=156)
          84	STORE_SUBSCR(arg=None, lineno=156)
          86	LOAD_FAST(arg=1, lineno=157)
          88	LOAD_CONST(arg=8, lineno=157)
          90	BINARY_SUBSCR(arg=None, lineno=157)
          92	UNARY_NEGATIVE(arg=None, lineno=157)
          94	LOAD_FAST(arg=2, lineno=157)
          96	LOAD_CONST(arg=9, lineno=157)
          98	BINARY_SUBSCR(arg=None, lineno=157)
         100	LOAD_FAST(arg=1, lineno=157)
         102	LOAD_CONST(arg=7, lineno=157)
         104	BINARY_SUBSCR(arg=None, lineno=157)
         106	BINARY_MULTIPLY(arg=None, lineno=157)
         108	BINARY_SUBTRACT(arg=None, lineno=157)
         110	LOAD_FAST(arg=2, lineno=157)
         112	LOAD_CONST(arg=8, lineno=157)
         114	BINARY_SUBSCR(arg=None, lineno=157)
         116	LOAD_FAST(arg=1, lineno=157)
         118	LOAD_CONST(arg=10, lineno=157)
         120	BINARY_SUBSCR(arg=None, lineno=157)
         122	BINARY_MULTIPLY(arg=None, lineno=157)
         124	BINARY_ADD(arg=None, lineno=157)
         126	LOAD_FAST(arg=2, lineno=157)
         128	LOAD_CONST(arg=11, lineno=157)
         130	BINARY_SUBSCR(arg=None, lineno=157)
         132	LOAD_FAST(arg=4, lineno=157)
         134	BINARY_MULTIPLY(arg=None, lineno=157)
         136	BINARY_ADD(arg=None, lineno=157)
         138	LOAD_FAST(arg=0, lineno=157)
         140	LOAD_CONST(arg=7, lineno=157)
         142	STORE_SUBSCR(arg=None, lineno=157)
         144	LOAD_FAST(arg=2, lineno=158)
         146	LOAD_CONST(arg=7, lineno=158)
         148	BINARY_SUBSCR(arg=None, lineno=158)
         150	UNARY_NEGATIVE(arg=None, lineno=158)
         152	LOAD_FAST(arg=1, lineno=158)
         154	LOAD_CONST(arg=10, lineno=158)
         156	BINARY_SUBSCR(arg=None, lineno=158)
         158	BINARY_MULTIPLY(arg=None, lineno=158)
         160	LOAD_FAST(arg=2, lineno=158)
         162	LOAD_CONST(arg=10, lineno=158)
         164	BINARY_SUBSCR(arg=None, lineno=158)
         166	LOAD_FAST(arg=1, lineno=158)
         168	LOAD_CONST(arg=9, lineno=158)
         170	BINARY_SUBSCR(arg=None, lineno=158)
         172	BINARY_MULTIPLY(arg=None, lineno=158)
         174	LOAD_FAST(arg=1, lineno=158)
         176	LOAD_CONST(arg=9, lineno=158)
         178	BINARY_SUBSCR(arg=None, lineno=158)
         180	BINARY_MULTIPLY(arg=None, lineno=158)
         182	BINARY_ADD(arg=None, lineno=158)
         184	LOAD_FAST(arg=0, lineno=158)
         186	LOAD_CONST(arg=10, lineno=158)
         188	STORE_SUBSCR(arg=None, lineno=158)
         190	LOAD_FAST(arg=2, lineno=159)
         192	LOAD_CONST(arg=12, lineno=159)
         194	BINARY_SUBSCR(arg=None, lineno=159)
         196	UNARY_NEGATIVE(arg=None, lineno=159)
         198	LOAD_FAST(arg=1, lineno=159)
         200	LOAD_CONST(arg=9, lineno=159)
         202	BINARY_SUBSCR(arg=None, lineno=159)
         204	BINARY_MULTIPLY(arg=None, lineno=159)
         206	LOAD_FAST(arg=2, lineno=159)
         208	LOAD_CONST(arg=12, lineno=159)
         210	BINARY_SUBSCR(arg=None, lineno=159)
         212	LOAD_FAST(arg=5, lineno=159)
         214	BINARY_MULTIPLY(arg=None, lineno=159)
         216	BINARY_ADD(arg=None, lineno=159)
         218	LOAD_FAST(arg=0, lineno=159)
         220	LOAD_CONST(arg=9, lineno=159)
         222	STORE_SUBSCR(arg=None, lineno=159)
         224	LOAD_FAST(arg=2, lineno=160)
         226	LOAD_CONST(arg=13, lineno=160)
         228	BINARY_SUBSCR(arg=None, lineno=160)
         230	UNARY_NEGATIVE(arg=None, lineno=160)
         232	LOAD_FAST(arg=1, lineno=160)
         234	LOAD_CONST(arg=6, lineno=160)
         236	BINARY_SUBSCR(arg=None, lineno=160)
         238	BINARY_MULTIPLY(arg=None, lineno=160)
         240	LOAD_FAST(arg=2, lineno=160)
         242	LOAD_CONST(arg=14, lineno=160)
         244	BINARY_SUBSCR(arg=None, lineno=160)
         246	LOAD_FAST(arg=1, lineno=160)
         248	LOAD_CONST(arg=7, lineno=160)
         250	BINARY_SUBSCR(arg=None, lineno=160)
         252	BINARY_MULTIPLY(arg=None, lineno=160)
         254	BINARY_ADD(arg=None, lineno=160)
         256	LOAD_FAST(arg=0, lineno=160)
         258	LOAD_CONST(arg=6, lineno=160)
         260	STORE_SUBSCR(arg=None, lineno=160)
         262	LOAD_CONST(arg=15, lineno=160)
         264	RETURN_VALUE(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/23/2024 08:52:53 PM - DEBUG - stack: []
07/23/2024 08:52:53 PM - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=131)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$4load_global.1']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$6load_attr.2']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=151)
07/23/2024 08:52:53 PM - DEBUG - stack ['$40call_function.19']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=154)
07/23/2024 08:52:53 PM - DEBUG - stack ['$70call_function.33']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=156)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=156)
07/23/2024 08:52:53 PM - DEBUG - stack ['$state74.34']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=156)
07/23/2024 08:52:53 PM - DEBUG - stack ['$state74.34', '$const76.35']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=156)
07/23/2024 08:52:53 PM - DEBUG - stack ['$78binary_subscr.36']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=156)
07/23/2024 08:52:53 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=156)
07/23/2024 08:52:53 PM - DEBUG - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$state86.39']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$state86.39', '$const88.40']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$90binary_subscr.41']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$124binary_add.58']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$124binary_add.58', '$134binary_multiply.63']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$136binary_add.64']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=157)
07/23/2024 08:52:53 PM - DEBUG - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$constants144.67']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$constants144.67', '$const146.68']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$148binary_subscr.69']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$150unary_negative.70']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$182binary_add.86']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=158)
07/23/2024 08:52:53 PM - DEBUG - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$constants190.89']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$constants190.89', '$const192.90']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$194binary_subscr.91']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$196unary_negative.92']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$204binary_multiply.96']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$216binary_add.102']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=159)
07/23/2024 08:52:53 PM - DEBUG - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$constants224.105']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$constants224.105', '$const226.106']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$228binary_subscr.107']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$230unary_negative.108']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$254binary_add.120']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack []
07/23/2024 08:52:53 PM - DEBUG - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=160)
07/23/2024 08:52:53 PM - DEBUG - stack ['$const262.123']
07/23/2024 08:52:53 PM - DEBUG - end state. edges=[]
07/23/2024 08:52:53 PM - DEBUG - -------------------------Prune PHIs-------------------------
07/23/2024 08:52:53 PM - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/23/2024 08:52:53 PM - DEBUG - defmap: {}
07/23/2024 08:52:53 PM - DEBUG - phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:52:53 PM - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
07/23/2024 08:52:53 PM - DEBUG - keep phismap: {}
07/23/2024 08:52:53 PM - DEBUG - new_out: defaultdict(<class 'dict'>, {})
07/23/2024 08:52:53 PM - DEBUG - ----------------------DONE Prune PHIs-----------------------
07/23/2024 08:52:53 PM - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/23/2024 08:52:53 PM - DEBUG - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001CC78236B80>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float64'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001CC89C6ED30>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/23/2024 08:52:53 PM - DEBUG - ==== SSA block analysis pass on 0
07/23/2024 08:52:53 PM - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001CC8D551490>
07/23/2024 08:52:53 PM - DEBUG - on stmt: outarray = arg(0, name=outarray)
07/23/2024 08:52:53 PM - DEBUG - on stmt: state = arg(1, name=state)
07/23/2024 08:52:53 PM - DEBUG - on stmt: constants = arg(2, name=constants)
07/23/2024 08:52:53 PM - DEBUG - on stmt: t = arg(3, name=t)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_64 at 0x000001CC78236B80>))
07/23/2024 08:52:53 PM - DEBUG - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float64'>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const14.6 = const(int, 13)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/23/2024 08:52:53 PM - DEBUG - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const28.13 = const(int, 9)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const36.17 = const(int, 10)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, diffeq_system.py:151), Var($38binary_subscr.18, diffeq_system.py:151)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001CC89C6ED30>))
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const48.22 = const(int, 11)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const54.25 = const(int, 12)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const60.28 = const(int, 4)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const66.31 = const(int, 10)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, diffeq_system.py:154), Var($56binary_subscr.26, diffeq_system.py:154), Var($62binary_subscr.29, diffeq_system.py:154), Var($68binary_subscr.32, diffeq_system.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const76.35 = const(int, 1)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const82.38 = const(int, 0)
07/23/2024 08:52:53 PM - DEBUG - on stmt: outarray[0] = $78binary_subscr.36
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const88.40 = const(int, 0)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const96.44 = const(int, 3)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const102.47 = const(int, 1)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/23/2024 08:52:53 PM - DEBUG - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const112.52 = const(int, 0)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const118.55 = const(int, 2)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/23/2024 08:52:53 PM - DEBUG - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const128.60 = const(int, 7)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/23/2024 08:52:53 PM - DEBUG - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const140.66 = const(int, 1)
07/23/2024 08:52:53 PM - DEBUG - on stmt: outarray[1] = $136binary_add.64
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const146.68 = const(int, 1)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const154.72 = const(int, 2)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const162.76 = const(int, 2)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const168.79 = const(int, 3)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const176.83 = const(int, 3)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/23/2024 08:52:53 PM - DEBUG - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const186.88 = const(int, 2)
07/23/2024 08:52:53 PM - DEBUG - on stmt: outarray[2] = $182binary_add.86
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const192.90 = const(int, 6)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const200.94 = const(int, 3)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const208.98 = const(int, 6)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/23/2024 08:52:53 PM - DEBUG - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const220.104 = const(int, 3)
07/23/2024 08:52:53 PM - DEBUG - on stmt: outarray[3] = $216binary_add.102
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const226.106 = const(int, 5)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const234.110 = const(int, 4)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const242.114 = const(int, 8)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const248.117 = const(int, 1)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/23/2024 08:52:53 PM - DEBUG - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const258.122 = const(int, 4)
07/23/2024 08:52:53 PM - DEBUG - on stmt: outarray[4] = $254binary_add.120
07/23/2024 08:52:53 PM - DEBUG - on stmt: $const262.123 = const(NoneType, None)
07/23/2024 08:52:53 PM - DEBUG - on stmt: $264return_value.124 = cast(value=$const262.123)
07/23/2024 08:52:53 PM - DEBUG - on stmt: return $264return_value.124
07/23/2024 08:52:53 PM - DEBUG - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001CC8D54EB20>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001CC8D541A90>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001CC8D541C10>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001CC8D539250>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001CC8D529400>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001CC8D550310>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001CC8D543610>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001CC8D543790>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001CC8D550940>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001CC8D543E50>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001CC8D543FD0>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001CC8D550A00>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001CC8D5458E0>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001CC8D550AC0>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001CC8D545EB0>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001CC8D550B80>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001CC8D541670>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001CC8D550C40>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001CC8D5478B0>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001CC8D550D00>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001CC8D547E50>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001CC8D547FD0>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001CC8D550DC0>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001CC8D54A8E0>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001CC8D550E80>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001CC8D54AEB0>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001CC8D539940>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001CC8D550F40>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001CC8D54C5B0>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001CC8D54C730>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001CC8D553040>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001CC8D539AF0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001CC8D54E040>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001CC8D553100>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001CC8D54E610>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001CC8D5531C0>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001CC8D539CA0>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001CC8D553280>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001CC8D54EFD0>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001CC8D550190>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001CC8D5507C0>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001CC8D529C10>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001CC8D53F910>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001CC8D53B220>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001CC8D545FA0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001CC89C8C130>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001CC8D529D90>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001CC8D545A00>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001CC8D539820>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001CC89C84400>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001CC89C84970>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001CC8D529F10>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001CC89C846A0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001CC8D5390D0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001CC8D54C820>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001CC8D5410A0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001CC8D54E160>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001CC8D541760>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001CC8D541E80>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001CC8D5432E0>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001CC8D543A00>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001CC8D5394F0>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001CC8D545280>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001CC8D5455E0>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001CC8D545B80>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001CC8D547160>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001CC8D547580>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001CC8D547B20>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001CC8D54A280>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001CC8D54A5E0>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001CC8D54AB80>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001CC8D54C160>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001CC8D54C9A0>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001CC8D54CD00>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001CC8D54E2E0>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001CC8D54E880>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001CC8D54ECA0>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001CC8D550400>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001CC8D550640>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001CC8D539EB0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001CC8D529580>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001CC89C46F10>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001CC8D53B6A0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001CC8D53BAC0>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001CC8D53BEE0>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001CC8D53F5E0>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001CC8D53FA00>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001CC8D53FD60>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001CC8D541340>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001CC8D5291F0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001CC8D53F280>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001CC8D529370>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001CC89C87160>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001CC8D5299D0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001CC8D529190>, 0)]})
07/23/2024 08:52:53 PM - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001CC8D553DC0>
