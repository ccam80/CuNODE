07/29/2024 02:23:41 PM - DEBUG - init_logging - Logfile initialised
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 1
07/29/2024 02:23:42 PM - DEBUG - on_to_change - To changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: PSD at selected frequency
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: Time
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: Signal Amplitude
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: Parameter 1
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: Frequency
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: PSD Magnitude
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_from_change - From changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_n_change - To changed to: 100
07/29/2024 02:23:42 PM - DEBUG - on_from_change - From changed to: 0
07/29/2024 02:23:42 PM - DEBUG - on_n_change - To changed to: 100
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - DEBUG - on_var_change - Variable changed to: 
07/29/2024 02:23:42 PM - INFO - __init__ - ODE_Explorer_Controller initialized
07/29/2024 02:25:18 PM - DEBUG - update_zScale - Z Scale updated
07/29/2024 02:25:18 PM - DEBUG - on_scale_change - scale changed to: Logarithmic
07/29/2024 05:30:14 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=30)
           2	LOAD_FAST(arg=0, lineno=36)
           4	LOAD_FAST(arg=1, lineno=36)
           6	COMPARE_OP(arg=1, lineno=36)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          10	LOAD_FAST(arg=0, lineno=36)
          12	LOAD_FAST(arg=1, lineno=36)
          14	UNARY_NEGATIVE(arg=None, lineno=36)
          16	COMPARE_OP(arg=5, lineno=36)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=36)
          20	LOAD_FAST(arg=0, lineno=37)
          22	RETURN_VALUE(arg=None, lineno=37)
>         24	LOAD_FAST(arg=0, lineno=38)
          26	LOAD_FAST(arg=1, lineno=38)
          28	COMPARE_OP(arg=4, lineno=38)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=38)
          32	LOAD_FAST(arg=1, lineno=39)
          34	RETURN_VALUE(arg=None, lineno=39)
>         36	LOAD_FAST(arg=1, lineno=41)
          38	UNARY_NEGATIVE(arg=None, lineno=41)
          40	RETURN_VALUE(arg=None, lineno=41)
          42	LOAD_CONST(arg=0, lineno=41)
          44	RETURN_VALUE(arg=None, lineno=41)
07/29/2024 05:30:14 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:14 PM - DEBUG - run - stack: []
07/29/2024 05:30:14 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=30)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value2.0']
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value2.0', '$clip_value4.1']
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$6compare_op.2']
07/29/2024 05:30:14 PM - DEBUG - run - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 05:30:14 PM - DEBUG - run - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 05:30:14 PM - DEBUG - run - stack: []
07/29/2024 05:30:14 PM - DEBUG - run - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value10.0']
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value10.0', '$clip_value12.1']
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value10.0', '$14unary_negative.2']
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=36)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$16compare_op.3']
07/29/2024 05:30:14 PM - DEBUG - run - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 05:30:14 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 05:30:14 PM - DEBUG - run - stack: []
07/29/2024 05:30:14 PM - DEBUG - run - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=38)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=38)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value24.0']
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=38)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value24.0', '$clip_value26.1']
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=38)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$28compare_op.2']
07/29/2024 05:30:14 PM - DEBUG - run - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/29/2024 05:30:14 PM - DEBUG - run - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:14 PM - DEBUG - run - stack: []
07/29/2024 05:30:14 PM - DEBUG - run - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=37)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:14 PM - DEBUG - dispatch - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=37)
07/29/2024 05:30:14 PM - DEBUG - dispatch - stack ['$value20.0']
07/29/2024 05:30:14 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:14 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=39)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=39)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$clip_value32.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=41)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=41)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$clip_value36.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=41)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$38unary_negative.1']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 05:30:15 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - interpret - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3424C0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: value = arg(0, name=value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: clip_value = arg(1, name=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $6compare_op.2 = value <= clip_value
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool8 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $8pred, 10, 24
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 10
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3424C0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool18 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:36),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $18pred, 20, 24
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 20
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3424C0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $22return_value.1 = cast(value=value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $22return_value.1
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 24
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3424C0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $28compare_op.2 = value > clip_value
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool30 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:38),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $30pred, 32, 36
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 32
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3424C0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $34return_value.1 = cast(value=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $34return_value.1
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 36
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3424C0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $40return_value.2
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001D607EF4BE0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001D607EF4D90>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001D607EF49D0>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001D607EF46D0>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001D607EF41C0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001D607EF3EE0>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001D607EF3BE0>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001D607EF3880>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001D607EF3700>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001D607EF5910>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001D607EF56A0>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001D607EF4EE0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001D607EF4040>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001D607EF57C0>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001D607EF50A0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001D607F01D00>,
                        0)]})
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D60D3424C0>
07/29/2024 05:30:15 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_FAST(arg=0, lineno=49)
           4	LOAD_FAST(arg=1, lineno=49)
           6	COMPARE_OP(arg=1, lineno=49)
           8	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          10	LOAD_FAST(arg=0, lineno=49)
          12	LOAD_FAST(arg=1, lineno=49)
          14	UNARY_NEGATIVE(arg=None, lineno=49)
          16	COMPARE_OP(arg=5, lineno=49)
          18	POP_JUMP_IF_FALSE(arg=24, lineno=49)
          20	LOAD_FAST(arg=0, lineno=50)
          22	RETURN_VALUE(arg=None, lineno=50)
>         24	LOAD_FAST(arg=0, lineno=51)
          26	LOAD_FAST(arg=1, lineno=51)
          28	COMPARE_OP(arg=4, lineno=51)
          30	POP_JUMP_IF_FALSE(arg=36, lineno=51)
          32	LOAD_FAST(arg=1, lineno=52)
          34	RETURN_VALUE(arg=None, lineno=52)
>         36	LOAD_FAST(arg=1, lineno=54)
          38	UNARY_NEGATIVE(arg=None, lineno=54)
          40	RETURN_VALUE(arg=None, lineno=54)
          42	LOAD_CONST(arg=0, lineno=54)
          44	RETURN_VALUE(arg=None, lineno=54)
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=43)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value2.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value2.0', '$clip_value4.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$6compare_op.2']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=10 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value10.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=14, inst=UNARY_NEGATIVE(arg=None, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value10.0', '$clip_value12.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=16, inst=COMPARE_OP(arg=5, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value10.0', '$14unary_negative.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=24, lineno=49)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$16compare_op.3']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=24 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=51)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=51)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value24.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=28, inst=COMPARE_OP(arg=4, lineno=51)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value24.0', '$clip_value26.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=36, lineno=51)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$28compare_op.2']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=20 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=50)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=50)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$value20.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=32 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=52)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=52)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$clip_value32.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=36 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=54)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=54)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$clip_value36.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=54)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$38unary_negative.1']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 05:30:15 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$clip_value4.1'}), (6, {'lhs': '$value2.0', 'rhs': '$clip_value4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 24: ()})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$value10.0'}), (12, {'res': '$clip_value12.1'}), (14, {'value': '$clip_value12.1', 'res': '$14unary_negative.2'}), (16, {'lhs': '$value10.0', 'rhs': '$14unary_negative.2', 'res': '$16compare_op.3'}), (18, {'pred': '$16compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 24: ()})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$value20.0'}), (22, {'retval': '$value20.0', 'castval': '$22return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$value24.0'}), (26, {'res': '$clip_value26.1'}), (28, {'lhs': '$value24.0', 'rhs': '$clip_value26.1', 'res': '$28compare_op.2'}), (30, {'pred': '$28compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 36: ()})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$clip_value32.0'}), (34, {'retval': '$clip_value32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$clip_value36.0'}), (38, {'value': '$clip_value36.0', 'res': '$38unary_negative.1'}), (40, {'retval': '$38unary_negative.1', 'castval': '$40return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - interpret - label 0:
    value = arg(0, name=value)               ['value']
    clip_value = arg(1, name=clip_value)     ['clip_value']
    $6compare_op.2 = value <= clip_value     ['$6compare_op.2', 'clip_value', 'value']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 24                    ['$8pred']
label 10:
    $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value) ['$14unary_negative.2', 'clip_value']
    $16compare_op.3 = value >= $14unary_negative.2 ['$14unary_negative.2', '$16compare_op.3', 'value']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 24                   ['$18pred']
label 20:
    $22return_value.1 = cast(value=value)    ['$22return_value.1', 'value']
    return $22return_value.1                 ['$22return_value.1']
label 24:
    $28compare_op.2 = value > clip_value     ['$28compare_op.2', 'clip_value', 'value']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None) ['$28compare_op.2', '$30pred', 'bool30']
    branch $30pred, 32, 36                   ['$30pred']
label 32:
    $34return_value.1 = cast(value=clip_value) ['$34return_value.1', 'clip_value']
    return $34return_value.1                 ['$34return_value.1']
label 36:
    $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value) ['$38unary_negative.1', 'clip_value']
    $40return_value.2 = cast(value=$38unary_negative.1) ['$38unary_negative.1', '$40return_value.2']
    return $40return_value.2                 ['$40return_value.2']

07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D599DB80>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: value = arg(0, name=value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: clip_value = arg(1, name=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $6compare_op.2 = value <= clip_value
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool8 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $8pred, 10, 24
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 10
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D599DB80>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14unary_negative.2 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $16compare_op.3 = value >= $14unary_negative.2
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool18 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $18pred = call bool18($16compare_op.3, func=bool18, args=(Var($16compare_op.3, _utils.py:49),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $18pred, 20, 24
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 20
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D599DB80>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $22return_value.1 = cast(value=value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $22return_value.1
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 24
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D599DB80>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $28compare_op.2 = value > clip_value
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool30 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $30pred = call bool30($28compare_op.2, func=bool30, args=(Var($28compare_op.2, _utils.py:51),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $30pred, 32, 36
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 32
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D599DB80>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $34return_value.1 = cast(value=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $34return_value.1
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 36
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D599DB80>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $38unary_negative.1 = unary(fn=<built-in function neg>, value=clip_value)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $40return_value.2 = cast(value=$38unary_negative.1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $40return_value.2
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$14unary_negative.2': [(<numba.core.ir.Assign object at 0x000001D5BA5B38E0>,
                                      10)],
             '$16compare_op.3': [(<numba.core.ir.Assign object at 0x000001D5BA5B3A90>,
                                  10)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001D5BA5B3D00>,
                          10)],
             '$22return_value.1': [(<numba.core.ir.Assign object at 0x000001D5D599D040>,
                                    20)],
             '$28compare_op.2': [(<numba.core.ir.Assign object at 0x000001D5D599D4F0>,
                                  24)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001D5D599D760>,
                          24)],
             '$34return_value.1': [(<numba.core.ir.Assign object at 0x000001D5D599DA60>,
                                    32)],
             '$38unary_negative.1': [(<numba.core.ir.Assign object at 0x000001D5D599DDC0>,
                                      36)],
             '$40return_value.2': [(<numba.core.ir.Assign object at 0x000001D5D599DF40>,
                                    36)],
             '$6compare_op.2': [(<numba.core.ir.Assign object at 0x000001D607EEC5B0>,
                                 0)],
             '$8pred': [(<numba.core.ir.Assign object at 0x000001D5BA5B3400>,
                         0)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001D5BA5B3BE0>,
                         10)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001D5D599D640>,
                         24)],
             'bool8': [(<numba.core.ir.Assign object at 0x000001D5BA5B3790>,
                        0)],
             'clip_value': [(<numba.core.ir.Assign object at 0x000001D607EECAC0>,
                             0)],
             'value': [(<numba.core.ir.Assign object at 0x000001D607EEC400>,
                        0)]})
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D5D599DB80>
07/29/2024 05:30:15 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=56)
           2	LOAD_GLOBAL(arg=0, lineno=68)
           4	LOAD_GLOBAL(arg=1, lineno=68)
           6	LOAD_FAST(arg=0, lineno=68)
           8	CALL_FUNCTION(arg=1, lineno=68)
          10	CALL_FUNCTION(arg=1, lineno=68)
          12	GET_ITER(arg=None, lineno=68)
>         14	FOR_ITER(arg=38, lineno=68)
          16	STORE_FAST(arg=4, lineno=68)
          18	LOAD_FAST(arg=1, lineno=69)
          20	LOAD_FAST(arg=4, lineno=69)
          22	BINARY_SUBSCR(arg=None, lineno=69)
          24	LOAD_CONST(arg=1, lineno=69)
          26	COMPARE_OP(arg=3, lineno=69)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=69)
          30	LOAD_GLOBAL(arg=2, lineno=70)
          32	LOAD_FAST(arg=3, lineno=70)
          34	LOAD_FAST(arg=2, lineno=70)
          36	CALL_FUNCTION(arg=2, lineno=70)
          38	LOAD_FAST(arg=1, lineno=70)
          40	LOAD_FAST(arg=4, lineno=70)
          42	BINARY_SUBSCR(arg=None, lineno=70)
          44	BINARY_MULTIPLY(arg=None, lineno=70)
          46	LOAD_FAST(arg=0, lineno=70)
          48	LOAD_FAST(arg=4, lineno=70)
          50	STORE_SUBSCR(arg=None, lineno=70)
          52	JUMP_ABSOLUTE(arg=14, lineno=70)
>         54	LOAD_CONST(arg=0, lineno=70)
          56	RETURN_VALUE(arg=None, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=56)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0', '$8call_function.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=12, inst=GET_ITER(arg=None, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$10call_function.4']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: ['$phi14.0']
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi14.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$const54.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: ['$phi16.0', '$phi16.1']
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=68)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$phi16.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=69)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=69)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=69)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=69)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=69)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$26compare_op.6']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: ['$phi30.0']
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=70)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 05:30:15 PM - DEBUG - apply_changes - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/29/2024 05:30:15 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - interpret - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001D5BA73FAF0>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3669A0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array = arg(0, name=noise_array)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: sigmas = arg(1, name=sigmas)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: idx = arg(2, name=idx)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: RNG = arg(3, name=RNG)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:68)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi14.0 = $12get_iter.5
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 14
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3669A0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi16.1 = $14for_iter.2
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $14for_iter.3, 16, 54
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 16
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3669A0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi16.1
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const24.5 = const(float, 0.0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool28 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $28pred, 30, 55
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 30
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3669A0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float64: CPUDispatcher(<function xoroshiro128p_normal_float64 at 0x000001D5BA73FAF0>))
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:56), Var(idx, _utils.py:56)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array[i] = $44binary_multiply.8
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 55
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 54
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3669A0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const54.0 = const(NoneType, None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $56return_value.1 = cast(value=$const54.0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $56return_value.1
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 55
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D60D3669A0>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001D60D35EDC0>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001D60D35EEE0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001D60D366250>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001D60D366370>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001D60D366490>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001D60D366B50>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001D60D366E50>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001D60D368100>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001D60D35E7C0>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001D60D3682E0>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001D60D353E80>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001D60D342C10>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001D60D342220>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001D60D35E940>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001D5D593C280>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001D60D35EC40>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001D60D366CA0>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001D60D366100>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001D60D35EAF0>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001D60D366190>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001D60D35E640>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001D60D366FA0>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001D60D366760>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001D60D35E520>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001D60D35E2E0>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001D60D35E400>,
                         0)]})
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D60D3669A0>
07/29/2024 05:30:15 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=85)
           4	LOAD_GLOBAL(arg=1, lineno=85)
           6	LOAD_FAST(arg=0, lineno=85)
           8	CALL_FUNCTION(arg=1, lineno=85)
          10	CALL_FUNCTION(arg=1, lineno=85)
          12	GET_ITER(arg=None, lineno=85)
>         14	FOR_ITER(arg=38, lineno=85)
          16	STORE_FAST(arg=4, lineno=85)
          18	LOAD_FAST(arg=1, lineno=86)
          20	LOAD_FAST(arg=4, lineno=86)
          22	BINARY_SUBSCR(arg=None, lineno=86)
          24	LOAD_CONST(arg=1, lineno=86)
          26	COMPARE_OP(arg=3, lineno=86)
          28	POP_JUMP_IF_FALSE(arg=14, lineno=86)
          30	LOAD_GLOBAL(arg=2, lineno=87)
          32	LOAD_FAST(arg=3, lineno=87)
          34	LOAD_FAST(arg=2, lineno=87)
          36	CALL_FUNCTION(arg=2, lineno=87)
          38	LOAD_FAST(arg=1, lineno=87)
          40	LOAD_FAST(arg=4, lineno=87)
          42	BINARY_SUBSCR(arg=None, lineno=87)
          44	BINARY_MULTIPLY(arg=None, lineno=87)
          46	LOAD_FAST(arg=0, lineno=87)
          48	LOAD_FAST(arg=4, lineno=87)
          50	STORE_SUBSCR(arg=None, lineno=87)
          52	JUMP_ABSOLUTE(arg=14, lineno=87)
>         54	LOAD_CONST(arg=0, lineno=87)
          56	RETURN_VALUE(arg=None, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0', '$4load_global.1', '$noise_array6.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_global.0', '$8call_function.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=12, inst=GET_ITER(arg=None, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$10call_function.4']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: ['$phi14.0']
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=14 nstack_initial=1)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=14, inst=FOR_ITER(arg=38, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi14.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=54 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_CONST(arg=0, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$const54.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=16 nstack_initial=2)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: ['$phi16.0', '$phi16.1']
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=16 nstack_initial=2)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=85)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$phi16.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=86)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=86)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=86)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$sigmas18.2', '$i20.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=86)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=26, inst=COMPARE_OP(arg=3, lineno=86)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$22binary_subscr.4', '$const24.5']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=14, lineno=86)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi16.0', '$26compare_op.6']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=14, stack=('$phi16.0',), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: ['$phi30.0']
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=30 nstack_initial=1)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=36, inst=CALL_FUNCTION(arg=2, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$30load_global.1', '$RNG32.2', '$idx34.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$sigmas38.5', '$i40.6']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$36call_function.4', '$42binary_subscr.7']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_FAST(arg=4, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0', '$44binary_multiply.8', '$noise_array46.9', '$i48.10']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=52, inst=JUMP_ABSOLUTE(arg=14, lineno=87)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$phi30.0']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=14 nstack_initial=1)])
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=0): set()})
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
07/29/2024 05:30:15 PM - DEBUG - apply_changes - keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
07/29/2024 05:30:15 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$noise_array6.2'}), (8, {'func': '$4load_global.1', 'args': ['$noise_array6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 16: ('$phi14.0', '$14for_iter.2')})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$sigmas18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$sigmas18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$const24.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$const24.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 14: ('$phi16.0',)})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$RNG32.2'}), (34, {'res': '$idx34.3'}), (36, {'func': '$30load_global.1', 'args': ['$RNG32.2', '$idx34.3'], 'res': '$36call_function.4'}), (38, {'res': '$sigmas38.5'}), (40, {'res': '$i40.6'}), (42, {'index': '$i40.6', 'target': '$sigmas38.5', 'res': '$42binary_subscr.7'}), (44, {'lhs': '$36call_function.4', 'rhs': '$42binary_subscr.7', 'res': '$44binary_multiply.8'}), (46, {'res': '$noise_array46.9'}), (48, {'res': '$i48.10'}), (50, {'target': '$noise_array46.9', 'index': '$i48.10', 'value': '$44binary_multiply.8'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'retval': '$const54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - interpret - label 0:
    noise_array = arg(0, name=noise_array)   ['noise_array']
    sigmas = arg(1, name=sigmas)             ['sigmas']
    idx = arg(2, name=idx)                   ['idx']
    RNG = arg(3, name=RNG)                   ['RNG']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'noise_array']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 54             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$22binary_subscr.4', 'i', 'sigmas']
    $const24.5 = const(float, 0.0)           ['$const24.5']
    $26compare_op.6 = $22binary_subscr.4 != $const24.5 ['$22binary_subscr.4', '$26compare_op.6', '$const24.5']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.6', '$28pred', 'bool28']
    branch $28pred, 30, 14                   ['$28pred']
label 30:
    $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001D5BA73F940>)) ['$30load_global.1']
    $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.1', '$36call_function.4', 'RNG', 'idx']
    $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$42binary_subscr.7', 'i', 'sigmas']
    $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7 ['$36call_function.4', '$42binary_subscr.7', '$44binary_multiply.8']
    noise_array[i] = $44binary_multiply.8    ['$44binary_multiply.8', 'i', 'noise_array']
    jump 14                                  []
label 54:
    $const54.0 = const(NoneType, None)       ['$const54.0']
    $56return_value.1 = cast(value=$const54.0) ['$56return_value.1', '$const54.0']
    return $56return_value.1                 ['$56return_value.1']

07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D6B3D280>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array = arg(0, name=noise_array)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: sigmas = arg(1, name=sigmas)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: idx = arg(2, name=idx)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: RNG = arg(3, name=RNG)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(range: <class 'range'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_global.1 = global(len: <built-in function len>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $8call_function.3 = call $4load_global.1(noise_array, func=$4load_global.1, args=[Var(noise_array, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, _utils.py:85)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi14.0 = $12get_iter.5
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 14
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D6B3D280>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.1 = iternext(value=$phi14.0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi16.1 = $14for_iter.2
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $14for_iter.3, 16, 54
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 16
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D6B3D280>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi16.1
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $22binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const24.5 = const(float, 0.0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $26compare_op.6 = $22binary_subscr.4 != $const24.5
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: bool28 = global(bool: <class 'bool'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $28pred = call bool28($26compare_op.6, func=bool28, args=(Var($26compare_op.6, _utils.py:86),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $28pred, 30, 55
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 30
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D6B3D280>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $30load_global.1 = global(xoroshiro128p_normal_float32: CPUDispatcher(<function xoroshiro128p_normal_float32 at 0x000001D5BA73F940>))
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $36call_function.4 = call $30load_global.1(RNG, idx, func=$30load_global.1, args=[Var(RNG, _utils.py:72), Var(idx, _utils.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $42binary_subscr.7 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $44binary_multiply.8 = $36call_function.4 * $42binary_subscr.7
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: noise_array[i] = $44binary_multiply.8
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 55
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 54
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D6B3D280>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const54.0 = const(NoneType, None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $56return_value.1 = cast(value=$const54.0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $56return_value.1
07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 55
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D6B3D280>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 14
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000001D5D6B3DF40>,
                                     0)],
             '$12get_iter.5': [(<numba.core.ir.Assign object at 0x000001D60D3A50A0>,
                                0)],
             '$14for_iter.1': [(<numba.core.ir.Assign object at 0x000001D60D3A53D0>,
                                14)],
             '$14for_iter.2': [(<numba.core.ir.Assign object at 0x000001D60D3A54F0>,
                                14)],
             '$14for_iter.3': [(<numba.core.ir.Assign object at 0x000001D60D3A5610>,
                                14)],
             '$22binary_subscr.4': [(<numba.core.ir.Assign object at 0x000001D60D3A5CD0>,
                                     16)],
             '$26compare_op.6': [(<numba.core.ir.Assign object at 0x000001D60D3A5FD0>,
                                  16)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001D5D6B3D370>,
                          16)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001D5D6B3D940>,
                                  0)],
             '$30load_global.1': [(<numba.core.ir.Assign object at 0x000001D5D6B3D190>,
                                   30)],
             '$36call_function.4': [(<numba.core.ir.Assign object at 0x000001D60D39EC10>,
                                     30)],
             '$42binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001D60D38DA60>,
                                     30)],
             '$44binary_multiply.8': [(<numba.core.ir.Assign object at 0x000001D60D38DAF0>,
                                       30)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001D5D6B3DAC0>,
                                  0)],
             '$56return_value.1': [(<numba.core.ir.Assign object at 0x000001D60D3952B0>,
                                    54)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x000001D5D6B3DDC0>,
                                    0)],
             '$const24.5': [(<numba.core.ir.Assign object at 0x000001D60D3A5E20>,
                             16)],
             '$const54.0': [(<numba.core.ir.Assign object at 0x000001D60D390E50>,
                             54)],
             '$phi14.0': [(<numba.core.ir.Assign object at 0x000001D5D6B3DC70>,
                           0)],
             '$phi16.1': [(<numba.core.ir.Assign object at 0x000001D60D3A5310>,
                           14)],
             'RNG': [(<numba.core.ir.Assign object at 0x000001D5D6B3D7C0>, 0)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001D60D3A7160>,
                         16)],
             'i': [(<numba.core.ir.Assign object at 0x000001D60D3A58E0>, 16)],
             'idx': [(<numba.core.ir.Assign object at 0x000001D5D6B3D6A0>, 0)],
             'noise_array': [(<numba.core.ir.Assign object at 0x000001D5D6B3D460>,
                              0)],
             'sigmas': [(<numba.core.ir.Assign object at 0x000001D5D6B3D580>,
                         0)]})
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D5D6B3D280>
07/29/2024 05:30:15 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=126)
           2	LOAD_DEREF(arg=0, lineno=136)
           4	LOAD_FAST(arg=0, lineno=136)
           6	LOAD_FAST(arg=2, lineno=136)
           8	BINARY_MULTIPLY(arg=None, lineno=136)
          10	LOAD_FAST(arg=1, lineno=136)
          12	BINARY_ADD(arg=None, lineno=136)
          14	LOAD_FAST(arg=3, lineno=136)
          16	CALL_FUNCTION(arg=2, lineno=136)
          18	RETURN_VALUE(arg=None, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=126)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$a4.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$a4.1', '$feedback_state6.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8binary_multiply.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=12, inst=BINARY_ADD(arg=None, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8binary_multiply.3', '$b10.4']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$12binary_add.5']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$12binary_add.5', '$cliplevel14.6']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=136)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$16call_function.7']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 05:30:15 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$feedback_state6.2'}), (8, {'lhs': '$a4.1', 'rhs': '$feedback_state6.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$b10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$b10.4', 'res': '$12binary_add.5'}), (14, {'res': '$cliplevel14.6'}), (16, {'func': '$2load_deref.0', 'args': ['$12binary_add.5', '$cliplevel14.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - interpret - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    feedback_state = arg(2, name=feedback_state) ['feedback_state']
    cliplevel = arg(3, name=cliplevel)       ['cliplevel']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_32 at 0x000001D5D5814EE0>)) ['$2load_deref.0']
    $8binary_multiply.3 = a * feedback_state ['$8binary_multiply.3', 'a', 'feedback_state']
    $12binary_add.5 = $8binary_multiply.3 + b ['$12binary_add.5', '$8binary_multiply.3', 'b']
    $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, thermal_cantilever_ax_b.py:136), Var(cliplevel, thermal_cantilever_ax_b.py:126)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_add.5', '$16call_function.7', '$2load_deref.0', 'cliplevel']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D5D586B790>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: a = arg(0, name=a)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: b = arg(1, name=b)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: feedback_state = arg(2, name=feedback_state)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: cliplevel = arg(3, name=cliplevel)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_32 at 0x000001D5D5814EE0>))
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $8binary_multiply.3 = a * feedback_state
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $12binary_add.5 = $8binary_multiply.3 + b
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $16call_function.7 = call $2load_deref.0($12binary_add.5, cliplevel, func=$2load_deref.0, args=[Var($12binary_add.5, thermal_cantilever_ax_b.py:136), Var(cliplevel, thermal_cantilever_ax_b.py:126)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $18return_value.8 = cast(value=$16call_function.7)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $18return_value.8
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$12binary_add.5': [(<numba.core.ir.Assign object at 0x000001D619CD53A0>,
                                  0)],
             '$16call_function.7': [(<numba.core.ir.Assign object at 0x000001D619CD5670>,
                                     0)],
             '$18return_value.8': [(<numba.core.ir.Assign object at 0x000001D60D3CF4C0>,
                                    0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001D60D3B5070>,
                                 0)],
             '$8binary_multiply.3': [(<numba.core.ir.Assign object at 0x000001D619CD5100>,
                                      0)],
             'a': [(<numba.core.ir.Assign object at 0x000001D60D39EDC0>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001D60D39E940>, 0)],
             'cliplevel': [(<numba.core.ir.Assign object at 0x000001D60D3A7850>,
                            0)],
             'feedback_state': [(<numba.core.ir.Assign object at 0x000001D60D3A7FD0>,
                                 0)]})
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D5D586B790>
07/29/2024 05:30:15 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=139)
           2	LOAD_DEREF(arg=0, lineno=159)
           4	LOAD_GLOBAL(arg=0, lineno=159)
           6	LOAD_ATTR(arg=1, lineno=159)
           8	LOAD_METHOD(arg=2, lineno=159)
          10	LOAD_DEREF(arg=2, lineno=159)
          12	LOAD_FAST(arg=2, lineno=159)
          14	LOAD_CONST(arg=1, lineno=159)
          16	BINARY_SUBSCR(arg=None, lineno=159)
          18	LOAD_FAST(arg=3, lineno=159)
          20	BINARY_MULTIPLY(arg=None, lineno=159)
          22	CALL_FUNCTION(arg=1, lineno=159)
          24	CALL_METHOD(arg=1, lineno=159)
          26	LOAD_FAST(arg=2, lineno=159)
          28	LOAD_CONST(arg=2, lineno=159)
          30	BINARY_SUBSCR(arg=None, lineno=159)
          32	BINARY_MULTIPLY(arg=None, lineno=159)
          34	LOAD_FAST(arg=2, lineno=159)
          36	LOAD_CONST(arg=3, lineno=159)
          38	BINARY_SUBSCR(arg=None, lineno=159)
          40	CALL_FUNCTION(arg=2, lineno=159)
          42	STORE_FAST(arg=4, lineno=159)
          44	LOAD_DEREF(arg=1, lineno=162)
          46	LOAD_FAST(arg=2, lineno=162)
          48	LOAD_CONST(arg=4, lineno=162)
          50	BINARY_SUBSCR(arg=None, lineno=162)
          52	LOAD_FAST(arg=2, lineno=162)
          54	LOAD_CONST(arg=5, lineno=162)
          56	BINARY_SUBSCR(arg=None, lineno=162)
          58	LOAD_FAST(arg=1, lineno=162)
          60	LOAD_CONST(arg=6, lineno=162)
          62	BINARY_SUBSCR(arg=None, lineno=162)
          64	LOAD_FAST(arg=2, lineno=162)
          66	LOAD_CONST(arg=3, lineno=162)
          68	BINARY_SUBSCR(arg=None, lineno=162)
          70	CALL_FUNCTION(arg=4, lineno=162)
          72	STORE_FAST(arg=5, lineno=162)
          74	LOAD_FAST(arg=1, lineno=164)
          76	LOAD_CONST(arg=7, lineno=164)
          78	BINARY_SUBSCR(arg=None, lineno=164)
          80	LOAD_FAST(arg=0, lineno=164)
          82	LOAD_CONST(arg=8, lineno=164)
          84	STORE_SUBSCR(arg=None, lineno=164)
          86	LOAD_FAST(arg=1, lineno=165)
          88	LOAD_CONST(arg=8, lineno=165)
          90	BINARY_SUBSCR(arg=None, lineno=165)
          92	UNARY_NEGATIVE(arg=None, lineno=165)
          94	LOAD_FAST(arg=2, lineno=165)
          96	LOAD_CONST(arg=9, lineno=165)
          98	BINARY_SUBSCR(arg=None, lineno=165)
         100	LOAD_FAST(arg=1, lineno=165)
         102	LOAD_CONST(arg=7, lineno=165)
         104	BINARY_SUBSCR(arg=None, lineno=165)
         106	BINARY_MULTIPLY(arg=None, lineno=165)
         108	BINARY_SUBTRACT(arg=None, lineno=165)
         110	LOAD_FAST(arg=2, lineno=165)
         112	LOAD_CONST(arg=8, lineno=165)
         114	BINARY_SUBSCR(arg=None, lineno=165)
         116	LOAD_FAST(arg=1, lineno=165)
         118	LOAD_CONST(arg=10, lineno=165)
         120	BINARY_SUBSCR(arg=None, lineno=165)
         122	BINARY_MULTIPLY(arg=None, lineno=165)
         124	BINARY_ADD(arg=None, lineno=165)
         126	LOAD_FAST(arg=2, lineno=165)
         128	LOAD_CONST(arg=11, lineno=165)
         130	BINARY_SUBSCR(arg=None, lineno=165)
         132	LOAD_FAST(arg=4, lineno=165)
         134	BINARY_MULTIPLY(arg=None, lineno=165)
         136	BINARY_ADD(arg=None, lineno=165)
         138	LOAD_FAST(arg=0, lineno=165)
         140	LOAD_CONST(arg=7, lineno=165)
         142	STORE_SUBSCR(arg=None, lineno=165)
         144	LOAD_FAST(arg=2, lineno=166)
         146	LOAD_CONST(arg=7, lineno=166)
         148	BINARY_SUBSCR(arg=None, lineno=166)
         150	UNARY_NEGATIVE(arg=None, lineno=166)
         152	LOAD_FAST(arg=1, lineno=166)
         154	LOAD_CONST(arg=10, lineno=166)
         156	BINARY_SUBSCR(arg=None, lineno=166)
         158	BINARY_MULTIPLY(arg=None, lineno=166)
         160	LOAD_FAST(arg=2, lineno=166)
         162	LOAD_CONST(arg=10, lineno=166)
         164	BINARY_SUBSCR(arg=None, lineno=166)
         166	LOAD_FAST(arg=1, lineno=166)
         168	LOAD_CONST(arg=9, lineno=166)
         170	BINARY_SUBSCR(arg=None, lineno=166)
         172	BINARY_MULTIPLY(arg=None, lineno=166)
         174	LOAD_FAST(arg=1, lineno=166)
         176	LOAD_CONST(arg=9, lineno=166)
         178	BINARY_SUBSCR(arg=None, lineno=166)
         180	BINARY_MULTIPLY(arg=None, lineno=166)
         182	BINARY_ADD(arg=None, lineno=166)
         184	LOAD_FAST(arg=0, lineno=166)
         186	LOAD_CONST(arg=10, lineno=166)
         188	STORE_SUBSCR(arg=None, lineno=166)
         190	LOAD_FAST(arg=2, lineno=167)
         192	LOAD_CONST(arg=12, lineno=167)
         194	BINARY_SUBSCR(arg=None, lineno=167)
         196	UNARY_NEGATIVE(arg=None, lineno=167)
         198	LOAD_FAST(arg=1, lineno=167)
         200	LOAD_CONST(arg=9, lineno=167)
         202	BINARY_SUBSCR(arg=None, lineno=167)
         204	BINARY_MULTIPLY(arg=None, lineno=167)
         206	LOAD_FAST(arg=2, lineno=167)
         208	LOAD_CONST(arg=12, lineno=167)
         210	BINARY_SUBSCR(arg=None, lineno=167)
         212	LOAD_FAST(arg=5, lineno=167)
         214	BINARY_MULTIPLY(arg=None, lineno=167)
         216	BINARY_ADD(arg=None, lineno=167)
         218	LOAD_FAST(arg=0, lineno=167)
         220	LOAD_CONST(arg=9, lineno=167)
         222	STORE_SUBSCR(arg=None, lineno=167)
         224	LOAD_FAST(arg=2, lineno=168)
         226	LOAD_CONST(arg=13, lineno=168)
         228	BINARY_SUBSCR(arg=None, lineno=168)
         230	UNARY_NEGATIVE(arg=None, lineno=168)
         232	LOAD_FAST(arg=1, lineno=168)
         234	LOAD_CONST(arg=6, lineno=168)
         236	BINARY_SUBSCR(arg=None, lineno=168)
         238	BINARY_MULTIPLY(arg=None, lineno=168)
         240	LOAD_FAST(arg=2, lineno=168)
         242	LOAD_CONST(arg=14, lineno=168)
         244	BINARY_SUBSCR(arg=None, lineno=168)
         246	LOAD_FAST(arg=1, lineno=168)
         248	LOAD_CONST(arg=7, lineno=168)
         250	BINARY_SUBSCR(arg=None, lineno=168)
         252	BINARY_MULTIPLY(arg=None, lineno=168)
         254	BINARY_ADD(arg=None, lineno=168)
         256	LOAD_FAST(arg=0, lineno=168)
         258	LOAD_CONST(arg=6, lineno=168)
         260	STORE_SUBSCR(arg=None, lineno=168)
         262	LOAD_CONST(arg=15, lineno=168)
         264	RETURN_VALUE(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:15 PM - DEBUG - run - stack: []
07/29/2024 05:30:15 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=139)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$4load_global.1']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$6load_attr.2']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_DEREF(arg=2, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$constants12.5', '$const14.6']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$16binary_subscr.7', '$t18.8']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3', '$10load_deref.4', '$20binary_multiply.9']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$8load_method.3', '$22call_function.10']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$24call_method.11']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$24call_method.11', '$constants26.12', '$const28.13']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$24call_method.11', '$30binary_subscr.14']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$32binary_multiply.15']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$32binary_multiply.15', '$constants34.16', '$const36.17']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=42, inst=STORE_FAST(arg=4, lineno=159)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$40call_function.19']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$constants46.21']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$constants46.21', '$const48.22']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$constants52.24', '$const54.25']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=60, inst=LOAD_CONST(arg=6, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=62, inst=BINARY_SUBSCR(arg=None, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$state58.27', '$const60.28']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$constants64.30', '$const66.31']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=70, inst=CALL_FUNCTION(arg=4, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=72, inst=STORE_FAST(arg=5, lineno=162)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$70call_function.33']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=164)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=76, inst=LOAD_CONST(arg=7, lineno=164)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$state74.34']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=164)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$state74.34', '$const76.35']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=164)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$78binary_subscr.36']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=82, inst=LOAD_CONST(arg=8, lineno=164)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$78binary_subscr.36', '$outarray80.37']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=164)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$78binary_subscr.36', '$outarray80.37', '$const82.38']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=88, inst=LOAD_CONST(arg=8, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$state86.39']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$state86.39', '$const88.40']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=92, inst=UNARY_NEGATIVE(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$90binary_subscr.41']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=96, inst=LOAD_CONST(arg=9, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42', '$constants94.43']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42', '$constants94.43', '$const96.44']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42', '$98binary_subscr.45']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42', '$98binary_subscr.45', '$state100.46', '$const102.47']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=106, inst=BINARY_MULTIPLY(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42', '$98binary_subscr.45', '$104binary_subscr.48']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$92unary_negative.42', '$106binary_multiply.49']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=112, inst=LOAD_CONST(arg=8, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50', '$constants110.51']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50', '$constants110.51', '$const112.52']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50', '$114binary_subscr.53']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=118, inst=LOAD_CONST(arg=10, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=120, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$state116.54', '$const118.55']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=122, inst=BINARY_MULTIPLY(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50', '$114binary_subscr.53', '$120binary_subscr.56']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$108binary_subtract.50', '$122binary_multiply.57']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$124binary_add.58']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=128, inst=LOAD_CONST(arg=11, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$124binary_add.58', '$constants126.59']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$124binary_add.58', '$constants126.59', '$const128.60']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$124binary_add.58', '$130binary_subscr.61']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=134, inst=BINARY_MULTIPLY(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$124binary_add.58', '$130binary_subscr.61', '$ref132.62']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=136, inst=BINARY_ADD(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$124binary_add.58', '$134binary_multiply.63']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$136binary_add.64']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=140, inst=LOAD_CONST(arg=7, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$136binary_add.64', '$outarray138.65']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=165)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$136binary_add.64', '$outarray138.65', '$const140.66']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=146, inst=LOAD_CONST(arg=7, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$constants144.67']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=148, inst=BINARY_SUBSCR(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$constants144.67', '$const146.68']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=150, inst=UNARY_NEGATIVE(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$148binary_subscr.69']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$150unary_negative.70']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$150unary_negative.70', '$state152.71']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$150unary_negative.70', '$state152.71', '$const154.72']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$150unary_negative.70', '$156binary_subscr.73']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=160, inst=LOAD_FAST(arg=2, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=162, inst=LOAD_CONST(arg=10, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$constants160.75']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$constants160.75', '$const162.76']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=166, inst=LOAD_FAST(arg=1, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$164binary_subscr.77']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=168, inst=LOAD_CONST(arg=9, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$state166.78', '$const168.79']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=172, inst=BINARY_MULTIPLY(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$164binary_subscr.77', '$170binary_subscr.80']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$172binary_multiply.81']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=176, inst=LOAD_CONST(arg=9, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$state174.82', '$const176.83']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$172binary_multiply.81', '$178binary_subscr.84']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$158binary_multiply.74', '$180binary_multiply.85']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=184, inst=LOAD_FAST(arg=0, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$182binary_add.86']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=186, inst=LOAD_CONST(arg=10, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$182binary_add.86', '$outarray184.87']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=166)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$182binary_add.86', '$outarray184.87', '$const186.88']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=192, inst=LOAD_CONST(arg=12, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$constants190.89']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$constants190.89', '$const192.90']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=196, inst=UNARY_NEGATIVE(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$194binary_subscr.91']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$196unary_negative.92']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=200, inst=LOAD_CONST(arg=9, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$196unary_negative.92', '$state198.93']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$196unary_negative.92', '$state198.93', '$const200.94']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=204, inst=BINARY_MULTIPLY(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$196unary_negative.92', '$202binary_subscr.95']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=206, inst=LOAD_FAST(arg=2, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$204binary_multiply.96']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=208, inst=LOAD_CONST(arg=12, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$204binary_multiply.96', '$constants206.97']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$204binary_multiply.96', '$constants206.97', '$const208.98']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=212, inst=LOAD_FAST(arg=5, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$204binary_multiply.96', '$210binary_subscr.99']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=214, inst=BINARY_MULTIPLY(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$204binary_multiply.96', '$210binary_subscr.99', '$control212.100']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=216, inst=BINARY_ADD(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$204binary_multiply.96', '$214binary_multiply.101']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$216binary_add.102']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=220, inst=LOAD_CONST(arg=9, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$216binary_add.102', '$outarray218.103']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=222, inst=STORE_SUBSCR(arg=None, lineno=167)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$216binary_add.102', '$outarray218.103', '$const220.104']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=226, inst=LOAD_CONST(arg=13, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$constants224.105']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$constants224.105', '$const226.106']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=230, inst=UNARY_NEGATIVE(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$228binary_subscr.107']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$230unary_negative.108']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=234, inst=LOAD_CONST(arg=6, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$230unary_negative.108', '$state232.109']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$230unary_negative.108', '$state232.109', '$const234.110']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=238, inst=BINARY_MULTIPLY(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$230unary_negative.108', '$236binary_subscr.111']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=242, inst=LOAD_CONST(arg=14, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112', '$constants240.113']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112', '$constants240.113', '$const242.114']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112', '$244binary_subscr.115']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=248, inst=LOAD_CONST(arg=7, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$state246.116', '$const248.117']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=252, inst=BINARY_MULTIPLY(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112', '$244binary_subscr.115', '$250binary_subscr.118']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=254, inst=BINARY_ADD(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$238binary_multiply.112', '$252binary_multiply.119']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$254binary_add.120']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=258, inst=LOAD_CONST(arg=6, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$254binary_add.120', '$outarray256.121']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$254binary_add.120', '$outarray256.121', '$const258.122']
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=262, inst=LOAD_CONST(arg=15, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:15 PM - DEBUG - dispatch - dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=168)
07/29/2024 05:30:15 PM - DEBUG - dispatch - stack ['$const262.123']
07/29/2024 05:30:15 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 05:30:15 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:15 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 05:30:15 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 05:30:15 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:15 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$4load_global.1'}), (6, {'item': '$4load_global.1', 'res': '$6load_attr.2'}), (8, {'item': '$6load_attr.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$constants12.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$constants12.5', 'res': '$16binary_subscr.7'}), (18, {'res': '$t18.8'}), (20, {'lhs': '$16binary_subscr.7', 'rhs': '$t18.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$10load_deref.4', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'func': '$8load_method.3', 'args': ['$22call_function.10'], 'res': '$24call_method.11'}), (26, {'res': '$constants26.12'}), (28, {'res': '$const28.13'}), (30, {'index': '$const28.13', 'target': '$constants26.12', 'res': '$30binary_subscr.14'}), (32, {'lhs': '$24call_method.11', 'rhs': '$30binary_subscr.14', 'res': '$32binary_multiply.15'}), (34, {'res': '$constants34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$constants34.16', 'res': '$38binary_subscr.18'}), (40, {'func': '$2load_deref.0', 'args': ['$32binary_multiply.15', '$38binary_subscr.18'], 'res': '$40call_function.19'}), (42, {'value': '$40call_function.19'}), (44, {'res': '$44load_deref.20'}), (46, {'res': '$constants46.21'}), (48, {'res': '$const48.22'}), (50, {'index': '$const48.22', 'target': '$constants46.21', 'res': '$50binary_subscr.23'}), (52, {'res': '$constants52.24'}), (54, {'res': '$const54.25'}), (56, {'index': '$const54.25', 'target': '$constants52.24', 'res': '$56binary_subscr.26'}), (58, {'res': '$state58.27'}), (60, {'res': '$const60.28'}), (62, {'index': '$const60.28', 'target': '$state58.27', 'res': '$62binary_subscr.29'}), (64, {'res': '$constants64.30'}), (66, {'res': '$const66.31'}), (68, {'index': '$const66.31', 'target': '$constants64.30', 'res': '$68binary_subscr.32'}), (70, {'func': '$44load_deref.20', 'args': ['$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32'], 'res': '$70call_function.33'}), (72, {'value': '$70call_function.33'}), (74, {'res': '$state74.34'}), (76, {'res': '$const76.35'}), (78, {'index': '$const76.35', 'target': '$state74.34', 'res': '$78binary_subscr.36'}), (80, {'res': '$outarray80.37'}), (82, {'res': '$const82.38'}), (84, {'target': '$outarray80.37', 'index': '$const82.38', 'value': '$78binary_subscr.36'}), (86, {'res': '$state86.39'}), (88, {'res': '$const88.40'}), (90, {'index': '$const88.40', 'target': '$state86.39', 'res': '$90binary_subscr.41'}), (92, {'value': '$90binary_subscr.41', 'res': '$92unary_negative.42'}), (94, {'res': '$constants94.43'}), (96, {'res': '$const96.44'}), (98, {'index': '$const96.44', 'target': '$constants94.43', 'res': '$98binary_subscr.45'}), (100, {'res': '$state100.46'}), (102, {'res': '$const102.47'}), (104, {'index': '$const102.47', 'target': '$state100.46', 'res': '$104binary_subscr.48'}), (106, {'lhs': '$98binary_subscr.45', 'rhs': '$104binary_subscr.48', 'res': '$106binary_multiply.49'}), (108, {'lhs': '$92unary_negative.42', 'rhs': '$106binary_multiply.49', 'res': '$108binary_subtract.50'}), (110, {'res': '$constants110.51'}), (112, {'res': '$const112.52'}), (114, {'index': '$const112.52', 'target': '$constants110.51', 'res': '$114binary_subscr.53'}), (116, {'res': '$state116.54'}), (118, {'res': '$const118.55'}), (120, {'index': '$const118.55', 'target': '$state116.54', 'res': '$120binary_subscr.56'}), (122, {'lhs': '$114binary_subscr.53', 'rhs': '$120binary_subscr.56', 'res': '$122binary_multiply.57'}), (124, {'lhs': '$108binary_subtract.50', 'rhs': '$122binary_multiply.57', 'res': '$124binary_add.58'}), (126, {'res': '$constants126.59'}), (128, {'res': '$const128.60'}), (130, {'index': '$const128.60', 'target': '$constants126.59', 'res': '$130binary_subscr.61'}), (132, {'res': '$ref132.62'}), (134, {'lhs': '$130binary_subscr.61', 'rhs': '$ref132.62', 'res': '$134binary_multiply.63'}), (136, {'lhs': '$124binary_add.58', 'rhs': '$134binary_multiply.63', 'res': '$136binary_add.64'}), (138, {'res': '$outarray138.65'}), (140, {'res': '$const140.66'}), (142, {'target': '$outarray138.65', 'index': '$const140.66', 'value': '$136binary_add.64'}), (144, {'res': '$constants144.67'}), (146, {'res': '$const146.68'}), (148, {'index': '$const146.68', 'target': '$constants144.67', 'res': '$148binary_subscr.69'}), (150, {'value': '$148binary_subscr.69', 'res': '$150unary_negative.70'}), (152, {'res': '$state152.71'}), (154, {'res': '$const154.72'}), (156, {'index': '$const154.72', 'target': '$state152.71', 'res': '$156binary_subscr.73'}), (158, {'lhs': '$150unary_negative.70', 'rhs': '$156binary_subscr.73', 'res': '$158binary_multiply.74'}), (160, {'res': '$constants160.75'}), (162, {'res': '$const162.76'}), (164, {'index': '$const162.76', 'target': '$constants160.75', 'res': '$164binary_subscr.77'}), (166, {'res': '$state166.78'}), (168, {'res': '$const168.79'}), (170, {'index': '$const168.79', 'target': '$state166.78', 'res': '$170binary_subscr.80'}), (172, {'lhs': '$164binary_subscr.77', 'rhs': '$170binary_subscr.80', 'res': '$172binary_multiply.81'}), (174, {'res': '$state174.82'}), (176, {'res': '$const176.83'}), (178, {'index': '$const176.83', 'target': '$state174.82', 'res': '$178binary_subscr.84'}), (180, {'lhs': '$172binary_multiply.81', 'rhs': '$178binary_subscr.84', 'res': '$180binary_multiply.85'}), (182, {'lhs': '$158binary_multiply.74', 'rhs': '$180binary_multiply.85', 'res': '$182binary_add.86'}), (184, {'res': '$outarray184.87'}), (186, {'res': '$const186.88'}), (188, {'target': '$outarray184.87', 'index': '$const186.88', 'value': '$182binary_add.86'}), (190, {'res': '$constants190.89'}), (192, {'res': '$const192.90'}), (194, {'index': '$const192.90', 'target': '$constants190.89', 'res': '$194binary_subscr.91'}), (196, {'value': '$194binary_subscr.91', 'res': '$196unary_negative.92'}), (198, {'res': '$state198.93'}), (200, {'res': '$const200.94'}), (202, {'index': '$const200.94', 'target': '$state198.93', 'res': '$202binary_subscr.95'}), (204, {'lhs': '$196unary_negative.92', 'rhs': '$202binary_subscr.95', 'res': '$204binary_multiply.96'}), (206, {'res': '$constants206.97'}), (208, {'res': '$const208.98'}), (210, {'index': '$const208.98', 'target': '$constants206.97', 'res': '$210binary_subscr.99'}), (212, {'res': '$control212.100'}), (214, {'lhs': '$210binary_subscr.99', 'rhs': '$control212.100', 'res': '$214binary_multiply.101'}), (216, {'lhs': '$204binary_multiply.96', 'rhs': '$214binary_multiply.101', 'res': '$216binary_add.102'}), (218, {'res': '$outarray218.103'}), (220, {'res': '$const220.104'}), (222, {'target': '$outarray218.103', 'index': '$const220.104', 'value': '$216binary_add.102'}), (224, {'res': '$constants224.105'}), (226, {'res': '$const226.106'}), (228, {'index': '$const226.106', 'target': '$constants224.105', 'res': '$228binary_subscr.107'}), (230, {'value': '$228binary_subscr.107', 'res': '$230unary_negative.108'}), (232, {'res': '$state232.109'}), (234, {'res': '$const234.110'}), (236, {'index': '$const234.110', 'target': '$state232.109', 'res': '$236binary_subscr.111'}), (238, {'lhs': '$230unary_negative.108', 'rhs': '$236binary_subscr.111', 'res': '$238binary_multiply.112'}), (240, {'res': '$constants240.113'}), (242, {'res': '$const242.114'}), (244, {'index': '$const242.114', 'target': '$constants240.113', 'res': '$244binary_subscr.115'}), (246, {'res': '$state246.116'}), (248, {'res': '$const248.117'}), (250, {'index': '$const248.117', 'target': '$state246.116', 'res': '$250binary_subscr.118'}), (252, {'lhs': '$244binary_subscr.115', 'rhs': '$250binary_subscr.118', 'res': '$252binary_multiply.119'}), (254, {'lhs': '$238binary_multiply.112', 'rhs': '$252binary_multiply.119', 'res': '$254binary_add.120'}), (256, {'res': '$outarray256.121'}), (258, {'res': '$const258.122'}), (260, {'target': '$outarray256.121', 'index': '$const258.122', 'value': '$254binary_add.120'}), (262, {'res': '$const262.123'}), (264, {'retval': '$const262.123', 'castval': '$264return_value.124'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:15 PM - DEBUG - interpret - label 0:
    outarray = arg(0, name=outarray)         ['outarray']
    state = arg(1, name=state)               ['state']
    constants = arg(2, name=constants)       ['constants']
    t = arg(3, name=t)                       ['t']
    $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_32 at 0x000001D5D5814EE0>)) ['$2load_deref.0']
    $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>) ['$4load_global.1']
    $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice) ['$4load_global.1', '$6load_attr.2']
    $8load_method.3 = getattr(value=$6load_attr.2, attr=cos) ['$6load_attr.2', '$8load_method.3']
    $10load_deref.4 = freevar(precision: <class 'numpy.float32'>) ['$10load_deref.4']
    $const14.6 = const(int, 13)              ['$const14.6']
    $16binary_subscr.7 = getitem(value=constants, index=$const14.6, fn=<built-in function getitem>) ['$16binary_subscr.7', '$const14.6', 'constants']
    $20binary_multiply.9 = $16binary_subscr.7 * t ['$16binary_subscr.7', '$20binary_multiply.9', 't']
    $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, thermal_cantilever_ax_b.py:159)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$20binary_multiply.9', '$22call_function.10']
    $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, thermal_cantilever_ax_b.py:159)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call_function.10', '$24call_method.11', '$8load_method.3']
    $const28.13 = const(int, 9)              ['$const28.13']
    $30binary_subscr.14 = getitem(value=constants, index=$const28.13, fn=<built-in function getitem>) ['$30binary_subscr.14', '$const28.13', 'constants']
    $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14 ['$24call_method.11', '$30binary_subscr.14', '$32binary_multiply.15']
    $const36.17 = const(int, 10)             ['$const36.17']
    $38binary_subscr.18 = getitem(value=constants, index=$const36.17, fn=<built-in function getitem>) ['$38binary_subscr.18', '$const36.17', 'constants']
    ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, thermal_cantilever_ax_b.py:159), Var($38binary_subscr.18, thermal_cantilever_ax_b.py:159)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$32binary_multiply.15', '$38binary_subscr.18', 'ref']
    $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001D60D35F4C0>)) ['$44load_deref.20']
    $const48.22 = const(int, 11)             ['$const48.22']
    $50binary_subscr.23 = getitem(value=constants, index=$const48.22, fn=<built-in function getitem>) ['$50binary_subscr.23', '$const48.22', 'constants']
    $const54.25 = const(int, 12)             ['$const54.25']
    $56binary_subscr.26 = getitem(value=constants, index=$const54.25, fn=<built-in function getitem>) ['$56binary_subscr.26', '$const54.25', 'constants']
    $const60.28 = const(int, 4)              ['$const60.28']
    $62binary_subscr.29 = getitem(value=state, index=$const60.28, fn=<built-in function getitem>) ['$62binary_subscr.29', '$const60.28', 'state']
    $const66.31 = const(int, 10)             ['$const66.31']
    $68binary_subscr.32 = getitem(value=constants, index=$const66.31, fn=<built-in function getitem>) ['$68binary_subscr.32', '$const66.31', 'constants']
    control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, thermal_cantilever_ax_b.py:162), Var($56binary_subscr.26, thermal_cantilever_ax_b.py:162), Var($62binary_subscr.29, thermal_cantilever_ax_b.py:162), Var($68binary_subscr.32, thermal_cantilever_ax_b.py:162)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.20', '$50binary_subscr.23', '$56binary_subscr.26', '$62binary_subscr.29', '$68binary_subscr.32', 'control']
    $const76.35 = const(int, 1)              ['$const76.35']
    $78binary_subscr.36 = getitem(value=state, index=$const76.35, fn=<built-in function getitem>) ['$78binary_subscr.36', '$const76.35', 'state']
    $const82.38 = const(int, 0)              ['$const82.38']
    outarray[$const82.38] = $78binary_subscr.36 ['$78binary_subscr.36', '$const82.38', 'outarray']
    $const88.40 = const(int, 0)              ['$const88.40']
    $90binary_subscr.41 = getitem(value=state, index=$const88.40, fn=<built-in function getitem>) ['$90binary_subscr.41', '$const88.40', 'state']
    $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41) ['$90binary_subscr.41', '$92unary_negative.42']
    $const96.44 = const(int, 3)              ['$const96.44']
    $98binary_subscr.45 = getitem(value=constants, index=$const96.44, fn=<built-in function getitem>) ['$98binary_subscr.45', '$const96.44', 'constants']
    $const102.47 = const(int, 1)             ['$const102.47']
    $104binary_subscr.48 = getitem(value=state, index=$const102.47, fn=<built-in function getitem>) ['$104binary_subscr.48', '$const102.47', 'state']
    $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48 ['$104binary_subscr.48', '$106binary_multiply.49', '$98binary_subscr.45']
    $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49 ['$106binary_multiply.49', '$108binary_subtract.50', '$92unary_negative.42']
    $const112.52 = const(int, 0)             ['$const112.52']
    $114binary_subscr.53 = getitem(value=constants, index=$const112.52, fn=<built-in function getitem>) ['$114binary_subscr.53', '$const112.52', 'constants']
    $const118.55 = const(int, 2)             ['$const118.55']
    $120binary_subscr.56 = getitem(value=state, index=$const118.55, fn=<built-in function getitem>) ['$120binary_subscr.56', '$const118.55', 'state']
    $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56 ['$114binary_subscr.53', '$120binary_subscr.56', '$122binary_multiply.57']
    $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57 ['$108binary_subtract.50', '$122binary_multiply.57', '$124binary_add.58']
    $const128.60 = const(int, 7)             ['$const128.60']
    $130binary_subscr.61 = getitem(value=constants, index=$const128.60, fn=<built-in function getitem>) ['$130binary_subscr.61', '$const128.60', 'constants']
    $134binary_multiply.63 = $130binary_subscr.61 * ref ['$130binary_subscr.61', '$134binary_multiply.63', 'ref']
    $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63 ['$124binary_add.58', '$134binary_multiply.63', '$136binary_add.64']
    $const140.66 = const(int, 1)             ['$const140.66']
    outarray[$const140.66] = $136binary_add.64 ['$136binary_add.64', '$const140.66', 'outarray']
    $const146.68 = const(int, 1)             ['$const146.68']
    $148binary_subscr.69 = getitem(value=constants, index=$const146.68, fn=<built-in function getitem>) ['$148binary_subscr.69', '$const146.68', 'constants']
    $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69) ['$148binary_subscr.69', '$150unary_negative.70']
    $const154.72 = const(int, 2)             ['$const154.72']
    $156binary_subscr.73 = getitem(value=state, index=$const154.72, fn=<built-in function getitem>) ['$156binary_subscr.73', '$const154.72', 'state']
    $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73 ['$150unary_negative.70', '$156binary_subscr.73', '$158binary_multiply.74']
    $const162.76 = const(int, 2)             ['$const162.76']
    $164binary_subscr.77 = getitem(value=constants, index=$const162.76, fn=<built-in function getitem>) ['$164binary_subscr.77', '$const162.76', 'constants']
    $const168.79 = const(int, 3)             ['$const168.79']
    $170binary_subscr.80 = getitem(value=state, index=$const168.79, fn=<built-in function getitem>) ['$170binary_subscr.80', '$const168.79', 'state']
    $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80 ['$164binary_subscr.77', '$170binary_subscr.80', '$172binary_multiply.81']
    $const176.83 = const(int, 3)             ['$const176.83']
    $178binary_subscr.84 = getitem(value=state, index=$const176.83, fn=<built-in function getitem>) ['$178binary_subscr.84', '$const176.83', 'state']
    $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84 ['$172binary_multiply.81', '$178binary_subscr.84', '$180binary_multiply.85']
    $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85 ['$158binary_multiply.74', '$180binary_multiply.85', '$182binary_add.86']
    $const186.88 = const(int, 2)             ['$const186.88']
    outarray[$const186.88] = $182binary_add.86 ['$182binary_add.86', '$const186.88', 'outarray']
    $const192.90 = const(int, 6)             ['$const192.90']
    $194binary_subscr.91 = getitem(value=constants, index=$const192.90, fn=<built-in function getitem>) ['$194binary_subscr.91', '$const192.90', 'constants']
    $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91) ['$194binary_subscr.91', '$196unary_negative.92']
    $const200.94 = const(int, 3)             ['$const200.94']
    $202binary_subscr.95 = getitem(value=state, index=$const200.94, fn=<built-in function getitem>) ['$202binary_subscr.95', '$const200.94', 'state']
    $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95 ['$196unary_negative.92', '$202binary_subscr.95', '$204binary_multiply.96']
    $const208.98 = const(int, 6)             ['$const208.98']
    $210binary_subscr.99 = getitem(value=constants, index=$const208.98, fn=<built-in function getitem>) ['$210binary_subscr.99', '$const208.98', 'constants']
    $214binary_multiply.101 = $210binary_subscr.99 * control ['$210binary_subscr.99', '$214binary_multiply.101', 'control']
    $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101 ['$204binary_multiply.96', '$214binary_multiply.101', '$216binary_add.102']
    $const220.104 = const(int, 3)            ['$const220.104']
    outarray[$const220.104] = $216binary_add.102 ['$216binary_add.102', '$const220.104', 'outarray']
    $const226.106 = const(int, 5)            ['$const226.106']
    $228binary_subscr.107 = getitem(value=constants, index=$const226.106, fn=<built-in function getitem>) ['$228binary_subscr.107', '$const226.106', 'constants']
    $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107) ['$228binary_subscr.107', '$230unary_negative.108']
    $const234.110 = const(int, 4)            ['$const234.110']
    $236binary_subscr.111 = getitem(value=state, index=$const234.110, fn=<built-in function getitem>) ['$236binary_subscr.111', '$const234.110', 'state']
    $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111 ['$230unary_negative.108', '$236binary_subscr.111', '$238binary_multiply.112']
    $const242.114 = const(int, 8)            ['$const242.114']
    $244binary_subscr.115 = getitem(value=constants, index=$const242.114, fn=<built-in function getitem>) ['$244binary_subscr.115', '$const242.114', 'constants']
    $const248.117 = const(int, 1)            ['$const248.117']
    $250binary_subscr.118 = getitem(value=state, index=$const248.117, fn=<built-in function getitem>) ['$250binary_subscr.118', '$const248.117', 'state']
    $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118 ['$244binary_subscr.115', '$250binary_subscr.118', '$252binary_multiply.119']
    $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119 ['$238binary_multiply.112', '$252binary_multiply.119', '$254binary_add.120']
    $const258.122 = const(int, 4)            ['$const258.122']
    outarray[$const258.122] = $254binary_add.120 ['$254binary_add.120', '$const258.122', 'outarray']
    $const262.123 = const(NoneType, None)    ['$const262.123']
    $264return_value.124 = cast(value=$const262.123) ['$264return_value.124', '$const262.123']
    return $264return_value.124              ['$264return_value.124']

07/29/2024 05:30:15 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D619CEC970>
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: outarray = arg(0, name=outarray)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: state = arg(1, name=state)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: constants = arg(2, name=constants)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: t = arg(3, name=t)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_deref.0 = freevar(clamp: CUDADispatcher(<function clamp_32 at 0x000001D5D5814EE0>))
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_global.1 = global(cuda: <module 'numba.cuda' from 'C:\\venvs\\py39\\lib\\site-packages\\numba\\cuda\\__init__.py'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $6load_attr.2 = getattr(value=$4load_global.1, attr=libdevice)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $8load_method.3 = getattr(value=$6load_attr.2, attr=cos)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_deref.4 = freevar(precision: <class 'numpy.float32'>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const14.6 = const(int, 13)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $16binary_subscr.7 = static_getitem(value=constants, index=13, index_var=$const14.6, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $20binary_multiply.9 = $16binary_subscr.7 * t
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $22call_function.10 = call $10load_deref.4($20binary_multiply.9, func=$10load_deref.4, args=[Var($20binary_multiply.9, thermal_cantilever_ax_b.py:159)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $24call_method.11 = call $8load_method.3($22call_function.10, func=$8load_method.3, args=[Var($22call_function.10, thermal_cantilever_ax_b.py:159)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.13 = const(int, 9)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $30binary_subscr.14 = static_getitem(value=constants, index=9, index_var=$const28.13, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $32binary_multiply.15 = $24call_method.11 * $30binary_subscr.14
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.17 = const(int, 10)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $38binary_subscr.18 = static_getitem(value=constants, index=10, index_var=$const36.17, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: ref = call $2load_deref.0($32binary_multiply.15, $38binary_subscr.18, func=$2load_deref.0, args=[Var($32binary_multiply.15, thermal_cantilever_ax_b.py:159), Var($38binary_subscr.18, thermal_cantilever_ax_b.py:159)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $44load_deref.20 = freevar(linear_control_eq: CUDADispatcher(<function diffeq_system.__init__.<locals>.linear_control_eq at 0x000001D60D35F4C0>))
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const48.22 = const(int, 11)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $50binary_subscr.23 = static_getitem(value=constants, index=11, index_var=$const48.22, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const54.25 = const(int, 12)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $56binary_subscr.26 = static_getitem(value=constants, index=12, index_var=$const54.25, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const60.28 = const(int, 4)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $62binary_subscr.29 = static_getitem(value=state, index=4, index_var=$const60.28, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const66.31 = const(int, 10)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $68binary_subscr.32 = static_getitem(value=constants, index=10, index_var=$const66.31, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: control = call $44load_deref.20($50binary_subscr.23, $56binary_subscr.26, $62binary_subscr.29, $68binary_subscr.32, func=$44load_deref.20, args=[Var($50binary_subscr.23, thermal_cantilever_ax_b.py:162), Var($56binary_subscr.26, thermal_cantilever_ax_b.py:162), Var($62binary_subscr.29, thermal_cantilever_ax_b.py:162), Var($68binary_subscr.32, thermal_cantilever_ax_b.py:162)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const76.35 = const(int, 1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $78binary_subscr.36 = static_getitem(value=state, index=1, index_var=$const76.35, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const82.38 = const(int, 0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: outarray[0] = $78binary_subscr.36
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const88.40 = const(int, 0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $90binary_subscr.41 = static_getitem(value=state, index=0, index_var=$const88.40, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $92unary_negative.42 = unary(fn=<built-in function neg>, value=$90binary_subscr.41)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const96.44 = const(int, 3)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $98binary_subscr.45 = static_getitem(value=constants, index=3, index_var=$const96.44, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const102.47 = const(int, 1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $104binary_subscr.48 = static_getitem(value=state, index=1, index_var=$const102.47, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $106binary_multiply.49 = $98binary_subscr.45 * $104binary_subscr.48
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $108binary_subtract.50 = $92unary_negative.42 - $106binary_multiply.49
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const112.52 = const(int, 0)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $114binary_subscr.53 = static_getitem(value=constants, index=0, index_var=$const112.52, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const118.55 = const(int, 2)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $120binary_subscr.56 = static_getitem(value=state, index=2, index_var=$const118.55, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $122binary_multiply.57 = $114binary_subscr.53 * $120binary_subscr.56
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $124binary_add.58 = $108binary_subtract.50 + $122binary_multiply.57
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const128.60 = const(int, 7)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $130binary_subscr.61 = static_getitem(value=constants, index=7, index_var=$const128.60, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $134binary_multiply.63 = $130binary_subscr.61 * ref
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $136binary_add.64 = $124binary_add.58 + $134binary_multiply.63
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const140.66 = const(int, 1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: outarray[1] = $136binary_add.64
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const146.68 = const(int, 1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $148binary_subscr.69 = static_getitem(value=constants, index=1, index_var=$const146.68, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $150unary_negative.70 = unary(fn=<built-in function neg>, value=$148binary_subscr.69)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const154.72 = const(int, 2)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $156binary_subscr.73 = static_getitem(value=state, index=2, index_var=$const154.72, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $158binary_multiply.74 = $150unary_negative.70 * $156binary_subscr.73
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const162.76 = const(int, 2)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $164binary_subscr.77 = static_getitem(value=constants, index=2, index_var=$const162.76, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const168.79 = const(int, 3)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $170binary_subscr.80 = static_getitem(value=state, index=3, index_var=$const168.79, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $172binary_multiply.81 = $164binary_subscr.77 * $170binary_subscr.80
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const176.83 = const(int, 3)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $178binary_subscr.84 = static_getitem(value=state, index=3, index_var=$const176.83, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $180binary_multiply.85 = $172binary_multiply.81 * $178binary_subscr.84
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $182binary_add.86 = $158binary_multiply.74 + $180binary_multiply.85
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const186.88 = const(int, 2)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: outarray[2] = $182binary_add.86
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const192.90 = const(int, 6)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $194binary_subscr.91 = static_getitem(value=constants, index=6, index_var=$const192.90, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $196unary_negative.92 = unary(fn=<built-in function neg>, value=$194binary_subscr.91)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const200.94 = const(int, 3)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $202binary_subscr.95 = static_getitem(value=state, index=3, index_var=$const200.94, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $204binary_multiply.96 = $196unary_negative.92 * $202binary_subscr.95
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const208.98 = const(int, 6)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $210binary_subscr.99 = static_getitem(value=constants, index=6, index_var=$const208.98, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $214binary_multiply.101 = $210binary_subscr.99 * control
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $216binary_add.102 = $204binary_multiply.96 + $214binary_multiply.101
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const220.104 = const(int, 3)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: outarray[3] = $216binary_add.102
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const226.106 = const(int, 5)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $228binary_subscr.107 = static_getitem(value=constants, index=5, index_var=$const226.106, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $230unary_negative.108 = unary(fn=<built-in function neg>, value=$228binary_subscr.107)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const234.110 = const(int, 4)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $236binary_subscr.111 = static_getitem(value=state, index=4, index_var=$const234.110, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $238binary_multiply.112 = $230unary_negative.108 * $236binary_subscr.111
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const242.114 = const(int, 8)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $244binary_subscr.115 = static_getitem(value=constants, index=8, index_var=$const242.114, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const248.117 = const(int, 1)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $250binary_subscr.118 = static_getitem(value=state, index=1, index_var=$const248.117, fn=<built-in function getitem>)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $252binary_multiply.119 = $244binary_subscr.115 * $250binary_subscr.118
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $254binary_add.120 = $238binary_multiply.112 + $252binary_multiply.119
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const258.122 = const(int, 4)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: outarray[4] = $254binary_add.120
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $const262.123 = const(NoneType, None)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: $264return_value.124 = cast(value=$const262.123)
07/29/2024 05:30:15 PM - DEBUG - _run_ssa_block_pass - on stmt: return $264return_value.124
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$104binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001D619CEAA00>,
                                       0)],
             '$106binary_multiply.49': [(<numba.core.ir.Assign object at 0x000001D619CF9CD0>,
                                         0)],
             '$108binary_subtract.50': [(<numba.core.ir.Assign object at 0x000001D619CF9E50>,
                                         0)],
             '$10load_deref.4': [(<numba.core.ir.Assign object at 0x000001D619CDAD60>,
                                  0)],
             '$114binary_subscr.53': [(<numba.core.ir.Assign object at 0x000001D619CEAF10>,
                                       0)],
             '$120binary_subscr.56': [(<numba.core.ir.Assign object at 0x000001D619D0A550>,
                                       0)],
             '$122binary_multiply.57': [(<numba.core.ir.Assign object at 0x000001D619CFB850>,
                                         0)],
             '$124binary_add.58': [(<numba.core.ir.Assign object at 0x000001D619CFB9D0>,
                                    0)],
             '$130binary_subscr.61': [(<numba.core.ir.Assign object at 0x000001D619D0AB80>,
                                       0)],
             '$134binary_multiply.63': [(<numba.core.ir.Assign object at 0x000001D619CFE0D0>,
                                         0)],
             '$136binary_add.64': [(<numba.core.ir.Assign object at 0x000001D619CFE250>,
                                    0)],
             '$148binary_subscr.69': [(<numba.core.ir.Assign object at 0x000001D619D0AC40>,
                                       0)],
             '$150unary_negative.70': [(<numba.core.ir.Assign object at 0x000001D619CFEB20>,
                                        0)],
             '$156binary_subscr.73': [(<numba.core.ir.Assign object at 0x000001D619D0AD00>,
                                       0)],
             '$158binary_multiply.74': [(<numba.core.ir.Assign object at 0x000001D619D00130>,
                                         0)],
             '$164binary_subscr.77': [(<numba.core.ir.Assign object at 0x000001D619D0ADC0>,
                                       0)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001D619CFE3D0>,
                                     0)],
             '$170binary_subscr.80': [(<numba.core.ir.Assign object at 0x000001D619D0AE80>,
                                       0)],
             '$172binary_multiply.81': [(<numba.core.ir.Assign object at 0x000001D619D00AF0>,
                                         0)],
             '$178binary_subscr.84': [(<numba.core.ir.Assign object at 0x000001D619D0AF40>,
                                       0)],
             '$180binary_multiply.85': [(<numba.core.ir.Assign object at 0x000001D619D020D0>,
                                         0)],
             '$182binary_add.86': [(<numba.core.ir.Assign object at 0x000001D619D02250>,
                                    0)],
             '$194binary_subscr.91': [(<numba.core.ir.Assign object at 0x000001D619D0C040>,
                                       0)],
             '$196unary_negative.92': [(<numba.core.ir.Assign object at 0x000001D619D02B20>,
                                        0)],
             '$202binary_subscr.95': [(<numba.core.ir.Assign object at 0x000001D619D0C100>,
                                       0)],
             '$204binary_multiply.96': [(<numba.core.ir.Assign object at 0x000001D619D05130>,
                                         0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x000001D619CDA490>,
                                       0)],
             '$210binary_subscr.99': [(<numba.core.ir.Assign object at 0x000001D619D0C1C0>,
                                       0)],
             '$214binary_multiply.101': [(<numba.core.ir.Assign object at 0x000001D619D057F0>,
                                          0)],
             '$216binary_add.102': [(<numba.core.ir.Assign object at 0x000001D619D05970>,
                                     0)],
             '$228binary_subscr.107': [(<numba.core.ir.Assign object at 0x000001D619D0C280>,
                                        0)],
             '$22call_function.10': [(<numba.core.ir.Assign object at 0x000001D619CEA5B0>,
                                      0)],
             '$230unary_negative.108': [(<numba.core.ir.Assign object at 0x000001D619D07280>,
                                         0)],
             '$236binary_subscr.111': [(<numba.core.ir.Assign object at 0x000001D619D0C340>,
                                        0)],
             '$238binary_multiply.112': [(<numba.core.ir.Assign object at 0x000001D619D07850>,
                                          0)],
             '$244binary_subscr.115': [(<numba.core.ir.Assign object at 0x000001D619D0C400>,
                                        0)],
             '$24call_method.11': [(<numba.core.ir.Assign object at 0x000001D619CEAE80>,
                                    0)],
             '$250binary_subscr.118': [(<numba.core.ir.Assign object at 0x000001D619D0C4C0>,
                                        0)],
             '$252binary_multiply.119': [(<numba.core.ir.Assign object at 0x000001D619D0A250>,
                                          0)],
             '$254binary_add.120': [(<numba.core.ir.Assign object at 0x000001D619D0A3D0>,
                                     0)],
             '$264return_value.124': [(<numba.core.ir.Assign object at 0x000001D619D0AA00>,
                                       0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000001D619CDA0D0>,
                                 0)],
             '$30binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001D619CF6580>,
                                      0)],
             '$32binary_multiply.15': [(<numba.core.ir.Assign object at 0x000001D619CD82B0>,
                                        0)],
             '$38binary_subscr.18': [(<numba.core.ir.Assign object at 0x000001D619D002B0>,
                                      0)],
             '$44load_deref.20': [(<numba.core.ir.Assign object at 0x000001D619CF4220>,
                                   0)],
             '$4load_global.1': [(<numba.core.ir.Assign object at 0x000001D619CDA460>,
                                  0)],
             '$50binary_subscr.23': [(<numba.core.ir.Assign object at 0x000001D619D00C70>,
                                      0)],
             '$56binary_subscr.26': [(<numba.core.ir.Assign object at 0x000001D619D052B0>,
                                      0)],
             '$62binary_subscr.29': [(<numba.core.ir.Assign object at 0x000001D619D05E50>,
                                      0)],
             '$68binary_subscr.32': [(<numba.core.ir.Assign object at 0x000001D619CF9FD0>,
                                      0)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000001D619CDAA60>,
                                0)],
             '$78binary_subscr.36': [(<numba.core.ir.Assign object at 0x000001D619D073A0>,
                                      0)],
             '$8load_method.3': [(<numba.core.ir.Assign object at 0x000001D619CDAEE0>,
                                  0)],
             '$90binary_subscr.41': [(<numba.core.ir.Assign object at 0x000001D619D07D60>,
                                      0)],
             '$92unary_negative.42': [(<numba.core.ir.Assign object at 0x000001D619CF92E0>,
                                       0)],
             '$98binary_subscr.45': [(<numba.core.ir.Assign object at 0x000001D619CEAC40>,
                                      0)],
             '$const102.47': [(<numba.core.ir.Assign object at 0x000001D619CF99A0>,
                               0)],
             '$const112.52': [(<numba.core.ir.Assign object at 0x000001D619CFB100>,
                               0)],
             '$const118.55': [(<numba.core.ir.Assign object at 0x000001D619CFB520>,
                               0)],
             '$const128.60': [(<numba.core.ir.Assign object at 0x000001D619CFBC40>,
                               0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x000001D619CDA940>,
                             0)],
             '$const140.66': [(<numba.core.ir.Assign object at 0x000001D619CFE4C0>,
                               0)],
             '$const146.68': [(<numba.core.ir.Assign object at 0x000001D619CFE820>,
                               0)],
             '$const154.72': [(<numba.core.ir.Assign object at 0x000001D619CFEDC0>,
                               0)],
             '$const162.76': [(<numba.core.ir.Assign object at 0x000001D619D003A0>,
                               0)],
             '$const168.79': [(<numba.core.ir.Assign object at 0x000001D619D007C0>,
                               0)],
             '$const176.83': [(<numba.core.ir.Assign object at 0x000001D619D00D60>,
                               0)],
             '$const186.88': [(<numba.core.ir.Assign object at 0x000001D619D024C0>,
                               0)],
             '$const192.90': [(<numba.core.ir.Assign object at 0x000001D619D02820>,
                               0)],
             '$const200.94': [(<numba.core.ir.Assign object at 0x000001D619D02DC0>,
                               0)],
             '$const208.98': [(<numba.core.ir.Assign object at 0x000001D619D053A0>,
                               0)],
             '$const220.104': [(<numba.core.ir.Assign object at 0x000001D619D05BE0>,
                                0)],
             '$const226.106': [(<numba.core.ir.Assign object at 0x000001D619D05F40>,
                                0)],
             '$const234.110': [(<numba.core.ir.Assign object at 0x000001D619D07520>,
                                0)],
             '$const242.114': [(<numba.core.ir.Assign object at 0x000001D619D07AC0>,
                                0)],
             '$const248.117': [(<numba.core.ir.Assign object at 0x000001D619D07EE0>,
                                0)],
             '$const258.122': [(<numba.core.ir.Assign object at 0x000001D619D0A640>,
                                0)],
             '$const262.123': [(<numba.core.ir.Assign object at 0x000001D619D0A880>,
                                0)],
             '$const28.13': [(<numba.core.ir.Assign object at 0x000001D60D3D3EE0>,
                              0)],
             '$const36.17': [(<numba.core.ir.Assign object at 0x000001D619CECD90>,
                              0)],
             '$const48.22': [(<numba.core.ir.Assign object at 0x000001D619CF44C0>,
                              0)],
             '$const54.25': [(<numba.core.ir.Assign object at 0x000001D619CF48E0>,
                              0)],
             '$const60.28': [(<numba.core.ir.Assign object at 0x000001D619CF4D00>,
                              0)],
             '$const66.31': [(<numba.core.ir.Assign object at 0x000001D619CF6160>,
                              0)],
             '$const76.35': [(<numba.core.ir.Assign object at 0x000001D619CF6820>,
                              0)],
             '$const82.38': [(<numba.core.ir.Assign object at 0x000001D619CF6C40>,
                              0)],
             '$const88.40': [(<numba.core.ir.Assign object at 0x000001D619CF6FA0>,
                              0)],
             '$const96.44': [(<numba.core.ir.Assign object at 0x000001D619CF9580>,
                              0)],
             'constants': [(<numba.core.ir.Assign object at 0x000001D619CEA2B0>,
                            0)],
             'control': [(<numba.core.ir.Assign object at 0x000001D619CF64C0>,
                          0)],
             'outarray': [(<numba.core.ir.Assign object at 0x000001D619CEA8B0>,
                           0)],
             'ref': [(<numba.core.ir.Assign object at 0x000001D619CDA1C0>, 0)],
             'state': [(<numba.core.ir.Assign object at 0x000001D619CEA9D0>,
                        0)],
             't': [(<numba.core.ir.Assign object at 0x000001D619CEA190>, 0)]})
07/29/2024 05:30:15 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D619CEC970>
07/29/2024 05:30:16 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=225)
           2	LOAD_FAST(arg=0, lineno=227)
           4	LOAD_ATTR(arg=0, lineno=227)
           6	LOAD_CONST(arg=1, lineno=227)
           8	BINARY_SUBSCR(arg=None, lineno=227)
          10	STORE_FAST(arg=3, lineno=227)
          12	LOAD_GLOBAL(arg=1, lineno=228)
          14	LOAD_FAST(arg=1, lineno=228)
          16	CALL_FUNCTION(arg=1, lineno=228)
          18	STORE_FAST(arg=1, lineno=228)
          20	LOAD_GLOBAL(arg=1, lineno=229)
          22	LOAD_FAST(arg=2, lineno=229)
          24	CALL_FUNCTION(arg=1, lineno=229)
          26	STORE_FAST(arg=2, lineno=229)
          28	LOAD_FAST(arg=3, lineno=231)
          30	LOAD_CONST(arg=2, lineno=231)
          32	COMPARE_OP(arg=5, lineno=231)
          34	POP_JUMP_IF_FALSE(arg=114, lineno=231)
          36	LOAD_GLOBAL(arg=2, lineno=232)
          38	LOAD_FAST(arg=0, lineno=232)
          40	LOAD_CONST(arg=1, lineno=232)
          42	LOAD_FAST(arg=1, lineno=232)
          44	CALL_FUNCTION(arg=3, lineno=232)
          46	POP_TOP(arg=None, lineno=232)
          48	LOAD_GLOBAL(arg=3, lineno=235)
          50	LOAD_FAST(arg=2, lineno=235)
          52	CALL_FUNCTION(arg=1, lineno=235)
          54	GET_ITER(arg=None, lineno=235)
>         56	FOR_ITER(arg=14, lineno=235)
          58	STORE_FAST(arg=4, lineno=235)
          60	LOAD_GLOBAL(arg=4, lineno=236)
          62	LOAD_FAST(arg=0, lineno=236)
          64	LOAD_CONST(arg=1, lineno=236)
          66	CALL_FUNCTION(arg=2, lineno=236)
          68	POP_TOP(arg=None, lineno=236)
          70	JUMP_ABSOLUTE(arg=56, lineno=236)
>         72	LOAD_GLOBAL(arg=3, lineno=239)
          74	LOAD_CONST(arg=2, lineno=239)
          76	LOAD_FAST(arg=3, lineno=239)
          78	CALL_FUNCTION(arg=2, lineno=239)
          80	GET_ITER(arg=None, lineno=239)
>         82	FOR_ITER(arg=30, lineno=239)
          84	STORE_FAST(arg=5, lineno=239)
          86	LOAD_FAST(arg=0, lineno=240)
          88	LOAD_FAST(arg=5, lineno=240)
          90	LOAD_CONST(arg=2, lineno=240)
          92	BINARY_SUBTRACT(arg=None, lineno=240)
          94	BINARY_SUBSCR(arg=None, lineno=240)
          96	LOAD_FAST(arg=0, lineno=240)
          98	LOAD_FAST(arg=5, lineno=240)
         100	STORE_SUBSCR(arg=None, lineno=240)
         102	LOAD_GLOBAL(arg=4, lineno=241)
         104	LOAD_FAST(arg=0, lineno=241)
         106	LOAD_FAST(arg=5, lineno=241)
         108	CALL_FUNCTION(arg=2, lineno=241)
         110	POP_TOP(arg=None, lineno=241)
         112	JUMP_ABSOLUTE(arg=82, lineno=241)
>        114	LOAD_CONST(arg=0, lineno=241)
         116	RETURN_VALUE(arg=None, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: []
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=225)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=227)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=227)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$states2.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=227)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$4load_attr.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=227)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$4load_attr.1', '$const6.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=10, inst=STORE_FAST(arg=3, lineno=227)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$8binary_subscr.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=228)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=228)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$12load_global.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=228)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$12load_global.4', '$seed14.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=18, inst=STORE_FAST(arg=1, lineno=228)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$16call_function.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=229)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=229)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$20load_global.7']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=24, inst=CALL_FUNCTION(arg=1, lineno=229)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$20load_global.7', '$subsequence_start22.8']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=26, inst=STORE_FAST(arg=2, lineno=229)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$24call_function.9']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=28, inst=LOAD_FAST(arg=3, lineno=231)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=231)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$n28.10']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=32, inst=COMPARE_OP(arg=5, lineno=231)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$n28.10', '$const30.11']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=114, lineno=231)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$32compare_op.12']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=114, stack=(), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: []
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=36 nstack_initial=0)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_GLOBAL(arg=2, lineno=232)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=232)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$36load_global.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=232)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$36load_global.0', '$states38.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=232)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$36load_global.0', '$states38.1', '$const40.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=44, inst=CALL_FUNCTION(arg=3, lineno=232)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$36load_global.0', '$states38.1', '$const40.2', '$seed42.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=46, inst=POP_TOP(arg=None, lineno=232)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$44call_function.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=235)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=235)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$48load_global.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=235)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$48load_global.5', '$subsequence_start50.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=54, inst=GET_ITER(arg=None, lineno=235)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$52call_function.7']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=56, stack=('$54get_iter.8',), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=56 nstack_initial=1)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: []
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=114 nstack_initial=0)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=114, inst=LOAD_CONST(arg=0, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=116, inst=RETURN_VALUE(arg=None, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$const114.0']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=56 nstack_initial=1)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi56.0']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=56 nstack_initial=1)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=56, inst=FOR_ITER(arg=14, lineno=235)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi56.0']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=('$phi56.0', '$56for_iter.2'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=58 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: []
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=72 nstack_initial=0)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=72, inst=LOAD_GLOBAL(arg=3, lineno=239)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=239)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$72load_global.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=76, inst=LOAD_FAST(arg=3, lineno=239)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$72load_global.0', '$const74.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=239)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$72load_global.0', '$const74.1', '$n76.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=80, inst=GET_ITER(arg=None, lineno=239)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$78call_function.3']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=82, stack=('$80get_iter.4',), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=58 nstack_initial=2), State(pc_initial=82 nstack_initial=1)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi58.0', '$phi58.1']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=58 nstack_initial=2)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=58, inst=STORE_FAST(arg=4, lineno=235)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi58.0', '$phi58.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=60, inst=LOAD_GLOBAL(arg=4, lineno=236)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi58.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=236)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi58.0', '$60load_global.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=236)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi58.0', '$60load_global.2', '$states62.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=66, inst=CALL_FUNCTION(arg=2, lineno=236)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi58.0', '$60load_global.2', '$states62.3', '$const64.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=68, inst=POP_TOP(arg=None, lineno=236)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi58.0', '$66call_function.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=70, inst=JUMP_ABSOLUTE(arg=56, lineno=236)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi58.0']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=56, stack=('$phi58.0',), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=56 nstack_initial=1)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi82.0']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=82 nstack_initial=1)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=82, inst=FOR_ITER(arg=30, lineno=239)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi82.0']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi82.0', '$82for_iter.2'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=56 nstack_initial=1), State(pc_initial=114 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=84 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi84.0', '$phi84.1']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=84 nstack_initial=2)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=84, inst=STORE_FAST(arg=5, lineno=239)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$phi84.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$states86.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$states86.2', '$i88.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=92, inst=BINARY_SUBTRACT(arg=None, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$states86.2', '$i88.3', '$const90.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=94, inst=BINARY_SUBSCR(arg=None, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$states86.2', '$92binary_subtract.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=96, inst=LOAD_FAST(arg=0, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$94binary_subscr.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$94binary_subscr.6', '$states96.7']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=240)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$94binary_subscr.6', '$states96.7', '$i98.8']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=102, inst=LOAD_GLOBAL(arg=4, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$102load_global.9']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=106, inst=LOAD_FAST(arg=5, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$102load_global.9', '$states104.10']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=108, inst=CALL_FUNCTION(arg=2, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$102load_global.9', '$states104.10', '$i106.11']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=110, inst=POP_TOP(arg=None, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0', '$108call_function.12']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=112, inst=JUMP_ABSOLUTE(arg=82, lineno=241)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi84.0']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=82, stack=('$phi84.0',), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=82 nstack_initial=1)])
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=1): {'$phi56.0'},
             State(pc_initial=58 nstack_initial=2): {'$phi58.1'},
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=1): {'$phi82.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=114 nstack_initial=0): set()})
07/29/2024 05:30:16 PM - DEBUG - find_use_defs - defmap: {'$phi56.0': State(pc_initial=36 nstack_initial=0),
 '$phi58.1': State(pc_initial=56 nstack_initial=1),
 '$phi82.0': State(pc_initial=72 nstack_initial=0),
 '$phi84.1': State(pc_initial=82 nstack_initial=1)}
07/29/2024 05:30:16 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=2))},
             '$phi58.0': {('$phi56.0', State(pc_initial=56 nstack_initial=1))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0)),
                          ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi84.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/29/2024 05:30:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=1))},
             '$phi58.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/29/2024 05:30:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/29/2024 05:30:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.0': {('$54get_iter.8',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi58.1': {('$56for_iter.2',
                           State(pc_initial=56 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.4',
                           State(pc_initial=72 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
07/29/2024 05:30:16 PM - DEBUG - apply_changes - keep phismap: {'$phi56.0': {('$54get_iter.8', State(pc_initial=36 nstack_initial=0))},
 '$phi58.1': {('$56for_iter.2', State(pc_initial=56 nstack_initial=1))},
 '$phi82.0': {('$80get_iter.4', State(pc_initial=72 nstack_initial=0))},
 '$phi84.1': {('$82for_iter.2', State(pc_initial=82 nstack_initial=1))}}
07/29/2024 05:30:16 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=36 nstack_initial=0): {'$phi56.0': '$54get_iter.8'},
             State(pc_initial=56 nstack_initial=1): {'$phi58.1': '$56for_iter.2'},
             State(pc_initial=72 nstack_initial=0): {'$phi82.0': '$80get_iter.4'},
             State(pc_initial=82 nstack_initial=1): {'$phi84.1': '$82for_iter.2'}})
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$states2.0'}), (4, {'item': '$states2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$seed14.5'}), (16, {'func': '$12load_global.4', 'args': ['$seed14.5'], 'res': '$16call_function.6'}), (18, {'value': '$16call_function.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$subsequence_start22.8'}), (24, {'func': '$20load_global.7', 'args': ['$subsequence_start22.8'], 'res': '$24call_function.9'}), (26, {'value': '$24call_function.9'}), (28, {'res': '$n28.10'}), (30, {'res': '$const30.11'}), (32, {'lhs': '$n28.10', 'rhs': '$const30.11', 'res': '$32compare_op.12'}), (34, {'pred': '$32compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 114: ()})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$36load_global.0'}), (38, {'res': '$states38.1'}), (40, {'res': '$const40.2'}), (42, {'res': '$seed42.3'}), (44, {'func': '$36load_global.0', 'args': ['$states38.1', '$const40.2', '$seed42.3'], 'res': '$44call_function.4'}), (48, {'res': '$48load_global.5'}), (50, {'res': '$subsequence_start50.6'}), (52, {'func': '$48load_global.5', 'args': ['$subsequence_start50.6'], 'res': '$52call_function.7'}), (54, {'value': '$52call_function.7', 'res': '$54get_iter.8'})), outgoing_phis={'$phi56.0': '$54get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: ('$54get_iter.8',)})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=56 nstack_initial=1):
AdaptBlockInfo(insts=((56, {'iterator': '$phi56.0', 'pair': '$56for_iter.1', 'indval': '$56for_iter.2', 'pred': '$56for_iter.3'}),), outgoing_phis={'$phi58.1': '$56for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: (), 58: ('$phi56.0', '$56for_iter.2')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=58 nstack_initial=2):
AdaptBlockInfo(insts=((58, {'value': '$phi58.1'}), (60, {'res': '$60load_global.2'}), (62, {'res': '$states62.3'}), (64, {'res': '$const64.4'}), (66, {'func': '$60load_global.2', 'args': ['$states62.3', '$const64.4'], 'res': '$66call_function.5'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: ('$phi58.0',)})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$72load_global.0'}), (74, {'res': '$const74.1'}), (76, {'res': '$n76.2'}), (78, {'func': '$72load_global.0', 'args': ['$const74.1', '$n76.2'], 'res': '$78call_function.3'}), (80, {'value': '$78call_function.3', 'res': '$80get_iter.4'})), outgoing_phis={'$phi82.0': '$80get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$80get_iter.4',)})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=82 nstack_initial=1):
AdaptBlockInfo(insts=((82, {'iterator': '$phi82.0', 'pair': '$82for_iter.1', 'indval': '$82for_iter.2', 'pred': '$82for_iter.3'}),), outgoing_phis={'$phi84.1': '$82for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 84: ('$phi82.0', '$82for_iter.2')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$states86.2'}), (88, {'res': '$i88.3'}), (90, {'res': '$const90.4'}), (92, {'lhs': '$i88.3', 'rhs': '$const90.4', 'res': '$92binary_subtract.5'}), (94, {'index': '$92binary_subtract.5', 'target': '$states86.2', 'res': '$94binary_subscr.6'}), (96, {'res': '$states96.7'}), (98, {'res': '$i98.8'}), (100, {'target': '$states96.7', 'index': '$i98.8', 'value': '$94binary_subscr.6'}), (102, {'res': '$102load_global.9'}), (104, {'res': '$states104.10'}), (106, {'res': '$i106.11'}), (108, {'func': '$102load_global.9', 'args': ['$states104.10', '$i106.11'], 'res': '$108call_function.12'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$phi84.0',)})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$const114.0'}), (116, {'retval': '$const114.0', 'castval': '$116return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:16 PM - DEBUG - interpret - label 0:
    states = arg(0, name=states)             ['states']
    seed = arg(1, name=seed)                 ['seed']
    subsequence_start = arg(2, name=subsequence_start) ['subsequence_start']
    $4load_attr.1 = getattr(value=states, attr=shape) ['$4load_attr.1', 'states']
    $const6.2 = const(int, 0)                ['$const6.2']
    n = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$const6.2', 'n']
    $12load_global.4 = global(uint64: uint64) ['$12load_global.4']
    seed.1 = call $12load_global.4(seed, func=$12load_global.4, args=[Var(seed, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.4', 'seed', 'seed.1']
    $20load_global.7 = global(uint64: uint64) ['$20load_global.7']
    subsequence_start.1 = call $20load_global.7(subsequence_start, func=$20load_global.7, args=[Var(subsequence_start, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', 'subsequence_start', 'subsequence_start.1']
    $const30.11 = const(int, 1)              ['$const30.11']
    $32compare_op.12 = n >= $const30.11      ['$32compare_op.12', '$const30.11', 'n']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.12, func=bool34, args=(Var($32compare_op.12, random.py:231),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.12', '$34pred', 'bool34']
    branch $34pred, 36, 114                  ['$34pred']
label 36:
    $36load_global.0 = global(init_xoroshiro128p_state: CPUDispatcher(<function init_xoroshiro128p_state at 0x000001D5BA722B80>)) ['$36load_global.0']
    $const40.2 = const(int, 0)               ['$const40.2']
    $44call_function.4 = call $36load_global.0(states, $const40.2, seed.1, func=$36load_global.0, args=[Var(states, random.py:225), Var($const40.2, random.py:232), Var(seed.1, random.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.0', '$44call_function.4', '$const40.2', 'seed.1', 'states']
    $48load_global.5 = global(range: <class 'range'>) ['$48load_global.5']
    $52call_function.7 = call $48load_global.5(subsequence_start.1, func=$48load_global.5, args=[Var(subsequence_start.1, random.py:229)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.5', '$52call_function.7', 'subsequence_start.1']
    $54get_iter.8 = getiter(value=$52call_function.7) ['$52call_function.7', '$54get_iter.8']
    $phi56.0 = $54get_iter.8                 ['$54get_iter.8', '$phi56.0']
    jump 56                                  []
label 56:
    $56for_iter.1 = iternext(value=$phi56.0) ['$56for_iter.1', '$phi56.0']
    $56for_iter.2 = pair_first(value=$56for_iter.1) ['$56for_iter.1', '$56for_iter.2']
    $56for_iter.3 = pair_second(value=$56for_iter.1) ['$56for_iter.1', '$56for_iter.3']
    $phi58.1 = $56for_iter.2                 ['$56for_iter.2', '$phi58.1']
    branch $56for_iter.3, 58, 72             ['$56for_iter.3']
label 58:
    _ = $phi58.1                             ['$phi58.1', '_']
    $60load_global.2 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001D5BA73F0D0>)) ['$60load_global.2']
    $const64.4 = const(int, 0)               ['$const64.4']
    $66call_function.5 = call $60load_global.2(states, $const64.4, func=$60load_global.2, args=[Var(states, random.py:225), Var($const64.4, random.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_global.2', '$66call_function.5', '$const64.4', 'states']
    jump 56                                  []
label 72:
    $72load_global.0 = global(range: <class 'range'>) ['$72load_global.0']
    $const74.1 = const(int, 1)               ['$const74.1']
    $78call_function.3 = call $72load_global.0($const74.1, n, func=$72load_global.0, args=[Var($const74.1, random.py:239), Var(n, random.py:227)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.0', '$78call_function.3', '$const74.1', 'n']
    $80get_iter.4 = getiter(value=$78call_function.3) ['$78call_function.3', '$80get_iter.4']
    $phi82.0 = $80get_iter.4                 ['$80get_iter.4', '$phi82.0']
    jump 82                                  []
label 82:
    $82for_iter.1 = iternext(value=$phi82.0) ['$82for_iter.1', '$phi82.0']
    $82for_iter.2 = pair_first(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.2']
    $82for_iter.3 = pair_second(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.3']
    $phi84.1 = $82for_iter.2                 ['$82for_iter.2', '$phi84.1']
    branch $82for_iter.3, 84, 114            ['$82for_iter.3']
label 84:
    i = $phi84.1                             ['$phi84.1', 'i']
    $const90.4 = const(int, 1)               ['$const90.4']
    $92binary_subtract.5 = i - $const90.4    ['$92binary_subtract.5', '$const90.4', 'i']
    $94binary_subscr.6 = getitem(value=states, index=$92binary_subtract.5, fn=<built-in function getitem>) ['$92binary_subtract.5', '$94binary_subscr.6', 'states']
    states[i] = $94binary_subscr.6           ['$94binary_subscr.6', 'i', 'states']
    $102load_global.9 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001D5BA73F0D0>)) ['$102load_global.9']
    $108call_function.12 = call $102load_global.9(states, i, func=$102load_global.9, args=[Var(states, random.py:225), Var(i, random.py:239)], kws=(), vararg=None, varkwarg=None, target=None) ['$102load_global.9', '$108call_function.12', 'i', 'states']
    jump 82                                  []
label 114:
    $const114.0 = const(NoneType, None)      ['$const114.0']
    $116return_value.1 = cast(value=$const114.0) ['$116return_value.1', '$const114.0']
    return $116return_value.1                ['$116return_value.1']

07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: seed = arg(1, name=seed)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: subsequence_start = arg(2, name=subsequence_start)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $4load_attr.1 = getattr(value=states, attr=shape)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const6.2 = const(int, 0)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: n = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $12load_global.4 = global(uint64: uint64)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: seed.1 = call $12load_global.4(seed, func=$12load_global.4, args=[Var(seed, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $20load_global.7 = global(uint64: uint64)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: subsequence_start.1 = call $20load_global.7(subsequence_start, func=$20load_global.7, args=[Var(subsequence_start, random.py:225)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const30.11 = const(int, 1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $32compare_op.12 = n >= $const30.11
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: bool34 = global(bool: <class 'bool'>)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $34pred = call bool34($32compare_op.12, func=bool34, args=(Var($32compare_op.12, random.py:231),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $34pred, 36, 114
07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 36
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $36load_global.0 = global(init_xoroshiro128p_state: CPUDispatcher(<function init_xoroshiro128p_state at 0x000001D5BA722B80>))
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const40.2 = const(int, 0)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $44call_function.4 = call $36load_global.0(states, $const40.2, seed.1, func=$36load_global.0, args=[Var(states, random.py:225), Var($const40.2, random.py:232), Var(seed.1, random.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $48load_global.5 = global(range: <class 'range'>)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $52call_function.7 = call $48load_global.5(subsequence_start.1, func=$48load_global.5, args=[Var(subsequence_start.1, random.py:229)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $54get_iter.8 = getiter(value=$52call_function.7)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi56.0 = $54get_iter.8
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 56
07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 56
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $56for_iter.1 = iternext(value=$phi56.0)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $56for_iter.2 = pair_first(value=$56for_iter.1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $56for_iter.3 = pair_second(value=$56for_iter.1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi58.1 = $56for_iter.2
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $56for_iter.3, 58, 72
07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 58
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: _ = $phi58.1
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $60load_global.2 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001D5BA73F0D0>))
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const64.4 = const(int, 0)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $66call_function.5 = call $60load_global.2(states, $const64.4, func=$60load_global.2, args=[Var(states, random.py:225), Var($const64.4, random.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 56
07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 72
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.0 = global(range: <class 'range'>)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.1 = const(int, 1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $78call_function.3 = call $72load_global.0($const74.1, n, func=$72load_global.0, args=[Var($const74.1, random.py:239), Var(n, random.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $80get_iter.4 = getiter(value=$78call_function.3)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi82.0 = $80get_iter.4
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 82
07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 82
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $82for_iter.1 = iternext(value=$phi82.0)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi84.1 = $82for_iter.2
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $82for_iter.3, 84, 114
07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 84
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi84.1
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const90.4 = const(int, 1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $92binary_subtract.5 = i - $const90.4
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $94binary_subscr.6 = getitem(value=states, index=$92binary_subtract.5, fn=<built-in function getitem>)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: states[i] = $94binary_subscr.6
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $102load_global.9 = global(xoroshiro128p_jump: CPUDispatcher(<function xoroshiro128p_jump at 0x000001D5BA73F0D0>))
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $108call_function.12 = call $102load_global.9(states, i, func=$102load_global.9, args=[Var(states, random.py:225), Var(i, random.py:239)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 82
07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 114
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.0 = const(NoneType, None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $116return_value.1 = cast(value=$const114.0)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: return $116return_value.1
07/29/2024 05:30:16 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$102load_global.9': [(<numba.core.ir.Assign object at 0x000001D62C86BCD0>,
                                    84)],
             '$108call_function.12': [(<numba.core.ir.Assign object at 0x000001D62C86E130>,
                                       84)],
             '$116return_value.1': [(<numba.core.ir.Assign object at 0x000001D62C86E310>,
                                     114)],
             '$12load_global.4': [(<numba.core.ir.Assign object at 0x000001D62C855850>,
                                   0)],
             '$20load_global.7': [(<numba.core.ir.Assign object at 0x000001D62C855D90>,
                                   0)],
             '$32compare_op.12': [(<numba.core.ir.Assign object at 0x000001D62C85E5E0>,
                                   0)],
             '$34pred': [(<numba.core.ir.Assign object at 0x000001D62C85E850>,
                          0)],
             '$36load_global.0': [(<numba.core.ir.Assign object at 0x000001D62C84F160>,
                                   36)],
             '$44call_function.4': [(<numba.core.ir.Assign object at 0x000001D62C85EDF0>,
                                     36)],
             '$48load_global.5': [(<numba.core.ir.Assign object at 0x000001D62C85EF10>,
                                   36)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x000001D62C855400>,
                                0)],
             '$52call_function.7': [(<numba.core.ir.Assign object at 0x000001D62C867250>,
                                     36)],
             '$54get_iter.8': [(<numba.core.ir.Assign object at 0x000001D62C867370>,
                                36)],
             '$56for_iter.1': [(<numba.core.ir.Assign object at 0x000001D62C8675E0>,
                                56)],
             '$56for_iter.2': [(<numba.core.ir.Assign object at 0x000001D62C867700>,
                                56)],
             '$56for_iter.3': [(<numba.core.ir.Assign object at 0x000001D62C867820>,
                                56)],
             '$60load_global.2': [(<numba.core.ir.Assign object at 0x000001D62C867C70>,
                                   58)],
             '$66call_function.5': [(<numba.core.ir.Assign object at 0x000001D62C869130>,
                                     58)],
             '$72load_global.0': [(<numba.core.ir.Assign object at 0x000001D62C869370>,
                                   72)],
             '$78call_function.3': [(<numba.core.ir.Assign object at 0x000001D62C8697F0>,
                                     72)],
             '$80get_iter.4': [(<numba.core.ir.Assign object at 0x000001D62C869910>,
                                72)],
             '$82for_iter.1': [(<numba.core.ir.Assign object at 0x000001D62C869C40>,
                                82)],
             '$82for_iter.2': [(<numba.core.ir.Assign object at 0x000001D62C869D60>,
                                82)],
             '$82for_iter.3': [(<numba.core.ir.Assign object at 0x000001D62C869E80>,
                                82)],
             '$92binary_subtract.5': [(<numba.core.ir.Assign object at 0x000001D62C86B700>,
                                       84)],
             '$94binary_subscr.6': [(<numba.core.ir.Assign object at 0x000001D62C86B880>,
                                     84)],
             '$const114.0': [(<numba.core.ir.Assign object at 0x000001D62C86BF10>,
                              114)],
             '$const30.11': [(<numba.core.ir.Assign object at 0x000001D62C85E430>,
                              0)],
             '$const40.2': [(<numba.core.ir.Assign object at 0x000001D62C85EAF0>,
                             36)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x000001D62C855160>,
                            0)],
             '$const64.4': [(<numba.core.ir.Assign object at 0x000001D62C867F10>,
                             58)],
             '$const74.1': [(<numba.core.ir.Assign object at 0x000001D62C8694F0>,
                             72)],
             '$const90.4': [(<numba.core.ir.Assign object at 0x000001D62C86B550>,
                             84)],
             '$phi56.0': [(<numba.core.ir.Assign object at 0x000001D62C85EA00>,
                           36)],
             '$phi58.1': [(<numba.core.ir.Assign object at 0x000001D62C867520>,
                           56)],
             '$phi82.0': [(<numba.core.ir.Assign object at 0x000001D62C869610>,
                           72)],
             '$phi84.1': [(<numba.core.ir.Assign object at 0x000001D62C869B80>,
                           82)],
             '_': [(<numba.core.ir.Assign object at 0x000001D62C867AF0>, 58)],
             'bool34': [(<numba.core.ir.Assign object at 0x000001D62C85E730>,
                         0)],
             'i': [(<numba.core.ir.Assign object at 0x000001D62C86B190>, 84)],
             'n': [(<numba.core.ir.Assign object at 0x000001D62C86E9A0>, 0)],
             'seed': [(<numba.core.ir.Assign object at 0x000001D62C8469D0>, 0)],
             'seed.1': [(<numba.core.ir.Assign object at 0x000001D62C855B50>,
                         0)],
             'states': [(<numba.core.ir.Assign object at 0x000001D62C8467C0>,
                         0)],
             'subsequence_start': [(<numba.core.ir.Assign object at 0x000001D62C846E80>,
                                    0)],
             'subsequence_start.1': [(<numba.core.ir.Assign object at 0x000001D62C85E0D0>,
                                      0)]})
07/29/2024 05:30:16 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D62C84F6D0>
07/29/2024 05:30:16 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=46)
           2	LOAD_GLOBAL(arg=0, lineno=60)
           4	LOAD_FAST(arg=1, lineno=60)
           6	CALL_FUNCTION(arg=1, lineno=60)
           8	STORE_FAST(arg=1, lineno=60)
          10	LOAD_GLOBAL(arg=1, lineno=61)
          12	LOAD_FAST(arg=2, lineno=61)
          14	CALL_FUNCTION(arg=1, lineno=61)
          16	STORE_FAST(arg=2, lineno=61)
          18	LOAD_FAST(arg=2, lineno=63)
          20	LOAD_GLOBAL(arg=1, lineno=63)
          22	LOAD_CONST(arg=1, lineno=63)
          24	CALL_FUNCTION(arg=1, lineno=63)
          26	BINARY_ADD(arg=None, lineno=63)
          28	STORE_FAST(arg=3, lineno=63)
          30	LOAD_FAST(arg=3, lineno=64)
          32	LOAD_FAST(arg=3, lineno=64)
          34	LOAD_GLOBAL(arg=2, lineno=64)
          36	LOAD_CONST(arg=2, lineno=64)
          38	CALL_FUNCTION(arg=1, lineno=64)
          40	BINARY_RSHIFT(arg=None, lineno=64)
          42	BINARY_XOR(arg=None, lineno=64)
          44	LOAD_GLOBAL(arg=1, lineno=64)
          46	LOAD_CONST(arg=3, lineno=64)
          48	CALL_FUNCTION(arg=1, lineno=64)
          50	BINARY_MULTIPLY(arg=None, lineno=64)
          52	STORE_FAST(arg=3, lineno=64)
          54	LOAD_FAST(arg=3, lineno=65)
          56	LOAD_FAST(arg=3, lineno=65)
          58	LOAD_GLOBAL(arg=2, lineno=65)
          60	LOAD_CONST(arg=4, lineno=65)
          62	CALL_FUNCTION(arg=1, lineno=65)
          64	BINARY_RSHIFT(arg=None, lineno=65)
          66	BINARY_XOR(arg=None, lineno=65)
          68	LOAD_GLOBAL(arg=1, lineno=65)
          70	LOAD_CONST(arg=5, lineno=65)
          72	CALL_FUNCTION(arg=1, lineno=65)
          74	BINARY_MULTIPLY(arg=None, lineno=65)
          76	STORE_FAST(arg=3, lineno=65)
          78	LOAD_FAST(arg=3, lineno=66)
          80	LOAD_FAST(arg=3, lineno=66)
          82	LOAD_GLOBAL(arg=2, lineno=66)
          84	LOAD_CONST(arg=6, lineno=66)
          86	CALL_FUNCTION(arg=1, lineno=66)
          88	BINARY_RSHIFT(arg=None, lineno=66)
          90	BINARY_XOR(arg=None, lineno=66)
          92	STORE_FAST(arg=3, lineno=66)
          94	LOAD_FAST(arg=3, lineno=68)
          96	LOAD_FAST(arg=0, lineno=68)
          98	LOAD_FAST(arg=1, lineno=68)
         100	BINARY_SUBSCR(arg=None, lineno=68)
         102	LOAD_CONST(arg=7, lineno=68)
         104	STORE_SUBSCR(arg=None, lineno=68)
         106	LOAD_FAST(arg=3, lineno=69)
         108	LOAD_FAST(arg=0, lineno=69)
         110	LOAD_FAST(arg=1, lineno=69)
         112	BINARY_SUBSCR(arg=None, lineno=69)
         114	LOAD_CONST(arg=8, lineno=69)
         116	STORE_SUBSCR(arg=None, lineno=69)
         118	LOAD_CONST(arg=9, lineno=69)
         120	RETURN_VALUE(arg=None, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: []
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=46)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=60)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=60)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=60)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$2load_global.0', '$index4.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=60)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$6call_function.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=61)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=61)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$10load_global.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=61)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$10load_global.3', '$seed12.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=2, lineno=61)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$14call_function.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=63)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=63)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$seed18.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=63)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$seed18.6', '$20load_global.7']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=24, inst=CALL_FUNCTION(arg=1, lineno=63)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$seed18.6', '$20load_global.7', '$const22.8']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=63)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$seed18.6', '$24call_function.9']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=28, inst=STORE_FAST(arg=3, lineno=63)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$26binary_add.10']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z30.11']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_GLOBAL(arg=2, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z30.11', '$z32.12']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z30.11', '$z32.12', '$34load_global.13']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z30.11', '$z32.12', '$34load_global.13', '$const36.14']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=40, inst=BINARY_RSHIFT(arg=None, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z30.11', '$z32.12', '$38call_function.15']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=42, inst=BINARY_XOR(arg=None, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z30.11', '$40binary_rshift.16']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=44, inst=LOAD_GLOBAL(arg=1, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$42binary_xor.17']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=46, inst=LOAD_CONST(arg=3, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$42binary_xor.17', '$44load_global.18']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$42binary_xor.17', '$44load_global.18', '$const46.19']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=50, inst=BINARY_MULTIPLY(arg=None, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$42binary_xor.17', '$48call_function.20']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=52, inst=STORE_FAST(arg=3, lineno=64)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$50binary_multiply.21']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=56, inst=LOAD_FAST(arg=3, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z54.22']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=58, inst=LOAD_GLOBAL(arg=2, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z54.22', '$z56.23']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=60, inst=LOAD_CONST(arg=4, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z54.22', '$z56.23', '$58load_global.24']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z54.22', '$z56.23', '$58load_global.24', '$const60.25']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=64, inst=BINARY_RSHIFT(arg=None, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z54.22', '$z56.23', '$62call_function.26']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=66, inst=BINARY_XOR(arg=None, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z54.22', '$64binary_rshift.27']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$66binary_xor.28']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=70, inst=LOAD_CONST(arg=5, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$66binary_xor.28', '$68load_global.29']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$66binary_xor.28', '$68load_global.29', '$const70.30']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=74, inst=BINARY_MULTIPLY(arg=None, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$66binary_xor.28', '$72call_function.31']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=76, inst=STORE_FAST(arg=3, lineno=65)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$74binary_multiply.32']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=78, inst=LOAD_FAST(arg=3, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z78.33']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=82, inst=LOAD_GLOBAL(arg=2, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z78.33', '$z80.34']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=84, inst=LOAD_CONST(arg=6, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z78.33', '$z80.34', '$82load_global.35']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=86, inst=CALL_FUNCTION(arg=1, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z78.33', '$z80.34', '$82load_global.35', '$const84.36']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=88, inst=BINARY_RSHIFT(arg=None, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z78.33', '$z80.34', '$86call_function.37']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=90, inst=BINARY_XOR(arg=None, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z78.33', '$88binary_rshift.38']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=92, inst=STORE_FAST(arg=3, lineno=66)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$90binary_xor.39']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=68)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=96, inst=LOAD_FAST(arg=0, lineno=68)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z94.40']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=98, inst=LOAD_FAST(arg=1, lineno=68)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z94.40', '$states96.41']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=100, inst=BINARY_SUBSCR(arg=None, lineno=68)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z94.40', '$states96.41', '$index98.42']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=68)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z94.40', '$100binary_subscr.43']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=68)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z94.40', '$100binary_subscr.43', '$const102.44']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z106.45']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z106.45', '$states108.46']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z106.45', '$states108.46', '$index110.47']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=114, inst=LOAD_CONST(arg=8, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z106.45', '$112binary_subscr.48']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=116, inst=STORE_SUBSCR(arg=None, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$z106.45', '$112binary_subscr.48', '$const114.49']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=118, inst=LOAD_CONST(arg=9, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=69)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$const118.50']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/29/2024 05:30:16 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 05:30:16 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:16 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 05:30:16 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$seed12.4'}), (14, {'func': '$10load_global.3', 'args': ['$seed12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$seed18.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$const22.8'}), (24, {'func': '$20load_global.7', 'args': ['$const22.8'], 'res': '$24call_function.9'}), (26, {'lhs': '$seed18.6', 'rhs': '$24call_function.9', 'res': '$26binary_add.10'}), (28, {'value': '$26binary_add.10'}), (30, {'res': '$z30.11'}), (32, {'res': '$z32.12'}), (34, {'res': '$34load_global.13'}), (36, {'res': '$const36.14'}), (38, {'func': '$34load_global.13', 'args': ['$const36.14'], 'res': '$38call_function.15'}), (40, {'lhs': '$z32.12', 'rhs': '$38call_function.15', 'res': '$40binary_rshift.16'}), (42, {'lhs': '$z30.11', 'rhs': '$40binary_rshift.16', 'res': '$42binary_xor.17'}), (44, {'res': '$44load_global.18'}), (46, {'res': '$const46.19'}), (48, {'func': '$44load_global.18', 'args': ['$const46.19'], 'res': '$48call_function.20'}), (50, {'lhs': '$42binary_xor.17', 'rhs': '$48call_function.20', 'res': '$50binary_multiply.21'}), (52, {'value': '$50binary_multiply.21'}), (54, {'res': '$z54.22'}), (56, {'res': '$z56.23'}), (58, {'res': '$58load_global.24'}), (60, {'res': '$const60.25'}), (62, {'func': '$58load_global.24', 'args': ['$const60.25'], 'res': '$62call_function.26'}), (64, {'lhs': '$z56.23', 'rhs': '$62call_function.26', 'res': '$64binary_rshift.27'}), (66, {'lhs': '$z54.22', 'rhs': '$64binary_rshift.27', 'res': '$66binary_xor.28'}), (68, {'res': '$68load_global.29'}), (70, {'res': '$const70.30'}), (72, {'func': '$68load_global.29', 'args': ['$const70.30'], 'res': '$72call_function.31'}), (74, {'lhs': '$66binary_xor.28', 'rhs': '$72call_function.31', 'res': '$74binary_multiply.32'}), (76, {'value': '$74binary_multiply.32'}), (78, {'res': '$z78.33'}), (80, {'res': '$z80.34'}), (82, {'res': '$82load_global.35'}), (84, {'res': '$const84.36'}), (86, {'func': '$82load_global.35', 'args': ['$const84.36'], 'res': '$86call_function.37'}), (88, {'lhs': '$z80.34', 'rhs': '$86call_function.37', 'res': '$88binary_rshift.38'}), (90, {'lhs': '$z78.33', 'rhs': '$88binary_rshift.38', 'res': '$90binary_xor.39'}), (92, {'value': '$90binary_xor.39'}), (94, {'res': '$z94.40'}), (96, {'res': '$states96.41'}), (98, {'res': '$index98.42'}), (100, {'index': '$index98.42', 'target': '$states96.41', 'res': '$100binary_subscr.43'}), (102, {'res': '$const102.44'}), (104, {'target': '$100binary_subscr.43', 'index': '$const102.44', 'value': '$z94.40'}), (106, {'res': '$z106.45'}), (108, {'res': '$states108.46'}), (110, {'res': '$index110.47'}), (112, {'index': '$index110.47', 'target': '$states108.46', 'res': '$112binary_subscr.48'}), (114, {'res': '$const114.49'}), (116, {'target': '$112binary_subscr.48', 'index': '$const114.49', 'value': '$z106.45'}), (118, {'res': '$const118.50'}), (120, {'retval': '$const118.50', 'castval': '$120return_value.51'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:16 PM - DEBUG - interpret - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    seed = arg(2, name=seed)                 ['seed']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $10load_global.3 = global(uint64: uint64) ['$10load_global.3']
    seed.1 = call $10load_global.3(seed, func=$10load_global.3, args=[Var(seed, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', 'seed', 'seed.1']
    $20load_global.7 = global(uint64: uint64) ['$20load_global.7']
    $const22.8 = const(int, 11400714819323198485) ['$const22.8']
    $24call_function.9 = call $20load_global.7($const22.8, func=$20load_global.7, args=[Var($const22.8, random.py:63)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', '$24call_function.9', '$const22.8']
    z = seed.1 + $24call_function.9          ['$24call_function.9', 'seed.1', 'z']
    $34load_global.13 = global(uint32: uint32) ['$34load_global.13']
    $const36.14 = const(int, 30)             ['$const36.14']
    $38call_function.15 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.13', '$38call_function.15', '$const36.14']
    $40binary_rshift.16 = z >> $38call_function.15 ['$38call_function.15', '$40binary_rshift.16', 'z']
    $42binary_xor.17 = z ^ $40binary_rshift.16 ['$40binary_rshift.16', '$42binary_xor.17', 'z']
    $44load_global.18 = global(uint64: uint64) ['$44load_global.18']
    $const46.19 = const(int, 13787848793156543929) ['$const46.19']
    $48call_function.20 = call $44load_global.18($const46.19, func=$44load_global.18, args=[Var($const46.19, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_global.18', '$48call_function.20', '$const46.19']
    z.1 = $42binary_xor.17 * $48call_function.20 ['$42binary_xor.17', '$48call_function.20', 'z.1']
    $58load_global.24 = global(uint32: uint32) ['$58load_global.24']
    $const60.25 = const(int, 27)             ['$const60.25']
    $62call_function.26 = call $58load_global.24($const60.25, func=$58load_global.24, args=[Var($const60.25, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.24', '$62call_function.26', '$const60.25']
    $64binary_rshift.27 = z.1 >> $62call_function.26 ['$62call_function.26', '$64binary_rshift.27', 'z.1']
    $66binary_xor.28 = z.1 ^ $64binary_rshift.27 ['$64binary_rshift.27', '$66binary_xor.28', 'z.1']
    $68load_global.29 = global(uint64: uint64) ['$68load_global.29']
    $const70.30 = const(int, 10723151780598845931) ['$const70.30']
    $72call_function.31 = call $68load_global.29($const70.30, func=$68load_global.29, args=[Var($const70.30, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.29', '$72call_function.31', '$const70.30']
    z.2 = $66binary_xor.28 * $72call_function.31 ['$66binary_xor.28', '$72call_function.31', 'z.2']
    $82load_global.35 = global(uint32: uint32) ['$82load_global.35']
    $const84.36 = const(int, 31)             ['$const84.36']
    $86call_function.37 = call $82load_global.35($const84.36, func=$82load_global.35, args=[Var($const84.36, random.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$82load_global.35', '$86call_function.37', '$const84.36']
    $88binary_rshift.38 = z.2 >> $86call_function.37 ['$86call_function.37', '$88binary_rshift.38', 'z.2']
    z.3 = z.2 ^ $88binary_rshift.38          ['$88binary_rshift.38', 'z.2', 'z.3']
    $100binary_subscr.43 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$100binary_subscr.43', 'index.1', 'states']
    $const102.44 = const(str, s0)            ['$const102.44']
    $100binary_subscr.43[$const102.44] = z.3 ['$100binary_subscr.43', '$const102.44', 'z.3']
    $112binary_subscr.48 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.48', 'index.1', 'states']
    $const114.49 = const(str, s1)            ['$const114.49']
    $112binary_subscr.48[$const114.49] = z.3 ['$112binary_subscr.48', '$const114.49', 'z.3']
    $const118.50 = const(NoneType, None)     ['$const118.50']
    $120return_value.51 = cast(value=$const118.50) ['$120return_value.51', '$const118.50']
    return $120return_value.51               ['$120return_value.51']

07/29/2024 05:30:16 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C846580>
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: seed = arg(2, name=seed)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: seed.1 = call $10load_global.3(seed, func=$10load_global.3, args=[Var(seed, random.py:46)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $20load_global.7 = global(uint64: uint64)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const22.8 = const(int, 11400714819323198485)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $24call_function.9 = call $20load_global.7($const22.8, func=$20load_global.7, args=[Var($const22.8, random.py:63)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: z = seed.1 + $24call_function.9
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint32: uint32)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 30)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $38call_function.15 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $40binary_rshift.16 = z >> $38call_function.15
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $42binary_xor.17 = z ^ $40binary_rshift.16
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $44load_global.18 = global(uint64: uint64)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const46.19 = const(int, 13787848793156543929)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $48call_function.20 = call $44load_global.18($const46.19, func=$44load_global.18, args=[Var($const46.19, random.py:64)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: z.1 = $42binary_xor.17 * $48call_function.20
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $58load_global.24 = global(uint32: uint32)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const60.25 = const(int, 27)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $62call_function.26 = call $58load_global.24($const60.25, func=$58load_global.24, args=[Var($const60.25, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $64binary_rshift.27 = z.1 >> $62call_function.26
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $66binary_xor.28 = z.1 ^ $64binary_rshift.27
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $68load_global.29 = global(uint64: uint64)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const70.30 = const(int, 10723151780598845931)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $72call_function.31 = call $68load_global.29($const70.30, func=$68load_global.29, args=[Var($const70.30, random.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: z.2 = $66binary_xor.28 * $72call_function.31
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $82load_global.35 = global(uint32: uint32)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const84.36 = const(int, 31)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $86call_function.37 = call $82load_global.35($const84.36, func=$82load_global.35, args=[Var($const84.36, random.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $88binary_rshift.38 = z.2 >> $86call_function.37
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: z.3 = z.2 ^ $88binary_rshift.38
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.43 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const102.44 = const(str, s0)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.43['s0'] = z.3
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.48 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.49 = const(str, s1)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.48['s1'] = z.3
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $const118.50 = const(NoneType, None)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: $120return_value.51 = cast(value=$const118.50)
07/29/2024 05:30:16 PM - DEBUG - _run_ssa_block_pass - on stmt: return $120return_value.51
07/29/2024 05:30:16 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$100binary_subscr.43': [(<numba.core.ir.Assign object at 0x000001D62C8A00D0>,
                                       0)],
             '$10load_global.3': [(<numba.core.ir.Assign object at 0x000001D62C890220>,
                                   0)],
             '$112binary_subscr.48': [(<numba.core.ir.Assign object at 0x000001D62C8A07F0>,
                                       0)],
             '$120return_value.51': [(<numba.core.ir.Assign object at 0x000001D62C8A0D00>,
                                      0)],
             '$20load_global.7': [(<numba.core.ir.Assign object at 0x000001D62C890880>,
                                   0)],
             '$24call_function.9': [(<numba.core.ir.Assign object at 0x000001D62C890BE0>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001D62C885EE0>,
                                  0)],
             '$34load_global.13': [(<numba.core.ir.Assign object at 0x000001D62C899220>,
                                    0)],
             '$38call_function.15': [(<numba.core.ir.Assign object at 0x000001D62C899580>,
                                      0)],
             '$40binary_rshift.16': [(<numba.core.ir.Assign object at 0x000001D62C8996D0>,
                                      0)],
             '$42binary_xor.17': [(<numba.core.ir.Assign object at 0x000001D62C899850>,
                                   0)],
             '$44load_global.18': [(<numba.core.ir.Assign object at 0x000001D62C8999A0>,
                                    0)],
             '$48call_function.20': [(<numba.core.ir.Assign object at 0x000001D62C899D00>,
                                      0)],
             '$58load_global.24': [(<numba.core.ir.Assign object at 0x000001D62C89B340>,
                                    0)],
             '$62call_function.26': [(<numba.core.ir.Assign object at 0x000001D62C89B6A0>,
                                      0)],
             '$64binary_rshift.27': [(<numba.core.ir.Assign object at 0x000001D62C89B7F0>,
                                      0)],
             '$66binary_xor.28': [(<numba.core.ir.Assign object at 0x000001D62C89B970>,
                                   0)],
             '$68load_global.29': [(<numba.core.ir.Assign object at 0x000001D62C89BAC0>,
                                    0)],
             '$72call_function.31': [(<numba.core.ir.Assign object at 0x000001D62C89BE20>,
                                      0)],
             '$82load_global.35': [(<numba.core.ir.Assign object at 0x000001D62C89E460>,
                                    0)],
             '$86call_function.37': [(<numba.core.ir.Assign object at 0x000001D62C89E7C0>,
                                      0)],
             '$88binary_rshift.38': [(<numba.core.ir.Assign object at 0x000001D62C89E910>,
                                      0)],
             '$const102.44': [(<numba.core.ir.Assign object at 0x000001D62C8A0220>,
                               0)],
             '$const114.49': [(<numba.core.ir.Assign object at 0x000001D62C8A0940>,
                               0)],
             '$const118.50': [(<numba.core.ir.Assign object at 0x000001D62C8A0B80>,
                               0)],
             '$const22.8': [(<numba.core.ir.Assign object at 0x000001D62C890A00>,
                             0)],
             '$const36.14': [(<numba.core.ir.Assign object at 0x000001D62C8993A0>,
                              0)],
             '$const46.19': [(<numba.core.ir.Assign object at 0x000001D62C899B20>,
                              0)],
             '$const60.25': [(<numba.core.ir.Assign object at 0x000001D62C89B4C0>,
                              0)],
             '$const70.30': [(<numba.core.ir.Assign object at 0x000001D62C89BC40>,
                              0)],
             '$const84.36': [(<numba.core.ir.Assign object at 0x000001D62C89E5E0>,
                              0)],
             'index': [(<numba.core.ir.Assign object at 0x000001D62C885A00>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001D62C885FA0>,
                          0)],
             'seed': [(<numba.core.ir.Assign object at 0x000001D62C885940>, 0)],
             'seed.1': [(<numba.core.ir.Assign object at 0x000001D62C890520>,
                         0)],
             'states': [(<numba.core.ir.Assign object at 0x000001D62C885BB0>,
                         0)],
             'z': [(<numba.core.ir.Assign object at 0x000001D62C890D30>, 0)],
             'z.1': [(<numba.core.ir.Assign object at 0x000001D62C899E50>, 0)],
             'z.2': [(<numba.core.ir.Assign object at 0x000001D62C89BF70>, 0)],
             'z.3': [(<numba.core.ir.Assign object at 0x000001D62C89EA90>, 0)]})
07/29/2024 05:30:16 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D62C846580>
07/29/2024 05:30:16 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=102)
           2	LOAD_GLOBAL(arg=0, lineno=111)
           4	LOAD_FAST(arg=1, lineno=111)
           6	CALL_FUNCTION(arg=1, lineno=111)
           8	STORE_FAST(arg=1, lineno=111)
          10	LOAD_GLOBAL(arg=1, lineno=113)
          12	LOAD_CONST(arg=1, lineno=113)
          14	CALL_FUNCTION(arg=1, lineno=113)
          16	LOAD_GLOBAL(arg=1, lineno=113)
          18	LOAD_CONST(arg=2, lineno=113)
          20	CALL_FUNCTION(arg=1, lineno=113)
          22	BUILD_TUPLE(arg=2, lineno=113)
          24	STORE_FAST(arg=2, lineno=113)
          26	LOAD_GLOBAL(arg=1, lineno=115)
          28	LOAD_CONST(arg=3, lineno=115)
          30	CALL_FUNCTION(arg=1, lineno=115)
          32	STORE_FAST(arg=3, lineno=115)
          34	LOAD_GLOBAL(arg=1, lineno=116)
          36	LOAD_CONST(arg=3, lineno=116)
          38	CALL_FUNCTION(arg=1, lineno=116)
          40	STORE_FAST(arg=4, lineno=116)
          42	LOAD_GLOBAL(arg=2, lineno=118)
          44	LOAD_CONST(arg=4, lineno=118)
          46	CALL_FUNCTION(arg=1, lineno=118)
          48	GET_ITER(arg=None, lineno=118)
>         50	FOR_ITER(arg=84, lineno=118)
          52	STORE_FAST(arg=5, lineno=118)
          54	LOAD_GLOBAL(arg=2, lineno=119)
          56	LOAD_CONST(arg=5, lineno=119)
          58	CALL_FUNCTION(arg=1, lineno=119)
          60	GET_ITER(arg=None, lineno=119)
>         62	FOR_ITER(arg=70, lineno=119)
          64	STORE_FAST(arg=6, lineno=119)
          66	LOAD_FAST(arg=2, lineno=120)
          68	LOAD_FAST(arg=5, lineno=120)
          70	BINARY_SUBSCR(arg=None, lineno=120)
          72	LOAD_GLOBAL(arg=1, lineno=120)
          74	LOAD_CONST(arg=6, lineno=120)
          76	CALL_FUNCTION(arg=1, lineno=120)
          78	LOAD_GLOBAL(arg=3, lineno=120)
          80	LOAD_FAST(arg=6, lineno=120)
          82	CALL_FUNCTION(arg=1, lineno=120)
          84	BINARY_LSHIFT(arg=None, lineno=120)
          86	BINARY_AND(arg=None, lineno=120)
          88	POP_JUMP_IF_FALSE(arg=122, lineno=120)
          90	LOAD_FAST(arg=3, lineno=121)
          92	LOAD_FAST(arg=0, lineno=121)
          94	LOAD_FAST(arg=1, lineno=121)
          96	BINARY_SUBSCR(arg=None, lineno=121)
          98	LOAD_CONST(arg=7, lineno=121)
         100	BINARY_SUBSCR(arg=None, lineno=121)
         102	INPLACE_XOR(arg=None, lineno=121)
         104	STORE_FAST(arg=3, lineno=121)
         106	LOAD_FAST(arg=4, lineno=122)
         108	LOAD_FAST(arg=0, lineno=122)
         110	LOAD_FAST(arg=1, lineno=122)
         112	BINARY_SUBSCR(arg=None, lineno=122)
         114	LOAD_CONST(arg=8, lineno=122)
         116	BINARY_SUBSCR(arg=None, lineno=122)
         118	INPLACE_XOR(arg=None, lineno=122)
         120	STORE_FAST(arg=4, lineno=122)
>        122	LOAD_GLOBAL(arg=4, lineno=123)
         124	LOAD_FAST(arg=0, lineno=123)
         126	LOAD_FAST(arg=1, lineno=123)
         128	CALL_FUNCTION(arg=2, lineno=123)
         130	POP_TOP(arg=None, lineno=123)
         132	JUMP_ABSOLUTE(arg=62, lineno=123)
>        134	JUMP_ABSOLUTE(arg=50, lineno=123)
>        136	LOAD_FAST(arg=3, lineno=125)
         138	LOAD_FAST(arg=0, lineno=125)
         140	LOAD_FAST(arg=1, lineno=125)
         142	BINARY_SUBSCR(arg=None, lineno=125)
         144	LOAD_CONST(arg=7, lineno=125)
         146	STORE_SUBSCR(arg=None, lineno=125)
         148	LOAD_FAST(arg=4, lineno=126)
         150	LOAD_FAST(arg=0, lineno=126)
         152	LOAD_FAST(arg=1, lineno=126)
         154	BINARY_SUBSCR(arg=None, lineno=126)
         156	LOAD_CONST(arg=8, lineno=126)
         158	STORE_SUBSCR(arg=None, lineno=126)
         160	LOAD_CONST(arg=9, lineno=126)
         162	RETURN_VALUE(arg=None, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: []
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=102)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=111)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=111)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=111)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$2load_global.0', '$index4.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=111)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$6call_function.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$10load_global.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$10load_global.3', '$const12.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$14call_function.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$14call_function.5', '$16load_global.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$14call_function.5', '$16load_global.6', '$const18.7']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=22, inst=BUILD_TUPLE(arg=2, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$14call_function.5', '$20call_function.8']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=24, inst=STORE_FAST(arg=2, lineno=113)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$22build_tuple.9']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=115)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=115)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$26load_global.10']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=115)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$26load_global.10', '$const28.11']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=32, inst=STORE_FAST(arg=3, lineno=115)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$30call_function.12']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_GLOBAL(arg=1, lineno=116)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=116)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$34load_global.13']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=116)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$34load_global.13', '$const36.14']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=40, inst=STORE_FAST(arg=4, lineno=116)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$38call_function.15']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=42, inst=LOAD_GLOBAL(arg=2, lineno=118)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=118)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$42load_global.16']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=118)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$42load_global.16', '$const44.17']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=48, inst=GET_ITER(arg=None, lineno=118)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$46call_function.18']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=50, stack=('$48get_iter.19',), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=50 nstack_initial=1)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi50.0']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=50 nstack_initial=1)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=50, inst=FOR_ITER(arg=84, lineno=118)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi50.0']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=('$phi50.0', '$50for_iter.2'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=52 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: []
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=136 nstack_initial=0)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=136, inst=LOAD_FAST(arg=3, lineno=125)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=125)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s0136.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=140, inst=LOAD_FAST(arg=1, lineno=125)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s0136.0', '$states138.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=142, inst=BINARY_SUBSCR(arg=None, lineno=125)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s0136.0', '$states138.1', '$index140.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=144, inst=LOAD_CONST(arg=7, lineno=125)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s0136.0', '$142binary_subscr.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=125)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s0136.0', '$142binary_subscr.3', '$const144.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=150, inst=LOAD_FAST(arg=0, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s1148.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s1148.5', '$states150.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=154, inst=BINARY_SUBSCR(arg=None, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s1148.5', '$states150.6', '$index152.7']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=156, inst=LOAD_CONST(arg=8, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s1148.5', '$154binary_subscr.8']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=158, inst=STORE_SUBSCR(arg=None, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$s1148.5', '$154binary_subscr.8', '$const156.9']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=160, inst=LOAD_CONST(arg=9, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=162, inst=RETURN_VALUE(arg=None, lineno=126)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$const160.10']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=52 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi52.0', '$phi52.1']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=52 nstack_initial=2)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=52, inst=STORE_FAST(arg=5, lineno=118)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi52.0', '$phi52.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=119)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi52.0']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=56, inst=LOAD_CONST(arg=5, lineno=119)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi52.0', '$54load_global.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=119)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi52.0', '$54load_global.2', '$const56.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=60, inst=GET_ITER(arg=None, lineno=119)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi52.0', '$58call_function.4']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=62, stack=('$phi52.0', '$60get_iter.5'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi62.0', '$phi62.1']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=62 nstack_initial=2)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=62, inst=FOR_ITER(arg=70, lineno=119)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi62.0', '$phi62.1']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=134, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=64, stack=('$phi62.0', '$phi62.1', '$62for_iter.3'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=134 nstack_initial=1), State(pc_initial=64 nstack_initial=3)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi134.0']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=134 nstack_initial=1)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=134, inst=JUMP_ABSOLUTE(arg=50, lineno=123)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi134.0']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=50, stack=('$phi134.0',), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=64 nstack_initial=3), State(pc_initial=50 nstack_initial=1)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi64.0', '$phi64.1', '$phi64.2']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=64 nstack_initial=3)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=64, inst=STORE_FAST(arg=6, lineno=119)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$phi64.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$jump66.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$jump66.3', '$i68.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=72, inst=LOAD_GLOBAL(arg=1, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=74, inst=LOAD_CONST(arg=6, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6', '$const74.7']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=78, inst=LOAD_GLOBAL(arg=3, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9', '$b80.10']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=84, inst=BINARY_LSHIFT(arg=None, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$82call_function.11']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=86, inst=BINARY_AND(arg=None, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$84binary_lshift.12']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=122, lineno=120)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$86binary_and.13']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=90, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0), Edge(pc=122, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi90.0', '$phi90.1']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=90 nstack_initial=2)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=92, inst=LOAD_FAST(arg=0, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3', '$index94.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=98, inst=LOAD_CONST(arg=7, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=100, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5', '$const98.6']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=102, inst=INPLACE_XOR(arg=None, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$100binary_subscr.7']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=104, inst=STORE_FAST(arg=3, lineno=121)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$102inplace_xor.8']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10', '$index110.11']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=114, inst=LOAD_CONST(arg=8, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=116, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12', '$const114.13']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=118, inst=INPLACE_XOR(arg=None, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$116binary_subscr.14']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=120, inst=STORE_FAST(arg=4, lineno=122)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$118inplace_xor.15']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=122, stack=('$phi90.0', '$phi90.1'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - stack: ['$phi122.0', '$phi122.1']
07/29/2024 05:30:16 PM - DEBUG - run - state.pc_initial: State(pc_initial=122 nstack_initial=2)
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=122, inst=LOAD_GLOBAL(arg=4, lineno=123)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=123)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$122load_global.2']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=126, inst=LOAD_FAST(arg=1, lineno=123)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=128, inst=CALL_FUNCTION(arg=2, lineno=123)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3', '$index126.4']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=130, inst=POP_TOP(arg=None, lineno=123)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$128call_function.5']
07/29/2024 05:30:16 PM - DEBUG - dispatch - dispatch pc=132, inst=JUMP_ABSOLUTE(arg=62, lineno=123)
07/29/2024 05:30:16 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1']
07/29/2024 05:30:16 PM - DEBUG - run - end state. edges=[Edge(pc=62, stack=('$phi122.0', '$phi122.1'), blockstack=(), npush=0)]
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=62 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - run - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=1): {'$phi50.0'},
             State(pc_initial=52 nstack_initial=2): {'$phi52.1'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=64 nstack_initial=3): {'$phi64.2'},
             State(pc_initial=90 nstack_initial=2): set(),
             State(pc_initial=122 nstack_initial=2): set(),
             State(pc_initial=134 nstack_initial=1): set(),
             State(pc_initial=136 nstack_initial=0): set()})
07/29/2024 05:30:16 PM - DEBUG - find_use_defs - defmap: {'$phi50.0': State(pc_initial=0 nstack_initial=0),
 '$phi52.1': State(pc_initial=50 nstack_initial=1),
 '$phi62.1': State(pc_initial=52 nstack_initial=2),
 '$phi64.2': State(pc_initial=62 nstack_initial=2)}
07/29/2024 05:30:16 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=2))},
             '$phi122.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.1', State(pc_initial=90 nstack_initial=2))},
             '$phi134.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi134.0',
                           State(pc_initial=134 nstack_initial=1))},
             '$phi52.0': {('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi122.1',
                           State(pc_initial=122 nstack_initial=2))},
             '$phi64.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi64.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3))},
             '$phi90.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3))}})
07/29/2024 05:30:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi122.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi134.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/29/2024 05:30:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/29/2024 05:30:16 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/29/2024 05:30:16 PM - DEBUG - apply_changes - keep phismap: {'$phi50.0': {('$48get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi52.1': {('$50for_iter.2', State(pc_initial=50 nstack_initial=1))},
 '$phi62.1': {('$60get_iter.5', State(pc_initial=52 nstack_initial=2))},
 '$phi64.2': {('$62for_iter.3', State(pc_initial=62 nstack_initial=2))}}
07/29/2024 05:30:16 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi50.0': '$48get_iter.19'},
             State(pc_initial=50 nstack_initial=1): {'$phi52.1': '$50for_iter.2'},
             State(pc_initial=52 nstack_initial=2): {'$phi62.1': '$60get_iter.5'},
             State(pc_initial=62 nstack_initial=2): {'$phi64.2': '$62for_iter.3'}})
07/29/2024 05:30:16 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$const12.4'}), (14, {'func': '$10load_global.3', 'args': ['$const12.4'], 'res': '$14call_function.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$16load_global.6', 'args': ['$const18.7'], 'res': '$20call_function.8'}), (22, {'items': ['$14call_function.5', '$20call_function.8'], 'res': '$22build_tuple.9'}), (24, {'value': '$22build_tuple.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$const28.11'}), (30, {'func': '$26load_global.10', 'args': ['$const28.11'], 'res': '$30call_function.12'}), (32, {'value': '$30call_function.12'}), (34, {'res': '$34load_global.13'}), (36, {'res': '$const36.14'}), (38, {'func': '$34load_global.13', 'args': ['$const36.14'], 'res': '$38call_function.15'}), (40, {'value': '$38call_function.15'}), (42, {'res': '$42load_global.16'}), (44, {'res': '$const44.17'}), (46, {'func': '$42load_global.16', 'args': ['$const44.17'], 'res': '$46call_function.18'}), (48, {'value': '$46call_function.18', 'res': '$48get_iter.19'})), outgoing_phis={'$phi50.0': '$48get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$48get_iter.19',)})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'iterator': '$phi50.0', 'pair': '$50for_iter.1', 'indval': '$50for_iter.2', 'pred': '$50for_iter.3'}),), outgoing_phis={'$phi52.1': '$50for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: (), 52: ('$phi50.0', '$50for_iter.2')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=52 nstack_initial=2):
AdaptBlockInfo(insts=((52, {'value': '$phi52.1'}), (54, {'res': '$54load_global.2'}), (56, {'res': '$const56.3'}), (58, {'func': '$54load_global.2', 'args': ['$const56.3'], 'res': '$58call_function.4'}), (60, {'value': '$58call_function.4', 'res': '$60get_iter.5'})), outgoing_phis={'$phi62.1': '$60get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi52.0', '$60get_iter.5')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'iterator': '$phi62.1', 'pair': '$62for_iter.2', 'indval': '$62for_iter.3', 'pred': '$62for_iter.4'}),), outgoing_phis={'$phi64.2': '$62for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ('$phi62.0',), 64: ('$phi62.0', '$phi62.1', '$62for_iter.3')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=64 nstack_initial=3):
AdaptBlockInfo(insts=((64, {'value': '$phi64.2'}), (66, {'res': '$jump66.3'}), (68, {'res': '$i68.4'}), (70, {'index': '$i68.4', 'target': '$jump66.3', 'res': '$70binary_subscr.5'}), (72, {'res': '$72load_global.6'}), (74, {'res': '$const74.7'}), (76, {'func': '$72load_global.6', 'args': ['$const74.7'], 'res': '$76call_function.8'}), (78, {'res': '$78load_global.9'}), (80, {'res': '$b80.10'}), (82, {'func': '$78load_global.9', 'args': ['$b80.10'], 'res': '$82call_function.11'}), (84, {'lhs': '$76call_function.8', 'rhs': '$82call_function.11', 'res': '$84binary_lshift.12'}), (86, {'lhs': '$70binary_subscr.5', 'rhs': '$84binary_lshift.12', 'res': '$86binary_and.13'}), (88, {'pred': '$86binary_and.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi64.0', '$phi64.1'), 122: ('$phi64.0', '$phi64.1')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=90 nstack_initial=2):
AdaptBlockInfo(insts=((90, {'res': '$s090.2'}), (92, {'res': '$states92.3'}), (94, {'res': '$index94.4'}), (96, {'index': '$index94.4', 'target': '$states92.3', 'res': '$96binary_subscr.5'}), (98, {'res': '$const98.6'}), (100, {'index': '$const98.6', 'target': '$96binary_subscr.5', 'res': '$100binary_subscr.7'}), (102, {'lhs': '$s090.2', 'rhs': '$100binary_subscr.7', 'res': '$102inplace_xor.8'}), (104, {'value': '$102inplace_xor.8'}), (106, {'res': '$s1106.9'}), (108, {'res': '$states108.10'}), (110, {'res': '$index110.11'}), (112, {'index': '$index110.11', 'target': '$states108.10', 'res': '$112binary_subscr.12'}), (114, {'res': '$const114.13'}), (116, {'index': '$const114.13', 'target': '$112binary_subscr.12', 'res': '$116binary_subscr.14'}), (118, {'lhs': '$s1106.9', 'rhs': '$116binary_subscr.14', 'res': '$118inplace_xor.15'}), (120, {'value': '$118inplace_xor.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: ('$phi90.0', '$phi90.1')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'res': '$122load_global.2'}), (124, {'res': '$states124.3'}), (126, {'res': '$index126.4'}), (128, {'func': '$122load_global.2', 'args': ['$states124.3', '$index126.4'], 'res': '$128call_function.5'}), (132, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi122.0', '$phi122.1')})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=134 nstack_initial=1):
AdaptBlockInfo(insts=((134, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi134.0',)})
07/29/2024 05:30:16 PM - DEBUG - run - block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$s0136.0'}), (138, {'res': '$states138.1'}), (140, {'res': '$index140.2'}), (142, {'index': '$index140.2', 'target': '$states138.1', 'res': '$142binary_subscr.3'}), (144, {'res': '$const144.4'}), (146, {'target': '$142binary_subscr.3', 'index': '$const144.4', 'value': '$s0136.0'}), (148, {'res': '$s1148.5'}), (150, {'res': '$states150.6'}), (152, {'res': '$index152.7'}), (154, {'index': '$index152.7', 'target': '$states150.6', 'res': '$154binary_subscr.8'}), (156, {'res': '$const156.9'}), (158, {'target': '$154binary_subscr.8', 'index': '$const156.9', 'value': '$s1148.5'}), (160, {'res': '$const160.10'}), (162, {'retval': '$const160.10', 'castval': '$162return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:16 PM - DEBUG - interpret - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $10load_global.3 = global(uint64: uint64) ['$10load_global.3']
    $const12.4 = const(int, 13739361407582206667) ['$const12.4']
    $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', '$const12.4']
    $16load_global.6 = global(uint64: uint64) ['$16load_global.6']
    $const18.7 = const(int, 15594563132006766882) ['$const18.7']
    $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.6', '$20call_function.8', '$const18.7']
    jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)]) ['$14call_function.5', '$20call_function.8', 'jump']
    $26load_global.10 = global(uint64: uint64) ['$26load_global.10']
    $const28.11 = const(int, 0)              ['$const28.11']
    s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.10', '$const28.11', 's0']
    $34load_global.13 = global(uint64: uint64) ['$34load_global.13']
    $const36.14 = const(int, 0)              ['$const36.14']
    s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.13', '$const36.14', 's1']
    $42load_global.16 = global(range: <class 'range'>) ['$42load_global.16']
    $const44.17 = const(int, 2)              ['$const44.17']
    $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.16', '$46call_function.18', '$const44.17']
    $48get_iter.19 = getiter(value=$46call_function.18) ['$46call_function.18', '$48get_iter.19']
    $phi50.0 = $48get_iter.19                ['$48get_iter.19', '$phi50.0']
    jump 50                                  []
label 50:
    $50for_iter.1 = iternext(value=$phi50.0) ['$50for_iter.1', '$phi50.0']
    $50for_iter.2 = pair_first(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.2']
    $50for_iter.3 = pair_second(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.3']
    $phi52.1 = $50for_iter.2                 ['$50for_iter.2', '$phi52.1']
    branch $50for_iter.3, 52, 136            ['$50for_iter.3']
label 52:
    i = $phi52.1                             ['$phi52.1', 'i']
    $54load_global.2 = global(range: <class 'range'>) ['$54load_global.2']
    $const56.3 = const(int, 64)              ['$const56.3']
    $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$54load_global.2', '$58call_function.4', '$const56.3']
    $60get_iter.5 = getiter(value=$58call_function.4) ['$58call_function.4', '$60get_iter.5']
    $phi62.1 = $60get_iter.5                 ['$60get_iter.5', '$phi62.1']
    jump 62                                  []
label 62:
    $62for_iter.2 = iternext(value=$phi62.1) ['$62for_iter.2', '$phi62.1']
    $62for_iter.3 = pair_first(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.3']
    $62for_iter.4 = pair_second(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.4']
    $phi64.2 = $62for_iter.3                 ['$62for_iter.3', '$phi64.2']
    branch $62for_iter.4, 64, 134            ['$62for_iter.4']
label 64:
    b = $phi64.2                             ['$phi64.2', 'b']
    $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>) ['$70binary_subscr.5', 'i', 'jump']
    $72load_global.6 = global(uint64: uint64) ['$72load_global.6']
    $const74.7 = const(int, 1)               ['$const74.7']
    $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.6', '$76call_function.8', '$const74.7']
    $78load_global.9 = global(uint32: uint32) ['$78load_global.9']
    $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$78load_global.9', '$82call_function.11', 'b']
    $84binary_lshift.12 = $76call_function.8 << $82call_function.11 ['$76call_function.8', '$82call_function.11', '$84binary_lshift.12']
    $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12 ['$70binary_subscr.5', '$84binary_lshift.12', '$86binary_and.13']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None) ['$86binary_and.13', '$88pred', 'bool88']
    branch $88pred, 90, 122                  ['$88pred']
label 90:
    $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$96binary_subscr.5', 'index.1', 'states']
    $const98.6 = const(str, s0)              ['$const98.6']
    $100binary_subscr.7 = getitem(value=$96binary_subscr.5, index=$const98.6, fn=<built-in function getitem>) ['$100binary_subscr.7', '$96binary_subscr.5', '$const98.6']
    $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined) ['$100binary_subscr.7', '$102inplace_xor.8', 's0']
    s0 = $102inplace_xor.8                   ['$102inplace_xor.8', 's0']
    $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.12', 'index.1', 'states']
    $const114.13 = const(str, s1)            ['$const114.13']
    $116binary_subscr.14 = getitem(value=$112binary_subscr.12, index=$const114.13, fn=<built-in function getitem>) ['$112binary_subscr.12', '$116binary_subscr.14', '$const114.13']
    $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined) ['$116binary_subscr.14', '$118inplace_xor.15', 's1']
    s1 = $118inplace_xor.15                  ['$118inplace_xor.15', 's1']
    jump 122                                 []
label 122:
    $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>)) ['$122load_global.2']
    $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.2', '$128call_function.5', 'index.1', 'states']
    jump 62                                  []
label 134:
    jump 50                                  []
label 136:
    $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$142binary_subscr.3', 'index.1', 'states']
    $const144.4 = const(str, s0)             ['$const144.4']
    $142binary_subscr.3[$const144.4] = s0    ['$142binary_subscr.3', '$const144.4', 's0']
    $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$154binary_subscr.8', 'index.1', 'states']
    $const156.9 = const(str, s1)             ['$const156.9']
    $154binary_subscr.8[$const156.9] = s1    ['$154binary_subscr.8', '$const156.9', 's1']
    $const160.10 = const(NoneType, None)     ['$const160.10']
    $162return_value.11 = cast(value=$const160.10) ['$162return_value.11', '$const160.10']
    return $162return_value.11               ['$162return_value.11']

07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 52
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 62
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 64
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 90
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 122
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 134
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 136
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:17 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$100binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001D62C988430>,
                                      90)],
             '$102inplace_xor.8': [(<numba.core.ir.Assign object at 0x000001D62C97D940>,
                                    90)],
             '$10load_global.3': [(<numba.core.ir.Assign object at 0x000001D62C967BB0>,
                                   0)],
             '$112binary_subscr.12': [(<numba.core.ir.Assign object at 0x000001D62C97DEE0>,
                                       90)],
             '$116binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001D62C9884F0>,
                                       90)],
             '$118inplace_xor.15': [(<numba.core.ir.Assign object at 0x000001D62C97E3A0>,
                                     90)],
             '$122load_global.2': [(<numba.core.ir.Assign object at 0x000001D62C978C70>,
                                    122)],
             '$128call_function.5': [(<numba.core.ir.Assign object at 0x000001D62C97E8B0>,
                                      122)],
             '$142binary_subscr.3': [(<numba.core.ir.Assign object at 0x000001D62C97EFA0>,
                                      136)],
             '$14call_function.5': [(<numba.core.ir.Assign object at 0x000001D62C967F10>,
                                     0)],
             '$154binary_subscr.8': [(<numba.core.ir.Assign object at 0x000001D62C981700>,
                                      136)],
             '$162return_value.11': [(<numba.core.ir.Assign object at 0x000001D62C981C10>,
                                      136)],
             '$16load_global.6': [(<numba.core.ir.Assign object at 0x000001D62C970070>,
                                   0)],
             '$20call_function.8': [(<numba.core.ir.Assign object at 0x000001D62C9703D0>,
                                     0)],
             '$26load_global.10': [(<numba.core.ir.Assign object at 0x000001D62C970790>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001D62C967610>,
                                  0)],
             '$34load_global.13': [(<numba.core.ir.Assign object at 0x000001D62C970D30>,
                                    0)],
             '$42load_global.16': [(<numba.core.ir.Assign object at 0x000001D62C977310>,
                                    0)],
             '$46call_function.18': [(<numba.core.ir.Assign object at 0x000001D62C977670>,
                                      0)],
             '$48get_iter.19': [(<numba.core.ir.Assign object at 0x000001D62C977790>,
                                 0)],
             '$50for_iter.1': [(<numba.core.ir.Assign object at 0x000001D62C977940>,
                                50)],
             '$50for_iter.2': [(<numba.core.ir.Assign object at 0x000001D62C977A60>,
                                50)],
             '$50for_iter.3': [(<numba.core.ir.Assign object at 0x000001D62C977B80>,
                                50)],
             '$54load_global.2': [(<numba.core.ir.Assign object at 0x000001D62C977FD0>,
                                   52)],
             '$58call_function.4': [(<numba.core.ir.Assign object at 0x000001D62C978370>,
                                     52)],
             '$60get_iter.5': [(<numba.core.ir.Assign object at 0x000001D62C978490>,
                                52)],
             '$62for_iter.2': [(<numba.core.ir.Assign object at 0x000001D62C978820>,
                                62)],
             '$62for_iter.3': [(<numba.core.ir.Assign object at 0x000001D62C978940>,
                                62)],
             '$62for_iter.4': [(<numba.core.ir.Assign object at 0x000001D62C978A60>,
                                62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001D62C97A160>,
                                     64)],
             '$72load_global.6': [(<numba.core.ir.Assign object at 0x000001D62C97A2B0>,
                                   64)],
             '$76call_function.8': [(<numba.core.ir.Assign object at 0x000001D62C97A610>,
                                     64)],
             '$78load_global.9': [(<numba.core.ir.Assign object at 0x000001D62C97A730>,
                                   64)],
             '$82call_function.11': [(<numba.core.ir.Assign object at 0x000001D62C97AA30>,
                                      64)],
             '$84binary_lshift.12': [(<numba.core.ir.Assign object at 0x000001D62C97AB80>,
                                      64)],
             '$86binary_and.13': [(<numba.core.ir.Assign object at 0x000001D62C97AD00>,
                                   64)],
             '$88pred': [(<numba.core.ir.Assign object at 0x000001D62C97AF70>,
                          64)],
             '$96binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001D62C97D4C0>,
                                     90)],
             '$const114.13': [(<numba.core.ir.Assign object at 0x000001D62C97E070>,
                               90)],
             '$const12.4': [(<numba.core.ir.Assign object at 0x000001D62C967D30>,
                             0)],
             '$const144.4': [(<numba.core.ir.Assign object at 0x000001D62C981130>,
                              136)],
             '$const156.9': [(<numba.core.ir.Assign object at 0x000001D62C981850>,
                              136)],
             '$const160.10': [(<numba.core.ir.Assign object at 0x000001D62C981A90>,
                               136)],
             '$const18.7': [(<numba.core.ir.Assign object at 0x000001D62C9701F0>,
                             0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001D62C970910>,
                              0)],
             '$const36.14': [(<numba.core.ir.Assign object at 0x000001D62C970EB0>,
                              0)],
             '$const44.17': [(<numba.core.ir.Assign object at 0x000001D62C977490>,
                              0)],
             '$const56.3': [(<numba.core.ir.Assign object at 0x000001D62C978190>,
                             52)],
             '$const74.7': [(<numba.core.ir.Assign object at 0x000001D62C97A430>,
                             64)],
             '$const98.6': [(<numba.core.ir.Assign object at 0x000001D62C97D610>,
                             90)],
             '$phi50.0': [(<numba.core.ir.Assign object at 0x000001D62C9672B0>,
                           0)],
             '$phi52.1': [(<numba.core.ir.Assign object at 0x000001D62C977880>,
                           50)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x000001D62C9784F0>,
                           52)],
             '$phi64.2': [(<numba.core.ir.Assign object at 0x000001D62C978760>,
                           62)],
             'b': [(<numba.core.ir.Assign object at 0x000001D62C978D30>, 64)],
             'bool88': [(<numba.core.ir.Assign object at 0x000001D62C97AE50>,
                         64)],
             'i': [(<numba.core.ir.Assign object at 0x000001D62C977E50>, 52)],
             'index': [(<numba.core.ir.Assign object at 0x000001D62C967940>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001D62C967970>,
                          0)],
             'jump': [(<numba.core.ir.Assign object at 0x000001D62C970520>, 0)],
             's0': [(<numba.core.ir.Assign object at 0x000001D62C970AF0>, 0),
                    (<numba.core.ir.Assign object at 0x000001D62C97DA00>, 90)],
             's1': [(<numba.core.ir.Assign object at 0x000001D62C9770D0>, 0),
                    (<numba.core.ir.Assign object at 0x000001D62C97E460>, 90)],
             'states': [(<numba.core.ir.Assign object at 0x000001D62C94F790>,
                         0)]})
07/29/2024 05:30:17 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D62C8B88B0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa - Fix SSA violator on var s0
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - on_assign - first assign: s0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: s0.1 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D62C988FD0>],
             90: [<numba.core.ir.Assign object at 0x000001D62C988970>]})
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _find_def - find_def var='s0' stmt=$102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 90
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 64 from label 90
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - insert phi node s0.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 122
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 122
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - insert phi node s0.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s0.2 = phi(incoming_values=[], incoming_blocks=[])
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 90
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s0.1 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 52
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 52
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 50 from label 52
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 50
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - insert phi node s0.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 0
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 134
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 134
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 62 from label 134
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s0.2 = phi(incoming_values=[Var(s0.3, random.py:121)], incoming_blocks=[122])
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.1 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C8AFDF0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0
07/29/2024 05:30:17 PM - DEBUG - _find_def - find_def var='s0' stmt=$142binary_subscr.3['s0'] = s0
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 136
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 50 from label 136
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: $142binary_subscr.3['s0'] = s0.4
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa - Fix SSA violator on var s1
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - on_assign - first assign: s1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.1 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: s1.1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62C8AFEB0>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0.4
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D62C988BB0>],
             90: [<numba.core.ir.Assign object at 0x000001D62C9881C0>]})
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.1 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _find_def - find_def var='s1' stmt=$118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 90
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 64 from label 90
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - insert phi node s1.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 122
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 122
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - insert phi node s1.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s1.2 = phi(incoming_values=[], incoming_blocks=[])
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 90
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s1.1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s1.3 = phi(incoming_values=[Var(s1.2, random.py:121), Var(s1.1, random.py:122)], incoming_blocks=[64, 90])
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 52
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 52
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 50 from label 52
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 50
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - insert phi node s1.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 0
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 134
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 134
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 62 from label 134
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s1.2 = phi(incoming_values=[Var(s1.3, random.py:121)], incoming_blocks=[122])
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - incoming_def s1.4 = phi(incoming_values=[Var(s1, random.py:116), Var(s1.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1.2, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1.1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62C988250>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0.4
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:17 PM - DEBUG - _find_def - find_def var='s1' stmt=$154binary_subscr.8['s1'] = s1
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - find_def_from_top label 136
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_top - idom 50 from label 136
07/29/2024 05:30:17 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - replaced with: $154binary_subscr.8['s1'] = s1.4
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:17 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=80)
           2	LOAD_GLOBAL(arg=0, lineno=90)
           4	LOAD_FAST(arg=1, lineno=90)
           6	CALL_FUNCTION(arg=1, lineno=90)
           8	STORE_FAST(arg=1, lineno=90)
          10	LOAD_FAST(arg=0, lineno=91)
          12	LOAD_FAST(arg=1, lineno=91)
          14	BINARY_SUBSCR(arg=None, lineno=91)
          16	LOAD_CONST(arg=1, lineno=91)
          18	BINARY_SUBSCR(arg=None, lineno=91)
          20	STORE_FAST(arg=2, lineno=91)
          22	LOAD_FAST(arg=0, lineno=92)
          24	LOAD_FAST(arg=1, lineno=92)
          26	BINARY_SUBSCR(arg=None, lineno=92)
          28	LOAD_CONST(arg=2, lineno=92)
          30	BINARY_SUBSCR(arg=None, lineno=92)
          32	STORE_FAST(arg=3, lineno=92)
          34	LOAD_FAST(arg=2, lineno=93)
          36	LOAD_FAST(arg=3, lineno=93)
          38	BINARY_ADD(arg=None, lineno=93)
          40	STORE_FAST(arg=4, lineno=93)
          42	LOAD_FAST(arg=3, lineno=95)
          44	LOAD_FAST(arg=2, lineno=95)
          46	INPLACE_XOR(arg=None, lineno=95)
          48	STORE_FAST(arg=3, lineno=95)
          50	LOAD_GLOBAL(arg=1, lineno=96)
          52	LOAD_GLOBAL(arg=2, lineno=96)
          54	LOAD_FAST(arg=2, lineno=96)
          56	LOAD_GLOBAL(arg=3, lineno=96)
          58	LOAD_CONST(arg=3, lineno=96)
          60	CALL_FUNCTION(arg=1, lineno=96)
          62	CALL_FUNCTION(arg=2, lineno=96)
          64	CALL_FUNCTION(arg=1, lineno=96)
          66	LOAD_FAST(arg=3, lineno=96)
          68	BINARY_XOR(arg=None, lineno=96)
          70	LOAD_FAST(arg=3, lineno=96)
          72	LOAD_GLOBAL(arg=3, lineno=96)
          74	LOAD_CONST(arg=4, lineno=96)
          76	CALL_FUNCTION(arg=1, lineno=96)
          78	BINARY_LSHIFT(arg=None, lineno=96)
          80	BINARY_XOR(arg=None, lineno=96)
          82	LOAD_FAST(arg=0, lineno=96)
          84	LOAD_FAST(arg=1, lineno=96)
          86	BINARY_SUBSCR(arg=None, lineno=96)
          88	LOAD_CONST(arg=1, lineno=96)
          90	STORE_SUBSCR(arg=None, lineno=96)
          92	LOAD_GLOBAL(arg=1, lineno=97)
          94	LOAD_GLOBAL(arg=2, lineno=97)
          96	LOAD_FAST(arg=3, lineno=97)
          98	LOAD_GLOBAL(arg=3, lineno=97)
         100	LOAD_CONST(arg=5, lineno=97)
         102	CALL_FUNCTION(arg=1, lineno=97)
         104	CALL_FUNCTION(arg=2, lineno=97)
         106	CALL_FUNCTION(arg=1, lineno=97)
         108	LOAD_FAST(arg=0, lineno=97)
         110	LOAD_FAST(arg=1, lineno=97)
         112	BINARY_SUBSCR(arg=None, lineno=97)
         114	LOAD_CONST(arg=2, lineno=97)
         116	STORE_SUBSCR(arg=None, lineno=97)
         118	LOAD_FAST(arg=4, lineno=99)
         120	RETURN_VALUE(arg=None, lineno=99)
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: []
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=80)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=90)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=90)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=90)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$index4.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=90)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$6call_function.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=91)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=91)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$states10.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=91)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$states10.3', '$index12.4']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=91)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$14binary_subscr.5']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=91)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$14binary_subscr.5', '$const16.6']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=20, inst=STORE_FAST(arg=2, lineno=91)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$18binary_subscr.7']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=92)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=92)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$states22.8']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=92)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$states22.8', '$index24.9']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=92)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$26binary_subscr.10']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=92)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$26binary_subscr.10', '$const28.11']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=32, inst=STORE_FAST(arg=3, lineno=92)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$30binary_subscr.12']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=93)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=93)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s034.13']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=38, inst=BINARY_ADD(arg=None, lineno=93)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s034.13', '$s136.14']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=40, inst=STORE_FAST(arg=4, lineno=93)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$38binary_add.15']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=95)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=95)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s142.16']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=46, inst=INPLACE_XOR(arg=None, lineno=95)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s142.16', '$s044.17']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=48, inst=STORE_FAST(arg=3, lineno=95)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$46inplace_xor.18']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=50, inst=LOAD_GLOBAL(arg=1, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$50load_global.19']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$50load_global.19', '$52load_global.20']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$50load_global.19', '$52load_global.20', '$s054.21']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=58, inst=LOAD_CONST(arg=3, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$50load_global.19', '$52load_global.20', '$s054.21', '$56load_global.22']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$50load_global.19', '$52load_global.20', '$s054.21', '$56load_global.22', '$const58.23']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=62, inst=CALL_FUNCTION(arg=2, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$50load_global.19', '$52load_global.20', '$s054.21', '$60call_function.24']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=64, inst=CALL_FUNCTION(arg=1, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$50load_global.19', '$62call_function.25']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$64call_function.26']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=68, inst=BINARY_XOR(arg=None, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$64call_function.26', '$s166.27']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$68binary_xor.28']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=72, inst=LOAD_GLOBAL(arg=3, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$68binary_xor.28', '$s170.29']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=74, inst=LOAD_CONST(arg=4, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$68binary_xor.28', '$s170.29', '$72load_global.30']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$68binary_xor.28', '$s170.29', '$72load_global.30', '$const74.31']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=78, inst=BINARY_LSHIFT(arg=None, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$68binary_xor.28', '$s170.29', '$76call_function.32']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=80, inst=BINARY_XOR(arg=None, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$68binary_xor.28', '$78binary_lshift.33']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=82, inst=LOAD_FAST(arg=0, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$80binary_xor.34']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$80binary_xor.34', '$states82.35']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$80binary_xor.34', '$states82.35', '$index84.36']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=88, inst=LOAD_CONST(arg=1, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$80binary_xor.34', '$86binary_subscr.37']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=90, inst=STORE_SUBSCR(arg=None, lineno=96)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$80binary_xor.34', '$86binary_subscr.37', '$const88.38']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=92, inst=LOAD_GLOBAL(arg=1, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=94, inst=LOAD_GLOBAL(arg=2, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$92load_global.39']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$92load_global.39', '$94load_global.40']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=98, inst=LOAD_GLOBAL(arg=3, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$92load_global.39', '$94load_global.40', '$s196.41']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=100, inst=LOAD_CONST(arg=5, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$92load_global.39', '$94load_global.40', '$s196.41', '$98load_global.42']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=102, inst=CALL_FUNCTION(arg=1, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$92load_global.39', '$94load_global.40', '$s196.41', '$98load_global.42', '$const100.43']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=104, inst=CALL_FUNCTION(arg=2, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$92load_global.39', '$94load_global.40', '$s196.41', '$102call_function.44']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=106, inst=CALL_FUNCTION(arg=1, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$92load_global.39', '$104call_function.45']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$106call_function.46']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$106call_function.46', '$states108.47']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$106call_function.46', '$states108.47', '$index110.48']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$106call_function.46', '$112binary_subscr.49']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=116, inst=STORE_SUBSCR(arg=None, lineno=97)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$106call_function.46', '$112binary_subscr.49', '$const114.50']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=99)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=99)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$result118.51']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/29/2024 05:30:17 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 05:30:17 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:17 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 05:30:17 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$states10.3'}), (12, {'res': '$index12.4'}), (14, {'index': '$index12.4', 'target': '$states10.3', 'res': '$14binary_subscr.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$14binary_subscr.5', 'res': '$18binary_subscr.7'}), (20, {'value': '$18binary_subscr.7'}), (22, {'res': '$states22.8'}), (24, {'res': '$index24.9'}), (26, {'index': '$index24.9', 'target': '$states22.8', 'res': '$26binary_subscr.10'}), (28, {'res': '$const28.11'}), (30, {'index': '$const28.11', 'target': '$26binary_subscr.10', 'res': '$30binary_subscr.12'}), (32, {'value': '$30binary_subscr.12'}), (34, {'res': '$s034.13'}), (36, {'res': '$s136.14'}), (38, {'lhs': '$s034.13', 'rhs': '$s136.14', 'res': '$38binary_add.15'}), (40, {'value': '$38binary_add.15'}), (42, {'res': '$s142.16'}), (44, {'res': '$s044.17'}), (46, {'lhs': '$s142.16', 'rhs': '$s044.17', 'res': '$46inplace_xor.18'}), (48, {'value': '$46inplace_xor.18'}), (50, {'res': '$50load_global.19'}), (52, {'res': '$52load_global.20'}), (54, {'res': '$s054.21'}), (56, {'res': '$56load_global.22'}), (58, {'res': '$const58.23'}), (60, {'func': '$56load_global.22', 'args': ['$const58.23'], 'res': '$60call_function.24'}), (62, {'func': '$52load_global.20', 'args': ['$s054.21', '$60call_function.24'], 'res': '$62call_function.25'}), (64, {'func': '$50load_global.19', 'args': ['$62call_function.25'], 'res': '$64call_function.26'}), (66, {'res': '$s166.27'}), (68, {'lhs': '$64call_function.26', 'rhs': '$s166.27', 'res': '$68binary_xor.28'}), (70, {'res': '$s170.29'}), (72, {'res': '$72load_global.30'}), (74, {'res': '$const74.31'}), (76, {'func': '$72load_global.30', 'args': ['$const74.31'], 'res': '$76call_function.32'}), (78, {'lhs': '$s170.29', 'rhs': '$76call_function.32', 'res': '$78binary_lshift.33'}), (80, {'lhs': '$68binary_xor.28', 'rhs': '$78binary_lshift.33', 'res': '$80binary_xor.34'}), (82, {'res': '$states82.35'}), (84, {'res': '$index84.36'}), (86, {'index': '$index84.36', 'target': '$states82.35', 'res': '$86binary_subscr.37'}), (88, {'res': '$const88.38'}), (90, {'target': '$86binary_subscr.37', 'index': '$const88.38', 'value': '$80binary_xor.34'}), (92, {'res': '$92load_global.39'}), (94, {'res': '$94load_global.40'}), (96, {'res': '$s196.41'}), (98, {'res': '$98load_global.42'}), (100, {'res': '$const100.43'}), (102, {'func': '$98load_global.42', 'args': ['$const100.43'], 'res': '$102call_function.44'}), (104, {'func': '$94load_global.40', 'args': ['$s196.41', '$102call_function.44'], 'res': '$104call_function.45'}), (106, {'func': '$92load_global.39', 'args': ['$104call_function.45'], 'res': '$106call_function.46'}), (108, {'res': '$states108.47'}), (110, {'res': '$index110.48'}), (112, {'index': '$index110.48', 'target': '$states108.47', 'res': '$112binary_subscr.49'}), (114, {'res': '$const114.50'}), (116, {'target': '$112binary_subscr.49', 'index': '$const114.50', 'value': '$106call_function.46'}), (118, {'res': '$result118.51'}), (120, {'retval': '$result118.51', 'castval': '$120return_value.52'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:17 PM - DEBUG - interpret - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $14binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$14binary_subscr.5', 'index.1', 'states']
    $const16.6 = const(str, s0)              ['$const16.6']
    s0 = getitem(value=$14binary_subscr.5, index=$const16.6, fn=<built-in function getitem>) ['$14binary_subscr.5', '$const16.6', 's0']
    $26binary_subscr.10 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$26binary_subscr.10', 'index.1', 'states']
    $const28.11 = const(str, s1)             ['$const28.11']
    s1 = getitem(value=$26binary_subscr.10, index=$const28.11, fn=<built-in function getitem>) ['$26binary_subscr.10', '$const28.11', 's1']
    result = s0 + s1                         ['result', 's0', 's1']
    s1.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=s0, static_lhs=Undefined, static_rhs=Undefined) ['s0', 's1', 's1.1']
    $50load_global.19 = global(uint64: uint64) ['$50load_global.19']
    $52load_global.20 = global(rotl: CPUDispatcher(<function rotl at 0x000001D5BA722D30>)) ['$52load_global.20']
    $56load_global.22 = global(uint32: uint32) ['$56load_global.22']
    $const58.23 = const(int, 55)             ['$const58.23']
    $60call_function.24 = call $56load_global.22($const58.23, func=$56load_global.22, args=[Var($const58.23, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_global.22', '$60call_function.24', '$const58.23']
    $62call_function.25 = call $52load_global.20(s0, $60call_function.24, func=$52load_global.20, args=[Var(s0, random.py:91), Var($60call_function.24, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.20', '$60call_function.24', '$62call_function.25', 's0']
    $64call_function.26 = call $50load_global.19($62call_function.25, func=$50load_global.19, args=[Var($62call_function.25, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.19', '$62call_function.25', '$64call_function.26']
    $68binary_xor.28 = $64call_function.26 ^ s1.1 ['$64call_function.26', '$68binary_xor.28', 's1.1']
    $72load_global.30 = global(uint32: uint32) ['$72load_global.30']
    $const74.31 = const(int, 14)             ['$const74.31']
    $76call_function.32 = call $72load_global.30($const74.31, func=$72load_global.30, args=[Var($const74.31, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.30', '$76call_function.32', '$const74.31']
    $78binary_lshift.33 = s1.1 << $76call_function.32 ['$76call_function.32', '$78binary_lshift.33', 's1.1']
    $80binary_xor.34 = $68binary_xor.28 ^ $78binary_lshift.33 ['$68binary_xor.28', '$78binary_lshift.33', '$80binary_xor.34']
    $86binary_subscr.37 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$86binary_subscr.37', 'index.1', 'states']
    $const88.38 = const(str, s0)             ['$const88.38']
    $86binary_subscr.37[$const88.38] = $80binary_xor.34 ['$80binary_xor.34', '$86binary_subscr.37', '$const88.38']
    $92load_global.39 = global(uint64: uint64) ['$92load_global.39']
    $94load_global.40 = global(rotl: CPUDispatcher(<function rotl at 0x000001D5BA722D30>)) ['$94load_global.40']
    $98load_global.42 = global(uint32: uint32) ['$98load_global.42']
    $const100.43 = const(int, 36)            ['$const100.43']
    $102call_function.44 = call $98load_global.42($const100.43, func=$98load_global.42, args=[Var($const100.43, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call_function.44', '$98load_global.42', '$const100.43']
    $104call_function.45 = call $94load_global.40(s1.1, $102call_function.44, func=$94load_global.40, args=[Var(s1.1, random.py:95), Var($102call_function.44, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call_function.44', '$104call_function.45', '$94load_global.40', 's1.1']
    $106call_function.46 = call $92load_global.39($104call_function.45, func=$92load_global.39, args=[Var($104call_function.45, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None) ['$104call_function.45', '$106call_function.46', '$92load_global.39']
    $112binary_subscr.49 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.49', 'index.1', 'states']
    $const114.50 = const(str, s1)            ['$const114.50']
    $112binary_subscr.49[$const114.50] = $106call_function.46 ['$106call_function.46', '$112binary_subscr.49', '$const114.50']
    $120return_value.52 = cast(value=result) ['$120return_value.52', 'result']
    return $120return_value.52               ['$120return_value.52']

07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C98AC70>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const16.6 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = static_getitem(value=$14binary_subscr.5, index=s0, index_var=$const16.6, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26binary_subscr.10 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = static_getitem(value=$26binary_subscr.10, index=s1, index_var=$const28.11, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: result = s0 + s1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=s0, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50load_global.19 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $52load_global.20 = global(rotl: CPUDispatcher(<function rotl at 0x000001D5BA722D30>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $56load_global.22 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const58.23 = const(int, 55)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $60call_function.24 = call $56load_global.22($const58.23, func=$56load_global.22, args=[Var($const58.23, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62call_function.25 = call $52load_global.20(s0, $60call_function.24, func=$52load_global.20, args=[Var(s0, random.py:91), Var($60call_function.24, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $64call_function.26 = call $50load_global.19($62call_function.25, func=$50load_global.19, args=[Var($62call_function.25, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $68binary_xor.28 = $64call_function.26 ^ s1.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.30 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.31 = const(int, 14)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.32 = call $72load_global.30($const74.31, func=$72load_global.30, args=[Var($const74.31, random.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $78binary_lshift.33 = s1.1 << $76call_function.32
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $80binary_xor.34 = $68binary_xor.28 ^ $78binary_lshift.33
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_subscr.37 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const88.38 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_subscr.37['s0'] = $80binary_xor.34
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $92load_global.39 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $94load_global.40 = global(rotl: CPUDispatcher(<function rotl at 0x000001D5BA722D30>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $98load_global.42 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const100.43 = const(int, 36)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $102call_function.44 = call $98load_global.42($const100.43, func=$98load_global.42, args=[Var($const100.43, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $104call_function.45 = call $94load_global.40(s1.1, $102call_function.44, func=$94load_global.40, args=[Var(s1.1, random.py:95), Var($102call_function.44, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $106call_function.46 = call $92load_global.39($104call_function.45, func=$92load_global.39, args=[Var($104call_function.45, random.py:97)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.49 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.50 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.49['s1'] = $106call_function.46
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $120return_value.52 = cast(value=result)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $120return_value.52
07/29/2024 05:30:17 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$102call_function.44': [(<numba.core.ir.Assign object at 0x000001D62C9B0A00>,
                                       0)],
             '$104call_function.45': [(<numba.core.ir.Assign object at 0x000001D62C9B0B80>,
                                       0)],
             '$106call_function.46': [(<numba.core.ir.Assign object at 0x000001D62C9B0D00>,
                                       0)],
             '$112binary_subscr.49': [(<numba.core.ir.Assign object at 0x000001D62C9AF0D0>,
                                       0)],
             '$120return_value.52': [(<numba.core.ir.Assign object at 0x000001D62C9AF580>,
                                      0)],
             '$14binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001D62C9A1610>,
                                     0)],
             '$26binary_subscr.10': [(<numba.core.ir.Assign object at 0x000001D62C9A77C0>,
                                      0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001D62C9A75B0>,
                                  0)],
             '$50load_global.19': [(<numba.core.ir.Assign object at 0x000001D62C9AC520>,
                                    0)],
             '$52load_global.20': [(<numba.core.ir.Assign object at 0x000001D62C9AC6A0>,
                                    0)],
             '$56load_global.22': [(<numba.core.ir.Assign object at 0x000001D62C9AC940>,
                                    0)],
             '$60call_function.24': [(<numba.core.ir.Assign object at 0x000001D62C9ACCA0>,
                                      0)],
             '$62call_function.25': [(<numba.core.ir.Assign object at 0x000001D62C9ACE20>,
                                      0)],
             '$64call_function.26': [(<numba.core.ir.Assign object at 0x000001D62C9ACFA0>,
                                      0)],
             '$68binary_xor.28': [(<numba.core.ir.Assign object at 0x000001D62C9AE250>,
                                   0)],
             '$72load_global.30': [(<numba.core.ir.Assign object at 0x000001D62C9AE4C0>,
                                    0)],
             '$76call_function.32': [(<numba.core.ir.Assign object at 0x000001D62C9AE820>,
                                      0)],
             '$78binary_lshift.33': [(<numba.core.ir.Assign object at 0x000001D62C9AE970>,
                                      0)],
             '$80binary_xor.34': [(<numba.core.ir.Assign object at 0x000001D62C9AEAF0>,
                                   0)],
             '$86binary_subscr.37': [(<numba.core.ir.Assign object at 0x000001D62C9AEEB0>,
                                      0)],
             '$92load_global.39': [(<numba.core.ir.Assign object at 0x000001D62C9B0280>,
                                    0)],
             '$94load_global.40': [(<numba.core.ir.Assign object at 0x000001D62C9B0400>,
                                    0)],
             '$98load_global.42': [(<numba.core.ir.Assign object at 0x000001D62C9B06A0>,
                                    0)],
             '$const100.43': [(<numba.core.ir.Assign object at 0x000001D62C9B0820>,
                               0)],
             '$const114.50': [(<numba.core.ir.Assign object at 0x000001D62C9AF220>,
                               0)],
             '$const16.6': [(<numba.core.ir.Assign object at 0x000001D62C99AFD0>,
                             0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001D62C9A7190>,
                              0)],
             '$const58.23': [(<numba.core.ir.Assign object at 0x000001D62C9ACAC0>,
                              0)],
             '$const74.31': [(<numba.core.ir.Assign object at 0x000001D62C9AE640>,
                              0)],
             '$const88.38': [(<numba.core.ir.Assign object at 0x000001D62C9B0040>,
                              0)],
             'index': [(<numba.core.ir.Assign object at 0x000001D62C9A7430>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001D62C9A1FA0>,
                          0)],
             'result': [(<numba.core.ir.Assign object at 0x000001D62C9A7D90>,
                         0)],
             's0': [(<numba.core.ir.Assign object at 0x000001D62C9AFD60>, 0)],
             's1': [(<numba.core.ir.Assign object at 0x000001D62C9AFE80>, 0)],
             's1.1': [(<numba.core.ir.Assign object at 0x000001D62C9AC2B0>, 0)],
             'states': [(<numba.core.ir.Assign object at 0x000001D62C9A7310>,
                         0)]})
07/29/2024 05:30:17 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D62C9AC070>
07/29/2024 05:30:17 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	LOAD_GLOBAL(arg=0, lineno=75)
           4	LOAD_FAST(arg=0, lineno=75)
           6	CALL_FUNCTION(arg=1, lineno=75)
           8	STORE_FAST(arg=0, lineno=75)
          10	LOAD_GLOBAL(arg=1, lineno=76)
          12	LOAD_FAST(arg=1, lineno=76)
          14	CALL_FUNCTION(arg=1, lineno=76)
          16	STORE_FAST(arg=1, lineno=76)
          18	LOAD_FAST(arg=0, lineno=77)
          20	LOAD_FAST(arg=1, lineno=77)
          22	BINARY_LSHIFT(arg=None, lineno=77)
          24	LOAD_FAST(arg=0, lineno=77)
          26	LOAD_GLOBAL(arg=1, lineno=77)
          28	LOAD_CONST(arg=1, lineno=77)
          30	LOAD_FAST(arg=1, lineno=77)
          32	BINARY_SUBTRACT(arg=None, lineno=77)
          34	CALL_FUNCTION(arg=1, lineno=77)
          36	BINARY_RSHIFT(arg=None, lineno=77)
          38	BINARY_OR(arg=None, lineno=77)
          40	RETURN_VALUE(arg=None, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: []
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=72)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=75)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=75)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=75)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$x4.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=8, inst=STORE_FAST(arg=0, lineno=75)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$6call_function.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=76)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=76)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$10load_global.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=76)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$10load_global.3', '$k12.4']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=16, inst=STORE_FAST(arg=1, lineno=76)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$14call_function.5']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$x18.6']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=22, inst=BINARY_LSHIFT(arg=None, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$x18.6', '$k20.7']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8', '$x24.9']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10', '$const28.11']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=32, inst=BINARY_SUBTRACT(arg=None, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10', '$const28.11', '$k30.12']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8', '$x24.9', '$26load_global.10', '$32binary_subtract.13']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=36, inst=BINARY_RSHIFT(arg=None, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8', '$x24.9', '$34call_function.14']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=38, inst=BINARY_OR(arg=None, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22binary_lshift.8', '$36binary_rshift.15']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=77)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$38binary_or.16']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
07/29/2024 05:30:17 PM - DEBUG - find_use_defs - defmap: {}
07/29/2024 05:30:17 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>, {})
07/29/2024 05:30:17 PM - DEBUG - apply_changes - keep phismap: {}
07/29/2024 05:30:17 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>, {})
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$k12.4'}), (14, {'func': '$10load_global.3', 'args': ['$k12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$x18.6'}), (20, {'res': '$k20.7'}), (22, {'lhs': '$x18.6', 'rhs': '$k20.7', 'res': '$22binary_lshift.8'}), (24, {'res': '$x24.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$k30.12'}), (32, {'lhs': '$const28.11', 'rhs': '$k30.12', 'res': '$32binary_subtract.13'}), (34, {'func': '$26load_global.10', 'args': ['$32binary_subtract.13'], 'res': '$34call_function.14'}), (36, {'lhs': '$x24.9', 'rhs': '$34call_function.14', 'res': '$36binary_rshift.15'}), (38, {'lhs': '$22binary_lshift.8', 'rhs': '$36binary_rshift.15', 'res': '$38binary_or.16'}), (40, {'retval': '$38binary_or.16', 'castval': '$40return_value.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:17 PM - DEBUG - interpret - label 0:
    x = arg(0, name=x)                       ['x']
    k = arg(1, name=k)                       ['k']
    $2load_global.0 = global(uint64: uint64) ['$2load_global.0']
    x.1 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'x', 'x.1']
    $10load_global.3 = global(uint32: uint32) ['$10load_global.3']
    k.1 = call $10load_global.3(k, func=$10load_global.3, args=[Var(k, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', 'k', 'k.1']
    $22binary_lshift.8 = x.1 << k.1          ['$22binary_lshift.8', 'k.1', 'x.1']
    $26load_global.10 = global(uint32: uint32) ['$26load_global.10']
    $const28.11 = const(int, 64)             ['$const28.11']
    $32binary_subtract.13 = $const28.11 - k.1 ['$32binary_subtract.13', '$const28.11', 'k.1']
    $34call_function.14 = call $26load_global.10($32binary_subtract.13, func=$26load_global.10, args=[Var($32binary_subtract.13, random.py:77)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.10', '$32binary_subtract.13', '$34call_function.14']
    $36binary_rshift.15 = x.1 >> $34call_function.14 ['$34call_function.14', '$36binary_rshift.15', 'x.1']
    $38binary_or.16 = $22binary_lshift.8 | $36binary_rshift.15 ['$22binary_lshift.8', '$36binary_rshift.15', '$38binary_or.16']
    $40return_value.17 = cast(value=$38binary_or.16) ['$38binary_or.16', '$40return_value.17']
    return $40return_value.17                ['$40return_value.17']

07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C9BC880>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: x = arg(0, name=x)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: k = arg(1, name=k)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: x.1 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: k.1 = call $10load_global.3(k, func=$10load_global.3, args=[Var(k, random.py:72)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $22binary_lshift.8 = x.1 << k.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $32binary_subtract.13 = $const28.11 - k.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34call_function.14 = call $26load_global.10($32binary_subtract.13, func=$26load_global.10, args=[Var($32binary_subtract.13, random.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $36binary_rshift.15 = x.1 >> $34call_function.14
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $38binary_or.16 = $22binary_lshift.8 | $36binary_rshift.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $40return_value.17 = cast(value=$38binary_or.16)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: return $40return_value.17
07/29/2024 05:30:17 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$10load_global.3': [(<numba.core.ir.Assign object at 0x000001D62C9BCEE0>,
                                   0)],
             '$22binary_lshift.8': [(<numba.core.ir.Assign object at 0x000001D62C9A4640>,
                                     0)],
             '$26load_global.10': [(<numba.core.ir.Assign object at 0x000001D62C9A11C0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001D62C9C2CA0>,
                                  0)],
             '$32binary_subtract.13': [(<numba.core.ir.Assign object at 0x000001D62C94F0A0>,
                                        0)],
             '$34call_function.14': [(<numba.core.ir.Assign object at 0x000001D62C94F520>,
                                      0)],
             '$36binary_rshift.15': [(<numba.core.ir.Assign object at 0x000001D62C94F610>,
                                      0)],
             '$38binary_or.16': [(<numba.core.ir.Assign object at 0x000001D62C94F1F0>,
                                  0)],
             '$40return_value.17': [(<numba.core.ir.Assign object at 0x000001D62C937BB0>,
                                     0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001D62C9A1D90>,
                              0)],
             'k': [(<numba.core.ir.Assign object at 0x000001D62C9C21C0>, 0)],
             'k.1': [(<numba.core.ir.Assign object at 0x000001D62C9A4DC0>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000001D62C9C2430>, 0)],
             'x.1': [(<numba.core.ir.Assign object at 0x000001D62C9BC940>, 0)]})
07/29/2024 05:30:17 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D62C9BC880>
07/29/2024 05:30:17 PM - DEBUG - __init__ - bytecode dump:
>          0	NOP(arg=None, lineno=102)
           2	LOAD_GLOBAL(arg=0, lineno=111)
           4	LOAD_FAST(arg=1, lineno=111)
           6	CALL_FUNCTION(arg=1, lineno=111)
           8	STORE_FAST(arg=1, lineno=111)
          10	LOAD_GLOBAL(arg=1, lineno=113)
          12	LOAD_CONST(arg=1, lineno=113)
          14	CALL_FUNCTION(arg=1, lineno=113)
          16	LOAD_GLOBAL(arg=1, lineno=113)
          18	LOAD_CONST(arg=2, lineno=113)
          20	CALL_FUNCTION(arg=1, lineno=113)
          22	BUILD_TUPLE(arg=2, lineno=113)
          24	STORE_FAST(arg=2, lineno=113)
          26	LOAD_GLOBAL(arg=1, lineno=115)
          28	LOAD_CONST(arg=3, lineno=115)
          30	CALL_FUNCTION(arg=1, lineno=115)
          32	STORE_FAST(arg=3, lineno=115)
          34	LOAD_GLOBAL(arg=1, lineno=116)
          36	LOAD_CONST(arg=3, lineno=116)
          38	CALL_FUNCTION(arg=1, lineno=116)
          40	STORE_FAST(arg=4, lineno=116)
          42	LOAD_GLOBAL(arg=2, lineno=118)
          44	LOAD_CONST(arg=4, lineno=118)
          46	CALL_FUNCTION(arg=1, lineno=118)
          48	GET_ITER(arg=None, lineno=118)
>         50	FOR_ITER(arg=84, lineno=118)
          52	STORE_FAST(arg=5, lineno=118)
          54	LOAD_GLOBAL(arg=2, lineno=119)
          56	LOAD_CONST(arg=5, lineno=119)
          58	CALL_FUNCTION(arg=1, lineno=119)
          60	GET_ITER(arg=None, lineno=119)
>         62	FOR_ITER(arg=70, lineno=119)
          64	STORE_FAST(arg=6, lineno=119)
          66	LOAD_FAST(arg=2, lineno=120)
          68	LOAD_FAST(arg=5, lineno=120)
          70	BINARY_SUBSCR(arg=None, lineno=120)
          72	LOAD_GLOBAL(arg=1, lineno=120)
          74	LOAD_CONST(arg=6, lineno=120)
          76	CALL_FUNCTION(arg=1, lineno=120)
          78	LOAD_GLOBAL(arg=3, lineno=120)
          80	LOAD_FAST(arg=6, lineno=120)
          82	CALL_FUNCTION(arg=1, lineno=120)
          84	BINARY_LSHIFT(arg=None, lineno=120)
          86	BINARY_AND(arg=None, lineno=120)
          88	POP_JUMP_IF_FALSE(arg=122, lineno=120)
          90	LOAD_FAST(arg=3, lineno=121)
          92	LOAD_FAST(arg=0, lineno=121)
          94	LOAD_FAST(arg=1, lineno=121)
          96	BINARY_SUBSCR(arg=None, lineno=121)
          98	LOAD_CONST(arg=7, lineno=121)
         100	BINARY_SUBSCR(arg=None, lineno=121)
         102	INPLACE_XOR(arg=None, lineno=121)
         104	STORE_FAST(arg=3, lineno=121)
         106	LOAD_FAST(arg=4, lineno=122)
         108	LOAD_FAST(arg=0, lineno=122)
         110	LOAD_FAST(arg=1, lineno=122)
         112	BINARY_SUBSCR(arg=None, lineno=122)
         114	LOAD_CONST(arg=8, lineno=122)
         116	BINARY_SUBSCR(arg=None, lineno=122)
         118	INPLACE_XOR(arg=None, lineno=122)
         120	STORE_FAST(arg=4, lineno=122)
>        122	LOAD_GLOBAL(arg=4, lineno=123)
         124	LOAD_FAST(arg=0, lineno=123)
         126	LOAD_FAST(arg=1, lineno=123)
         128	CALL_FUNCTION(arg=2, lineno=123)
         130	POP_TOP(arg=None, lineno=123)
         132	JUMP_ABSOLUTE(arg=62, lineno=123)
>        134	JUMP_ABSOLUTE(arg=50, lineno=123)
>        136	LOAD_FAST(arg=3, lineno=125)
         138	LOAD_FAST(arg=0, lineno=125)
         140	LOAD_FAST(arg=1, lineno=125)
         142	BINARY_SUBSCR(arg=None, lineno=125)
         144	LOAD_CONST(arg=7, lineno=125)
         146	STORE_SUBSCR(arg=None, lineno=125)
         148	LOAD_FAST(arg=4, lineno=126)
         150	LOAD_FAST(arg=0, lineno=126)
         152	LOAD_FAST(arg=1, lineno=126)
         154	BINARY_SUBSCR(arg=None, lineno=126)
         156	LOAD_CONST(arg=8, lineno=126)
         158	STORE_SUBSCR(arg=None, lineno=126)
         160	LOAD_CONST(arg=9, lineno=126)
         162	RETURN_VALUE(arg=None, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=0 nstack_initial=0)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: []
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=0 nstack_initial=0)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=0, inst=NOP(arg=None, lineno=102)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=111)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=111)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$2load_global.0']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=111)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$2load_global.0', '$index4.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=111)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$6call_function.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$10load_global.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$10load_global.3', '$const12.4']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$14call_function.5']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$14call_function.5', '$16load_global.6']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$14call_function.5', '$16load_global.6', '$const18.7']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=22, inst=BUILD_TUPLE(arg=2, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$14call_function.5', '$20call_function.8']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=24, inst=STORE_FAST(arg=2, lineno=113)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$22build_tuple.9']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=115)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=115)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$26load_global.10']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=115)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$26load_global.10', '$const28.11']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=32, inst=STORE_FAST(arg=3, lineno=115)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$30call_function.12']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=34, inst=LOAD_GLOBAL(arg=1, lineno=116)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=116)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$34load_global.13']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=116)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$34load_global.13', '$const36.14']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=40, inst=STORE_FAST(arg=4, lineno=116)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$38call_function.15']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=42, inst=LOAD_GLOBAL(arg=2, lineno=118)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=118)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$42load_global.16']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=118)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$42load_global.16', '$const44.17']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=48, inst=GET_ITER(arg=None, lineno=118)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$46call_function.18']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=50, stack=('$48get_iter.19',), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=50 nstack_initial=1)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: ['$phi50.0']
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=50 nstack_initial=1)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=50, inst=FOR_ITER(arg=84, lineno=118)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi50.0']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=('$phi50.0', '$50for_iter.2'), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=52 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: []
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=136 nstack_initial=0)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=136, inst=LOAD_FAST(arg=3, lineno=125)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=125)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s0136.0']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=140, inst=LOAD_FAST(arg=1, lineno=125)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s0136.0', '$states138.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=142, inst=BINARY_SUBSCR(arg=None, lineno=125)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s0136.0', '$states138.1', '$index140.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=144, inst=LOAD_CONST(arg=7, lineno=125)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s0136.0', '$142binary_subscr.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=125)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s0136.0', '$142binary_subscr.3', '$const144.4']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=150, inst=LOAD_FAST(arg=0, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s1148.5']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s1148.5', '$states150.6']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=154, inst=BINARY_SUBSCR(arg=None, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s1148.5', '$states150.6', '$index152.7']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=156, inst=LOAD_CONST(arg=8, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s1148.5', '$154binary_subscr.8']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=158, inst=STORE_SUBSCR(arg=None, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$s1148.5', '$154binary_subscr.8', '$const156.9']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=160, inst=LOAD_CONST(arg=9, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack []
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=162, inst=RETURN_VALUE(arg=None, lineno=126)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$const160.10']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=52 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: ['$phi52.0', '$phi52.1']
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=52 nstack_initial=2)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=52, inst=STORE_FAST(arg=5, lineno=118)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi52.0', '$phi52.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=119)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi52.0']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=56, inst=LOAD_CONST(arg=5, lineno=119)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi52.0', '$54load_global.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=119)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi52.0', '$54load_global.2', '$const56.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=60, inst=GET_ITER(arg=None, lineno=119)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi52.0', '$58call_function.4']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=62, stack=('$phi52.0', '$60get_iter.5'), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: ['$phi62.0', '$phi62.1']
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=62 nstack_initial=2)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=62, inst=FOR_ITER(arg=70, lineno=119)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi62.0', '$phi62.1']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=134, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=64, stack=('$phi62.0', '$phi62.1', '$62for_iter.3'), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=134 nstack_initial=1), State(pc_initial=64 nstack_initial=3)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: ['$phi134.0']
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=134 nstack_initial=1)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=134, inst=JUMP_ABSOLUTE(arg=50, lineno=123)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi134.0']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=50, stack=('$phi134.0',), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=64 nstack_initial=3), State(pc_initial=50 nstack_initial=1)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: ['$phi64.0', '$phi64.1', '$phi64.2']
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=64 nstack_initial=3)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=64, inst=STORE_FAST(arg=6, lineno=119)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$phi64.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$jump66.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$jump66.3', '$i68.4']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=72, inst=LOAD_GLOBAL(arg=1, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=74, inst=LOAD_CONST(arg=6, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$72load_global.6', '$const74.7']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=78, inst=LOAD_GLOBAL(arg=3, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$78load_global.9', '$b80.10']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=84, inst=BINARY_LSHIFT(arg=None, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$76call_function.8', '$82call_function.11']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=86, inst=BINARY_AND(arg=None, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$70binary_subscr.5', '$84binary_lshift.12']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=122, lineno=120)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi64.0', '$phi64.1', '$86binary_and.13']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=90, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0), Edge(pc=122, stack=('$phi64.0', '$phi64.1'), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=90 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: ['$phi90.0', '$phi90.1']
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=90 nstack_initial=2)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=92, inst=LOAD_FAST(arg=0, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$states92.3', '$index94.4']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=98, inst=LOAD_CONST(arg=7, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=100, inst=BINARY_SUBSCR(arg=None, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$96binary_subscr.5', '$const98.6']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=102, inst=INPLACE_XOR(arg=None, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s090.2', '$100binary_subscr.7']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=104, inst=STORE_FAST(arg=3, lineno=121)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$102inplace_xor.8']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$states108.10', '$index110.11']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=114, inst=LOAD_CONST(arg=8, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=116, inst=BINARY_SUBSCR(arg=None, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$112binary_subscr.12', '$const114.13']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=118, inst=INPLACE_XOR(arg=None, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$s1106.9', '$116binary_subscr.14']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=120, inst=STORE_FAST(arg=4, lineno=122)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi90.0', '$phi90.1', '$118inplace_xor.15']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=122, stack=('$phi90.0', '$phi90.1'), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=122 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - run - stack: ['$phi122.0', '$phi122.1']
07/29/2024 05:30:17 PM - DEBUG - run - state.pc_initial: State(pc_initial=122 nstack_initial=2)
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=122, inst=LOAD_GLOBAL(arg=4, lineno=123)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=123)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$122load_global.2']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=126, inst=LOAD_FAST(arg=1, lineno=123)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=128, inst=CALL_FUNCTION(arg=2, lineno=123)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$122load_global.2', '$states124.3', '$index126.4']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=130, inst=POP_TOP(arg=None, lineno=123)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1', '$128call_function.5']
07/29/2024 05:30:17 PM - DEBUG - dispatch - dispatch pc=132, inst=JUMP_ABSOLUTE(arg=62, lineno=123)
07/29/2024 05:30:17 PM - DEBUG - dispatch - stack ['$phi122.0', '$phi122.1']
07/29/2024 05:30:17 PM - DEBUG - run - end state. edges=[Edge(pc=62, stack=('$phi122.0', '$phi122.1'), blockstack=(), npush=0)]
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=122 nstack_initial=2), State(pc_initial=62 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - run - pending: deque([State(pc_initial=62 nstack_initial=2)])
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - -------------------------Prune PHIs-------------------------
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=1): {'$phi50.0'},
             State(pc_initial=52 nstack_initial=2): {'$phi52.1'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=64 nstack_initial=3): {'$phi64.2'},
             State(pc_initial=90 nstack_initial=2): set(),
             State(pc_initial=122 nstack_initial=2): set(),
             State(pc_initial=134 nstack_initial=1): set(),
             State(pc_initial=136 nstack_initial=0): set()})
07/29/2024 05:30:17 PM - DEBUG - find_use_defs - defmap: {'$phi50.0': State(pc_initial=0 nstack_initial=0),
 '$phi52.1': State(pc_initial=50 nstack_initial=1),
 '$phi62.1': State(pc_initial=52 nstack_initial=2),
 '$phi64.2': State(pc_initial=62 nstack_initial=2)}
07/29/2024 05:30:17 PM - DEBUG - find_use_defs - phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.0', State(pc_initial=90 nstack_initial=2))},
             '$phi122.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3)),
                           ('$phi90.1', State(pc_initial=90 nstack_initial=2))},
             '$phi134.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi134.0',
                           State(pc_initial=134 nstack_initial=1))},
             '$phi52.0': {('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi122.1',
                           State(pc_initial=122 nstack_initial=2))},
             '$phi64.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi64.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$phi64.0', State(pc_initial=64 nstack_initial=3))},
             '$phi90.1': {('$phi64.1', State(pc_initial=64 nstack_initial=3))}})
07/29/2024 05:30:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi122.1': {('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi134.0': {('$phi122.0',
                            State(pc_initial=122 nstack_initial=2)),
                           ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi122.0', State(pc_initial=122 nstack_initial=2)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2)),
                          ('$phi62.1', State(pc_initial=62 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/29/2024 05:30:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/29/2024 05:30:17 PM - DEBUG - propagate_phi_map - changing phismap: defaultdict(<class 'set'>,
            {'$phi122.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi122.1': {('$60get_iter.5',
                            State(pc_initial=52 nstack_initial=2))},
             '$phi134.0': {('$48get_iter.19',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi50.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))},
             '$phi62.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))},
             '$phi64.2': {('$62for_iter.3',
                           State(pc_initial=62 nstack_initial=2))},
             '$phi90.0': {('$48get_iter.19',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi90.1': {('$60get_iter.5',
                           State(pc_initial=52 nstack_initial=2))}})
07/29/2024 05:30:17 PM - DEBUG - apply_changes - keep phismap: {'$phi50.0': {('$48get_iter.19', State(pc_initial=0 nstack_initial=0))},
 '$phi52.1': {('$50for_iter.2', State(pc_initial=50 nstack_initial=1))},
 '$phi62.1': {('$60get_iter.5', State(pc_initial=52 nstack_initial=2))},
 '$phi64.2': {('$62for_iter.3', State(pc_initial=62 nstack_initial=2))}}
07/29/2024 05:30:17 PM - DEBUG - apply_changes - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi50.0': '$48get_iter.19'},
             State(pc_initial=50 nstack_initial=1): {'$phi52.1': '$50for_iter.2'},
             State(pc_initial=52 nstack_initial=2): {'$phi62.1': '$60get_iter.5'},
             State(pc_initial=62 nstack_initial=2): {'$phi64.2': '$62for_iter.3'}})
07/29/2024 05:30:17 PM - DEBUG - _prune_phis - ----------------------DONE Prune PHIs-----------------------
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$index4.1'}), (6, {'func': '$2load_global.0', 'args': ['$index4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$const12.4'}), (14, {'func': '$10load_global.3', 'args': ['$const12.4'], 'res': '$14call_function.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$16load_global.6', 'args': ['$const18.7'], 'res': '$20call_function.8'}), (22, {'items': ['$14call_function.5', '$20call_function.8'], 'res': '$22build_tuple.9'}), (24, {'value': '$22build_tuple.9'}), (26, {'res': '$26load_global.10'}), (28, {'res': '$const28.11'}), (30, {'func': '$26load_global.10', 'args': ['$const28.11'], 'res': '$30call_function.12'}), (32, {'value': '$30call_function.12'}), (34, {'res': '$34load_global.13'}), (36, {'res': '$const36.14'}), (38, {'func': '$34load_global.13', 'args': ['$const36.14'], 'res': '$38call_function.15'}), (40, {'value': '$38call_function.15'}), (42, {'res': '$42load_global.16'}), (44, {'res': '$const44.17'}), (46, {'func': '$42load_global.16', 'args': ['$const44.17'], 'res': '$46call_function.18'}), (48, {'value': '$46call_function.18', 'res': '$48get_iter.19'})), outgoing_phis={'$phi50.0': '$48get_iter.19'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$48get_iter.19',)})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'iterator': '$phi50.0', 'pair': '$50for_iter.1', 'indval': '$50for_iter.2', 'pred': '$50for_iter.3'}),), outgoing_phis={'$phi52.1': '$50for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: (), 52: ('$phi50.0', '$50for_iter.2')})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=52 nstack_initial=2):
AdaptBlockInfo(insts=((52, {'value': '$phi52.1'}), (54, {'res': '$54load_global.2'}), (56, {'res': '$const56.3'}), (58, {'func': '$54load_global.2', 'args': ['$const56.3'], 'res': '$58call_function.4'}), (60, {'value': '$58call_function.4', 'res': '$60get_iter.5'})), outgoing_phis={'$phi62.1': '$60get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi52.0', '$60get_iter.5')})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'iterator': '$phi62.1', 'pair': '$62for_iter.2', 'indval': '$62for_iter.3', 'pred': '$62for_iter.4'}),), outgoing_phis={'$phi64.2': '$62for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ('$phi62.0',), 64: ('$phi62.0', '$phi62.1', '$62for_iter.3')})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=64 nstack_initial=3):
AdaptBlockInfo(insts=((64, {'value': '$phi64.2'}), (66, {'res': '$jump66.3'}), (68, {'res': '$i68.4'}), (70, {'index': '$i68.4', 'target': '$jump66.3', 'res': '$70binary_subscr.5'}), (72, {'res': '$72load_global.6'}), (74, {'res': '$const74.7'}), (76, {'func': '$72load_global.6', 'args': ['$const74.7'], 'res': '$76call_function.8'}), (78, {'res': '$78load_global.9'}), (80, {'res': '$b80.10'}), (82, {'func': '$78load_global.9', 'args': ['$b80.10'], 'res': '$82call_function.11'}), (84, {'lhs': '$76call_function.8', 'rhs': '$82call_function.11', 'res': '$84binary_lshift.12'}), (86, {'lhs': '$70binary_subscr.5', 'rhs': '$84binary_lshift.12', 'res': '$86binary_and.13'}), (88, {'pred': '$86binary_and.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ('$phi64.0', '$phi64.1'), 122: ('$phi64.0', '$phi64.1')})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=90 nstack_initial=2):
AdaptBlockInfo(insts=((90, {'res': '$s090.2'}), (92, {'res': '$states92.3'}), (94, {'res': '$index94.4'}), (96, {'index': '$index94.4', 'target': '$states92.3', 'res': '$96binary_subscr.5'}), (98, {'res': '$const98.6'}), (100, {'index': '$const98.6', 'target': '$96binary_subscr.5', 'res': '$100binary_subscr.7'}), (102, {'lhs': '$s090.2', 'rhs': '$100binary_subscr.7', 'res': '$102inplace_xor.8'}), (104, {'value': '$102inplace_xor.8'}), (106, {'res': '$s1106.9'}), (108, {'res': '$states108.10'}), (110, {'res': '$index110.11'}), (112, {'index': '$index110.11', 'target': '$states108.10', 'res': '$112binary_subscr.12'}), (114, {'res': '$const114.13'}), (116, {'index': '$const114.13', 'target': '$112binary_subscr.12', 'res': '$116binary_subscr.14'}), (118, {'lhs': '$s1106.9', 'rhs': '$116binary_subscr.14', 'res': '$118inplace_xor.15'}), (120, {'value': '$118inplace_xor.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: ('$phi90.0', '$phi90.1')})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=122 nstack_initial=2):
AdaptBlockInfo(insts=((122, {'res': '$122load_global.2'}), (124, {'res': '$states124.3'}), (126, {'res': '$index126.4'}), (128, {'func': '$122load_global.2', 'args': ['$states124.3', '$index126.4'], 'res': '$128call_function.5'}), (132, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$phi122.0', '$phi122.1')})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=134 nstack_initial=1):
AdaptBlockInfo(insts=((134, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi134.0',)})
07/29/2024 05:30:17 PM - DEBUG - run - block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$s0136.0'}), (138, {'res': '$states138.1'}), (140, {'res': '$index140.2'}), (142, {'index': '$index140.2', 'target': '$states138.1', 'res': '$142binary_subscr.3'}), (144, {'res': '$const144.4'}), (146, {'target': '$142binary_subscr.3', 'index': '$const144.4', 'value': '$s0136.0'}), (148, {'res': '$s1148.5'}), (150, {'res': '$states150.6'}), (152, {'res': '$index152.7'}), (154, {'index': '$index152.7', 'target': '$states150.6', 'res': '$154binary_subscr.8'}), (156, {'res': '$const156.9'}), (158, {'target': '$154binary_subscr.8', 'index': '$const156.9', 'value': '$s1148.5'}), (160, {'res': '$const160.10'}), (162, {'retval': '$const160.10', 'castval': '$162return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
07/29/2024 05:30:17 PM - DEBUG - interpret - label 0:
    states = arg(0, name=states)             ['states']
    index = arg(1, name=index)               ['index']
    $2load_global.0 = global(int64: int64)   ['$2load_global.0']
    index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'index', 'index.1']
    $10load_global.3 = global(uint64: uint64) ['$10load_global.3']
    $const12.4 = const(int, 13739361407582206667) ['$const12.4']
    $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', '$const12.4']
    $16load_global.6 = global(uint64: uint64) ['$16load_global.6']
    $const18.7 = const(int, 15594563132006766882) ['$const18.7']
    $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.6', '$20call_function.8', '$const18.7']
    jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)]) ['$14call_function.5', '$20call_function.8', 'jump']
    $26load_global.10 = global(uint64: uint64) ['$26load_global.10']
    $const28.11 = const(int, 0)              ['$const28.11']
    s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.10', '$const28.11', 's0']
    $34load_global.13 = global(uint64: uint64) ['$34load_global.13']
    $const36.14 = const(int, 0)              ['$const36.14']
    s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.13', '$const36.14', 's1']
    $42load_global.16 = global(range: <class 'range'>) ['$42load_global.16']
    $const44.17 = const(int, 2)              ['$const44.17']
    $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.16', '$46call_function.18', '$const44.17']
    $48get_iter.19 = getiter(value=$46call_function.18) ['$46call_function.18', '$48get_iter.19']
    $phi50.0 = $48get_iter.19                ['$48get_iter.19', '$phi50.0']
    jump 50                                  []
label 50:
    $50for_iter.1 = iternext(value=$phi50.0) ['$50for_iter.1', '$phi50.0']
    $50for_iter.2 = pair_first(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.2']
    $50for_iter.3 = pair_second(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.3']
    $phi52.1 = $50for_iter.2                 ['$50for_iter.2', '$phi52.1']
    branch $50for_iter.3, 52, 136            ['$50for_iter.3']
label 52:
    i = $phi52.1                             ['$phi52.1', 'i']
    $54load_global.2 = global(range: <class 'range'>) ['$54load_global.2']
    $const56.3 = const(int, 64)              ['$const56.3']
    $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$54load_global.2', '$58call_function.4', '$const56.3']
    $60get_iter.5 = getiter(value=$58call_function.4) ['$58call_function.4', '$60get_iter.5']
    $phi62.1 = $60get_iter.5                 ['$60get_iter.5', '$phi62.1']
    jump 62                                  []
label 62:
    $62for_iter.2 = iternext(value=$phi62.1) ['$62for_iter.2', '$phi62.1']
    $62for_iter.3 = pair_first(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.3']
    $62for_iter.4 = pair_second(value=$62for_iter.2) ['$62for_iter.2', '$62for_iter.4']
    $phi64.2 = $62for_iter.3                 ['$62for_iter.3', '$phi64.2']
    branch $62for_iter.4, 64, 134            ['$62for_iter.4']
label 64:
    b = $phi64.2                             ['$phi64.2', 'b']
    $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>) ['$70binary_subscr.5', 'i', 'jump']
    $72load_global.6 = global(uint64: uint64) ['$72load_global.6']
    $const74.7 = const(int, 1)               ['$const74.7']
    $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.6', '$76call_function.8', '$const74.7']
    $78load_global.9 = global(uint32: uint32) ['$78load_global.9']
    $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None) ['$78load_global.9', '$82call_function.11', 'b']
    $84binary_lshift.12 = $76call_function.8 << $82call_function.11 ['$76call_function.8', '$82call_function.11', '$84binary_lshift.12']
    $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12 ['$70binary_subscr.5', '$84binary_lshift.12', '$86binary_and.13']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None) ['$86binary_and.13', '$88pred', 'bool88']
    branch $88pred, 90, 122                  ['$88pred']
label 90:
    $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$96binary_subscr.5', 'index.1', 'states']
    $const98.6 = const(str, s0)              ['$const98.6']
    $100binary_subscr.7 = getitem(value=$96binary_subscr.5, index=$const98.6, fn=<built-in function getitem>) ['$100binary_subscr.7', '$96binary_subscr.5', '$const98.6']
    $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined) ['$100binary_subscr.7', '$102inplace_xor.8', 's0']
    s0 = $102inplace_xor.8                   ['$102inplace_xor.8', 's0']
    $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$112binary_subscr.12', 'index.1', 'states']
    $const114.13 = const(str, s1)            ['$const114.13']
    $116binary_subscr.14 = getitem(value=$112binary_subscr.12, index=$const114.13, fn=<built-in function getitem>) ['$112binary_subscr.12', '$116binary_subscr.14', '$const114.13']
    $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined) ['$116binary_subscr.14', '$118inplace_xor.15', 's1']
    s1 = $118inplace_xor.15                  ['$118inplace_xor.15', 's1']
    jump 122                                 []
label 122:
    $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>)) ['$122load_global.2']
    $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.2', '$128call_function.5', 'index.1', 'states']
    jump 62                                  []
label 134:
    jump 50                                  []
label 136:
    $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$142binary_subscr.3', 'index.1', 'states']
    $const144.4 = const(str, s0)             ['$const144.4']
    $142binary_subscr.3[$const144.4] = s0    ['$142binary_subscr.3', '$const144.4', 's0']
    $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>) ['$154binary_subscr.8', 'index.1', 'states']
    $const156.9 = const(str, s1)             ['$const156.9']
    $154binary_subscr.8[$const156.9] = s1    ['$154binary_subscr.8', '$const156.9', 's1']
    $const160.10 = const(NoneType, None)     ['$const160.10']
    $162return_value.11 = cast(value=$const160.10) ['$162return_value.11', '$const160.10']
    return $162return_value.11               ['$162return_value.11']

07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 0
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 50
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 52
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 62
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 64
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 90
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = $102inplace_xor.8
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:17 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 122
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:17 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 134
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_analysis - ==== SSA block analysis pass on 136
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._GatherDefsHandler object at 0x000001D62C978C40>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:18 PM - DEBUG - _find_defs_violators - defs defaultdict(<class 'list'>,
            {'$100binary_subscr.7': [(<numba.core.ir.Assign object at 0x000001D62CA710D0>,
                                      90)],
             '$102inplace_xor.8': [(<numba.core.ir.Assign object at 0x000001D62CA759A0>,
                                    90)],
             '$10load_global.3': [(<numba.core.ir.Assign object at 0x000001D62CA9CF70>,
                                   0)],
             '$112binary_subscr.12': [(<numba.core.ir.Assign object at 0x000001D62CA75A90>,
                                       90)],
             '$116binary_subscr.14': [(<numba.core.ir.Assign object at 0x000001D62CA719D0>,
                                       90)],
             '$118inplace_xor.15': [(<numba.core.ir.Assign object at 0x000001D62CA75820>,
                                     90)],
             '$122load_global.2': [(<numba.core.ir.Assign object at 0x000001D62CA75BE0>,
                                    122)],
             '$128call_function.5': [(<numba.core.ir.Assign object at 0x000001D62CA7A0A0>,
                                      122)],
             '$142binary_subscr.3': [(<numba.core.ir.Assign object at 0x000001D62CA7A790>,
                                      136)],
             '$14call_function.5': [(<numba.core.ir.Assign object at 0x000001D62CA8A2E0>,
                                     0)],
             '$154binary_subscr.8': [(<numba.core.ir.Assign object at 0x000001D62CA7AEB0>,
                                      136)],
             '$162return_value.11': [(<numba.core.ir.Assign object at 0x000001D62CA71A30>,
                                      136)],
             '$16load_global.6': [(<numba.core.ir.Assign object at 0x000001D62CA8A400>,
                                   0)],
             '$20call_function.8': [(<numba.core.ir.Assign object at 0x000001D62CA8A760>,
                                     0)],
             '$26load_global.10': [(<numba.core.ir.Assign object at 0x000001D62C8FF820>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000001D62C98AA00>,
                                  0)],
             '$34load_global.13': [(<numba.core.ir.Assign object at 0x000001D62C97E340>,
                                    0)],
             '$42load_global.16': [(<numba.core.ir.Assign object at 0x000001D62CA8AAC0>,
                                    0)],
             '$46call_function.18': [(<numba.core.ir.Assign object at 0x000001D62CA8AE20>,
                                      0)],
             '$48get_iter.19': [(<numba.core.ir.Assign object at 0x000001D62CA8AF40>,
                                 0)],
             '$50for_iter.1': [(<numba.core.ir.Assign object at 0x000001D62C986130>,
                                50)],
             '$50for_iter.2': [(<numba.core.ir.Assign object at 0x000001D62C986250>,
                                50)],
             '$50for_iter.3': [(<numba.core.ir.Assign object at 0x000001D62C986370>,
                                50)],
             '$54load_global.2': [(<numba.core.ir.Assign object at 0x000001D62C9867C0>,
                                   52)],
             '$58call_function.4': [(<numba.core.ir.Assign object at 0x000001D62C986B20>,
                                     52)],
             '$60get_iter.5': [(<numba.core.ir.Assign object at 0x000001D62C986C40>,
                                52)],
             '$62for_iter.2': [(<numba.core.ir.Assign object at 0x000001D62C986FD0>,
                                62)],
             '$62for_iter.3': [(<numba.core.ir.Assign object at 0x000001D62CA7FD90>,
                                62)],
             '$62for_iter.4': [(<numba.core.ir.Assign object at 0x000001D62CA7FCD0>,
                                62)],
             '$70binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001D62CA7F4C0>,
                                     64)],
             '$72load_global.6': [(<numba.core.ir.Assign object at 0x000001D62CA7F220>,
                                   64)],
             '$76call_function.8': [(<numba.core.ir.Assign object at 0x000001D62CA7F700>,
                                     64)],
             '$78load_global.9': [(<numba.core.ir.Assign object at 0x000001D62CA7FE80>,
                                   64)],
             '$82call_function.11': [(<numba.core.ir.Assign object at 0x000001D62CA79220>,
                                      64)],
             '$84binary_lshift.12': [(<numba.core.ir.Assign object at 0x000001D62CA79370>,
                                      64)],
             '$86binary_and.13': [(<numba.core.ir.Assign object at 0x000001D62CA794F0>,
                                   64)],
             '$88pred': [(<numba.core.ir.Assign object at 0x000001D62CA79760>,
                          64)],
             '$96binary_subscr.5': [(<numba.core.ir.Assign object at 0x000001D62CA79C70>,
                                     90)],
             '$const114.13': [(<numba.core.ir.Assign object at 0x000001D62CA75760>,
                               90)],
             '$const12.4': [(<numba.core.ir.Assign object at 0x000001D62CA8A100>,
                             0)],
             '$const144.4': [(<numba.core.ir.Assign object at 0x000001D62CA7A8E0>,
                              136)],
             '$const156.9': [(<numba.core.ir.Assign object at 0x000001D62CA71910>,
                              136)],
             '$const160.10': [(<numba.core.ir.Assign object at 0x000001D62CA71F10>,
                               136)],
             '$const18.7': [(<numba.core.ir.Assign object at 0x000001D62CA8A580>,
                             0)],
             '$const28.11': [(<numba.core.ir.Assign object at 0x000001D62C895A30>,
                              0)],
             '$const36.14': [(<numba.core.ir.Assign object at 0x000001D62C9D60A0>,
                              0)],
             '$const44.17': [(<numba.core.ir.Assign object at 0x000001D62CA8AC40>,
                              0)],
             '$const56.3': [(<numba.core.ir.Assign object at 0x000001D62C986940>,
                             52)],
             '$const74.7': [(<numba.core.ir.Assign object at 0x000001D62CA7F190>,
                             64)],
             '$const98.6': [(<numba.core.ir.Assign object at 0x000001D62CA79DC0>,
                             90)],
             '$phi50.0': [(<numba.core.ir.Assign object at 0x000001D62C915D60>,
                           0)],
             '$phi52.1': [(<numba.core.ir.Assign object at 0x000001D62C986070>,
                           50)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x000001D62C986CA0>,
                           52)],
             '$phi64.2': [(<numba.core.ir.Assign object at 0x000001D62C986F10>,
                           62)],
             'b': [(<numba.core.ir.Assign object at 0x000001D62CA7F8B0>, 64)],
             'bool88': [(<numba.core.ir.Assign object at 0x000001D62CA79640>,
                         64)],
             'i': [(<numba.core.ir.Assign object at 0x000001D62C986640>, 52)],
             'index': [(<numba.core.ir.Assign object at 0x000001D62C98A5B0>,
                        0)],
             'index.1': [(<numba.core.ir.Assign object at 0x000001D62CA972B0>,
                          0)],
             'jump': [(<numba.core.ir.Assign object at 0x000001D62C93DC70>, 0)],
             's0': [(<numba.core.ir.Assign object at 0x000001D62C97EC40>, 0),
                    (<numba.core.ir.Assign object at 0x000001D62CA75FA0>, 90)],
             's1': [(<numba.core.ir.Assign object at 0x000001D62CA8A7C0>, 0),
                    (<numba.core.ir.Assign object at 0x000001D62CA75430>, 90)],
             'states': [(<numba.core.ir.Assign object at 0x000001D62C98A250>,
                         0)]})
07/29/2024 05:30:18 PM - DEBUG - _find_defs_violators - SSA violators <numba.core.utils.OrderedSet object at 0x000001D62C978C40>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa - Fix SSA violator on var s0
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - on_assign - first assign: s0
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = $102inplace_xor.8
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: s0.1 = $102inplace_xor.8
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:18 PM - DEBUG - _run_ssa - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D62CA8CD30>],
             90: [<numba.core.ir.Assign object at 0x000001D62CA8CD00>]})
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _find_def - find_def var='s0' stmt=$102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 90
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 64 from label 90
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - insert phi node s0.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 122
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 122
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - insert phi node s0.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s0.2 = phi(incoming_values=[], incoming_blocks=[])
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 90
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s0.1 = $102inplace_xor.8
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 52
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 52
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 50 from label 52
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 50
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - insert phi node s0.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 0
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 134
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 134
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 62 from label 134
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s0.2 = phi(incoming_values=[Var(s0.3, random.py:121)], incoming_blocks=[122])
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.1 = $102inplace_xor.8
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CE50>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0
07/29/2024 05:30:18 PM - DEBUG - _find_def - find_def var='s0' stmt=$142binary_subscr.3['s0'] = s0
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 136
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 50 from label 136
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: $142binary_subscr.3['s0'] = s0.4
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:18 PM - DEBUG - _run_ssa - Fix SSA violator on var s1
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - on_assign - first assign: s1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.1 = $102inplace_xor.8
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = $118inplace_xor.15
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: s1.1 = $118inplace_xor.15
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FreshVarHandler object at 0x000001D62CA8CEB0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0.4
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
07/29/2024 05:30:18 PM - DEBUG - _run_ssa - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001D62CA8CBE0>],
             90: [<numba.core.ir.Assign object at 0x000001D62CA8CC10>]})
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 0
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: states = arg(0, name=states)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index = arg(1, name=index)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $2load_global.0 = global(int64: int64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: index.1 = call $2load_global.0(index, func=$2load_global.0, args=[Var(index, random.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $10load_global.3 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const12.4 = const(int, 13739361407582206667)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $14call_function.5 = call $10load_global.3($const12.4, func=$10load_global.3, args=[Var($const12.4, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $16load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const18.7 = const(int, 15594563132006766882)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $20call_function.8 = call $16load_global.6($const18.7, func=$16load_global.6, args=[Var($const18.7, random.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump = build_tuple(items=[Var($14call_function.5, random.py:113), Var($20call_function.8, random.py:113)])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $26load_global.10 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const28.11 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0 = call $26load_global.10($const28.11, func=$26load_global.10, args=[Var($const28.11, random.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $34load_global.13 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const36.14 = const(int, 0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $42load_global.16 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const44.17 = const(int, 2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $46call_function.18 = call $42load_global.16($const44.17, func=$42load_global.16, args=[Var($const44.17, random.py:118)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $48get_iter.19 = getiter(value=$46call_function.18)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi50.0 = $48get_iter.19
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 50
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.4 = phi(incoming_values=[Var(s0, random.py:115), Var(s0.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.1 = iternext(value=$phi50.0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi52.1 = $50for_iter.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $50for_iter.3, 52, 136
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 52
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: i = $phi52.1
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $54load_global.2 = global(range: <class 'range'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const56.3 = const(int, 64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $58call_function.4 = call $54load_global.2($const56.3, func=$54load_global.2, args=[Var($const56.3, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $60get_iter.5 = getiter(value=$58call_function.4)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi62.1 = $60get_iter.5
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 62
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.2 = phi(incoming_values=[Var(s0.3, random.py:121), Var(s0.4, random.py:121)], incoming_blocks=[122, 52])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.2 = iternext(value=$phi62.1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.3 = pair_first(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $62for_iter.4 = pair_second(value=$62for_iter.2)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $phi64.2 = $62for_iter.3
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $62for_iter.4, 64, 134
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 64
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: b = $phi64.2
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $70binary_subscr.5 = getitem(value=jump, index=i, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $72load_global.6 = global(uint64: uint64)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const74.7 = const(int, 1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $76call_function.8 = call $72load_global.6($const74.7, func=$72load_global.6, args=[Var($const74.7, random.py:120)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $78load_global.9 = global(uint32: uint32)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $82call_function.11 = call $78load_global.9(b, func=$78load_global.9, args=[Var(b, random.py:119)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $84binary_lshift.12 = $76call_function.8 << $82call_function.11
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $86binary_and.13 = $70binary_subscr.5 & $84binary_lshift.12
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: bool88 = global(bool: <class 'bool'>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $88pred = call bool88($86binary_and.13, func=bool88, args=(Var($86binary_and.13, random.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: branch $88pred, 90, 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 90
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $96binary_subscr.5 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const98.6 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $100binary_subscr.7 = static_getitem(value=$96binary_subscr.5, index=s0, index_var=$const98.6, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $102inplace_xor.8 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s0.2, rhs=$100binary_subscr.7, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.1 = $102inplace_xor.8
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $112binary_subscr.12 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const114.13 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $116binary_subscr.14 = static_getitem(value=$112binary_subscr.12, index=s1, index_var=$const114.13, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _find_def - find_def var='s1' stmt=$118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 90
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 64 from label 90
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - insert phi node s1.2 = phi(incoming_values=[], incoming_blocks=[]) at 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 122
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 122
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - insert phi node s1.3 = phi(incoming_values=[], incoming_blocks=[]) at 122
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 62 from label 64
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s1.2 = phi(incoming_values=[], incoming_blocks=[])
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 90
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s1.1 = $118inplace_xor.15
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s1.3 = phi(incoming_values=[Var(s1.2, random.py:121), Var(s1.1, random.py:122)], incoming_blocks=[64, 90])
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 52
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 52
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 50 from label 52
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 50
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - insert phi node s1.4 = phi(incoming_values=[], incoming_blocks=[]) at 50
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 0
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s1 = call $34load_global.13($const36.14, func=$34load_global.13, args=[Var($const36.14, random.py:116)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 134
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 134
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 62 from label 134
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 62
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s1.2 = phi(incoming_values=[Var(s1.3, random.py:121)], incoming_blocks=[122])
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - incoming_def s1.4 = phi(incoming_values=[Var(s1, random.py:116), Var(s1.2, random.py:121)], incoming_blocks=[0, 134])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: $118inplace_xor.15 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=s1.2, rhs=$116binary_subscr.14, static_lhs=Undefined, static_rhs=Undefined)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s1.1 = $118inplace_xor.15
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 122
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 122
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: s0.3 = phi(incoming_values=[Var(s0.2, random.py:121), Var(s0.1, random.py:121)], incoming_blocks=[64, 90])
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $122load_global.2 = global(xoroshiro128p_next: CPUDispatcher(<function xoroshiro128p_next at 0x000001D5BA722EE0>))
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $128call_function.5 = call $122load_global.2(states, index.1, func=$122load_global.2, args=[Var(states, random.py:102), Var(index.1, random.py:111)], kws=(), vararg=None, varkwarg=None, target=None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 62
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 134
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: jump 50
07/29/2024 05:30:18 PM - DEBUG - _run_block_rewrite - ==== SSA block rewrite pass on 136
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - Running <numba.core.ssa._FixSSAVars object at 0x000001D62CA8CCA0>
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const144.4 = const(str, s0)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $142binary_subscr.3['s0'] = s0.4
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8 = getitem(value=states, index=index.1, fn=<built-in function getitem>)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const156.9 = const(str, s1)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $154binary_subscr.8['s1'] = s1
07/29/2024 05:30:18 PM - DEBUG - _find_def - find_def var='s1' stmt=$154binary_subscr.8['s1'] = s1
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - find_def_from_top label 136
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_top - idom 50 from label 136
07/29/2024 05:30:18 PM - DEBUG - _find_def_from_bottom - find_def_from_bottom label 50
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - replaced with: $154binary_subscr.8['s1'] = s1.4
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $const160.10 = const(NoneType, None)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: $162return_value.11 = cast(value=$const160.10)
07/29/2024 05:30:18 PM - DEBUG - _run_ssa_block_pass - on stmt: return $162return_value.11
